#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.breakpoints = {loc('sample_50.py'): {26L: (0,
        None,
        1,
        0)},
                     loc('train.py'): {354L: (0,
        None,
        1,
        0),
                                       379L: (0,
        None,
        1,
        0),
                                       387L: (0,
        None,
        1,
        0)}}
debug.err-values = {loc('../DeepForest/count_annotations.py'): {},
                    loc('DeepForest/h5_generator.py'): {},
                    loc('eval.py'): {},
                    loc('evaluate.py'): {},
                    loc('predict.py'): {},
                    loc('retrain.py'): {},
                    loc('sample_50.py'): {},
                    loc('test.py'): {},
                    loc('train.py'): {},
                    loc('train_fixed.py'): {},
                    loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'): {},
                    loc('../keras-retinanet/keras_retinanet/utils/eval.py'): {},
                    loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/utils/eval.py'): {}}
debug.exceptions-ignored = {loc('../../miniconda3/envs/DeepForest/lib/python3.6/importlib/_bootstrap.py'): {219: True}}
debug.recent-run-args = {loc('../DeepForest/predict.py'): [u'--model /Users/ben/Documents/DeepForest/snapshots/fullmodel.h5 --image /Users/ben/Documents/DeepForest/data/SJER/SJER_053.tif --single_image',
        u'--model /Users/ben/Documents/DeepForest/snapshots/selfsupervised.h5 --image /Users/ben/Documents/DeepForest/data/SJER/SJER_053.tif --single_image',
        u'--model /Users/ben/Documents/DeepForest/snapshots/selfsupervised.h5 --image /Users/ben/Documents/DeepForest/data/SJER/SJER_015.tif --single_image',
        u'--model /Users/ben/Documents/DeepForest/snapshots/fullmodel.h5 --image /Users/ben/Documents/DeepForest/data/SJER/SJER_015.tif --single_image',
        u'--model /Users/ben/Documents/DeepForest/snapshots/fullmodel.h5 --image /Users/ben/Documents/DeepForest/data/SJER/SJER_015.tif',
        u'--model /Users/ben/Documents/DeepForest/snapshots/selfsupervised.h5 --image /Users/ben/Documents/DeepForest/data/SJER/SJER_015.tif',
        u'--model /Users/ben/Documents/DeepForest/snapshots/selfsupervised.h5 --image /Users/ben/Documents/DeepForest/data/SJER/SJER_063.tif',
        u'--model /Users/ben/Documents/DeepForest/snapshots/selfsupervised.h5 --image /Users/ben/Documents/DeepForest/data/SJER/SJER_053.tif',
        u'--model /Users/ben/Documents/DeepForest/snapshots/fullmodel.h5 --image /Users/ben/Documents/DeepForest/data/SJER/SJER_053.tif',
        u'--model /Users/ben/Documents/DeepForest/snapshots/fullmodel.h5'],
                         loc('../DeepForest/train.py'): [u'--mode retrain'],
                         loc('DeepForest/Generate.py'): [u'--tile /Users/ben/Documents/DeepLidar/data/TEAK/NEON_D17_TEAK_DP1_315000_4091000_classified_point_cloud_colorized.csv',
        u'--tile /Users/ben/Documents/DeepLidar/data/SJER/NEON_D17_SJER_DP1_258000_4106000_classified_point_cloud_colorized.csv',
        u'--tile /Users/ben/Documents/DeepLidar/data/SJER/2018_SJER_3_258000_4106000_image.tif'],
                         loc('Generate.py'): [u'--tile /Users/ben/Documents/DeepLidar/data/SJER/NEON_D17_SJER_DP1_257000_4110000_classified_point_cloud_colorized.csv'],
                         loc('dask_generate.py'): [u'-m cProfile -o profile_output',
        u'-m cProfile'],
                         loc('debug.py'): [u'--mode train',
        u'--mode retrain',
        u'--annotations onthefly data/training/annotations.csv ',
        u'--annotations onthefly data/training/evaluation.csv ',
        u'--anchors onthefly data/training/evaluation.csv ',
        u'onthefly data/training/evaluation.csv --anchors',
        u'onthefly data/training/evaluation.csv',
        u'onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_10.h5 --convert-model --score-threshold 0.05 --suppression-threshold 0.1 --save-path snapshots/images/ ',
        u'--score-threshold 0.05 --suppression-threshold 0.1 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_10.h5 --convert-model '],
                         loc('eval.py'): [u'--mode train --saved_model /Users/ben/Downloads/resnet50_13.h5',
        u'--mode train --saved_model /Users/ben/Downloads/resnet50_13.h5 --iou-threshold 0.25',
        u'--model /Users/ben/Downloads/resnet50_13.h5',
        u'--mode train',
        u'--mode train --score-threshold 0.05 --suppression-threshold 0.1 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_10.h5 --convert-model ',
        u'--score-threshold 0.05 --suppression-threshold 0.1 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_10.h5 --convert-model ',
        u'--score-threshold 0.05 --suppression_threshold 0.1 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_10.h5 --convert-model ',
        u'--score-threshold 0.05 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_10.h5 --convert-model --suppression_threshold 0.1',
        u'--score-threshold 0.05 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_10.h5 --convert-model',
        u'--score-threshold 0.2 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_01.h5 --convert-model',
        u'--score-threshold 0.05 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_01.h5 --convert-model',
        u'--score-threshold 0.35 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_01.h5 --convert-model',
        u'--score-threshold 0.35 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_04.h5 --convert-model',
        u'--score-threshold 0.3 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_04.h5 --convert-model',
        u'--score-threshold 0.25 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_04.h5 --convert-model',
        u'--score-threshold 0.5 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_04.h5 --convert-model',
        u'--score-threshold 0.4 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_04.h5 --convert-model',
        u'--score-threshold 0.4 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_08.h5 --convert-model',
        u'--score-threshold 0.5 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_08.h5 --convert-model',
        u'--score-threshold 0.5 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_05.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_18.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly snapshots/detection.csv snapshots/resnet50_onthefly_18.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly snapshots/detection.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly snapshots/evaluation.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly data/training/detection.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.50 --save-path snapshots/images/ onthefly data/training/detection.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.25 --save-path snapshots/images/ onthefly data/training/detection.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.25 --save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.25 --save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_27.h5 --convert-model'],
                         loc('evaluate.py'): [u'--logdir=logs/20180524-065707',
        u'--logdir=20180524-065707'],
                         loc('predict.py'): [u'--model /Users/ben/Documents/DeepLidar/snapshots/TEAK_20190125_125012_fullmodel.h5 --image data/TEAK/samples/',
        u'--model /Users/ben/Documents/DeepLidar/snapshots/TEAK_20190125_125012_fullmodel.h5 --image data/TEAK/',
        u'--model /Users/ben/Documents/DeepLidar/snapshots/TEAK_20190125_125012_fullmodel.h5 --image data/TEAK/samples',
        u'--model /Users/ben/Documents/DeepLidar/snapshots/TEAK_20190123_230150_selfsupervised.h5 --image data/TEAK/samples',
        u'--model /Users/ben/Documents/DeepForest/snapshots/fullmodel.h5 --image /Users/ben/Downloads/2018_SJER_3_254000_4108000_image.tif',
        u'--model /Users/ben/Documents/DeepForest/snapshots/selfsupervised.h5 --image /Users/ben/Downloads/2018_SJER_3_254000_4108000_image.tif',
        u'--model /Users/ben/Documents/DeepForest/snapshots/fullmodel.h5 --image data/SJER/SJER_005.tif --single_image',
        u'--model /Users/ben/Documents/DeepForest/snapshots/fullmodel.h5 --image data/SJER/SJER_005.tif',
        u'--model /Users/ben/Downloads/resnet50_17.h5',
        u'--logdir logs/20180524-065707',
        u'--logdir 20180524-065707',
        u'--logdir 20180521-085302'],
                         loc('train.py'): [u'--mode retrain\n',
        u'--mode train\n'],
                         loc('../DeepMeerkat/training/Classification/CreateDocs.py'): [u'--DATA_PATH gs://api-project-773889352370-ml/Viivi_Fish',
        u'--dirname Viivi_Fish'],
                         loc('../keras-retinanet/keras_retinanet/bin/train.py'): [u'csv /Users/Ben/Documents/keras-retinanet/tests/test-data/annotations.csv /Users/Ben/Documents/keras-retinanet/tests/test-data/classes.csv',
        u'/Users/Ben/Documents/keras-retinanet/tests/test-data/annotations.csv /Users/Ben/Documents/keras-retinanet/tests/test-data/classes.csv']}
debug.remote-hosts = (4,
                      [{'agent-port': 0,
                        'basedir': u'',
                        'debug-port': 0,
                        'forward-x11': False,
                        'hostname': 'b.weinstein@dev1.ufhpc',
                        'id': 'Hipergator',
                        'io-encoding': None,
                        'pyexec': u'',
                        'shared': False,
                        'winghome': '/home/b.weinstein/wing/'}])
edit.bookmarks = {'bookmark': (loc('unknown:<untitled> #1'),
                               {'attrib-starts': [],
                                'first-line': 1L,
                                'sel-line': 3L}),
                  'load_csvs': (loc('DeepForest/preprocess.py'),
                                {'attrib-starts': [('load_csvs',
        17)],
                                 'first-line': 13L,
                                 'sel-line': 26L})}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'VSDAhWt2BV6sPBpBVtPYFlhpbW'\
        'fdUsSC',
        'size-state': 'fullscreen',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.05861828332170271,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': ()}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [3,
                          1],
        'notebook_display': 'normal',
        'notebook_percent': 0.5,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'TEAK',
                                       'fReverse': False,
                                       'fSearchText': u'no-weight',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'TEAK',
                                       'fReverse': False,
                                       'fSearchText': u'min_side',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('testing',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 8631L,
                       'folded-linenos': [],
                       'history': {u'file:/Users/ben/Documents/DeepLidar/dask_generate.py': ['d'\
        'ata\n',
        'order\n',
        'row\n'],
                                   u'file:/Users/ben/Documents/DeepLidar/predict.py': ['n'\
        'p.expand_dims\n',
        'np.expand_dims(new_boxes,0)\n',
        'np.expand_dims(new_boxes,0).shape\n',
        'tree_boxes = np.expand_dims(new_boxes, 0)\n',
        'new_boxes = np.expand_dims(new_boxes, 0)\n',
        'scores.shape\n',
        '# visualize detections\nfor box, score, label in zip(newboxes[0], s'\
        'cores[0], labels[0]):\n    # scores are sorted so we can break\n   '\
        ' if score < args.score_threshold:\n        break\n        \n    col'\
        'or = label_color(label)\n    \n    b = box.astype(int)\n    draw_bo'\
        'x(draw, b, color=(90,255,0))\n    \n    caption = "{} {:.3f}".forma'\
        't(labels_to_names[label], score)\n    draw_caption(draw, b, caption'\
        ')\n\n',
        'new\n',
        'for box, score, label in zip(new_boxes[0], scores[0], labels[0]):\n'\
        '    # scores are sorted so we can break\n    if score < args.score_'\
        'threshold:\n        break\n        \n    color = label_color(label)'\
        '\n    \n    b = box.astype(int)\n    draw_box(draw, b, color=(90,25'\
        '5,0))\n    \n    caption = "{} {:.3f}".format(labels_to_names[label'\
        '], score)\n    draw_caption(draw, b, caption)\n\n',
        '# visualize ld detections\nfor box, score, label in zip(boxes[0], s'\
        'cores[0], labels[0]):\n    # scores are sorted so we can break\n   '\
        ' if score < args.score_threshold:\n        break\n        \n    col'\
        'or = label_color(label)\n    \n    b = box.astype(int)\n    draw_bo'\
        'x(draw, b, color=(255,165,0))\n    \n    caption = "{} {:.3f}".form'\
        'at(labels_to_names[label], score)\n    draw_caption(draw, b, captio'\
        'n)\n\n# visualize detections\nfor box, score, label in zip(new_boxe'\
        's[0], scores[0], labels[0]):\n    # scores are sorted so we can bre'\
        'ak\n    if score < args.score_threshold:\n        break\n        \n'\
        '    color = label_color(label)\n    \n    b = box.astype(int)\n    '\
        'draw_box(draw, b, color=(90,255,0))\n    \n    caption = "{} {:.3f}'\
        '".format(labels_to_names[label], score)\n    draw_caption(draw, b, '\
        'caption)    \n\n#Write .shp of predictions?\nfilename =  os.path.jo'\
        'in(args.output_dir, image_name + ".tif")\ncv2.imwrite(filename, dra'\
        'w)\n\n\n',
        'image_path = /Users/ben/Documents/DeepLidar/data/TEAK/samples/2018_'\
        'TEAK_3_322000_4107000_image_518.tif\n',
        'image_path = "/Users/ben/Documents/DeepLidar/data/TEAK/samples/2018'\
        '_TEAK_3_322000_4107000_image_518.tif"\n',
        '# load image\nimage = read_image_bgr(image_path)\n\n# copy to draw '\
        'on\ndraw = image.copy()\n\n# preprocess image for network\nimage = '\
        'preprocess_image(image)\nimage, scale = resize_image(image)\n\n# pr'\
        'ocess image\nstart = time.time()\nboxes, scores, labels = model.pre'\
        'dict_on_batch(np.expand_dims(image, axis=0))\nprint("processing tim'\
        'e: ", time.time() - start)\n\n# correct for image scale\nboxes /= s'\
        'cale\n\n#drape boxes\n#get image name\nimage_name = os.path.splitex'\
        't(os.path.basename(image_path))[0]\n\n#only pass score threshold bo'\
        'xes\nquality_boxes = []\nfor box, score, label in zip(boxes[0], sco'\
        'res[0], labels[0]):\n    quality_boxes.append(box)\n    # scores ar'\
        'e sorted so we can break\n    if score < args.score_threshold:\n   '\
        '     break\n    \npc = postprocessing.drape_boxes(boxes=quality_box'\
        'es, tilename=image_name, lidar_dir=DeepForest_config["lidar_path"])'\
        '\nnew_boxes = postprocessing.cloud_to_box(pc)\n    \n#view\n#pc.dat'\
        'a.points.user_data.fillna(0, inplace=True)    \n#pc.write("/Users/B'\
        'en/Desktop/test.laz")\n\n#cmap=utils._discrete_cmap(n_bin= len(pc.d'\
        'ata.points.user_data.unique()), base_cmap="Spectral_r")\n#pyfor.ras'\
        'terizer.Grid(pc, cell_size=1).raster("max", "user_data").plot(cmap='\
        'cmap)\n\n# visualize ld detections\nfor box, score, label in zip(bo'\
        'xes[0], scores[0], labels[0]):\n    # scores are sorted so we can b'\
        'reak\n    if score < args.score_threshold:\n        break\n        '\
        '\n    color = label_color(label)\n    \n    b = box.astype(int)\n  '\
        '  draw_box(draw, b, color=(255,165,0))\n    \n    caption = "{} {:.'\
        '3f}".format(labels_to_names[label], score)\n    draw_caption(draw, '\
        'b, caption)\n\n# visualize detections\nfor box, score, label in zip'\
        '(new_boxes[0], scores[0], labels[0]):\n    # scores are sorted so w'\
        'e can break\n    if score < args.score_threshold:\n        break\n'\
        '        \n    color = label_color(label)\n    \n    b = box.astype('\
        'int)\n    draw_box(draw, b, color=(255,90,0))\n    \n    #caption ='\
        ' "{} {:.3f}".format(labels_to_names[label], score)\n    #draw_capti'\
        'on(draw, b, caption)    \n\n#Write .shp of predictions?\nfilename ='\
        '  os.path.join(args.output_dir, image_name + ".tif")\ncv2.imwrite(f'\
        'ilename, draw)\n\n\n',
        'color\n',
        'thickness\n',
        'boxes, scores, labels = model.predict_on_batch(np.expand_dims(image'\
        ', axis=0))\n',
        '# correct for image scale\nboxes /= scale\n\n#drape boxes\n#get ima'\
        'ge name\nimage_name = os.path.splitext(os.path.basename(image_path)'\
        ')[0]\n\n#only pass score threshold boxes\nquality_boxes = []\nfor b'\
        'ox, score, label in zip(boxes[0], scores[0], labels[0]):\n    quali'\
        'ty_boxes.append(box)\n    # scores are sorted so we can break\n    '\
        'if score < args.score_threshold:\n        break\n\n',
        '# visualize ld detections\nfor box, score, label in zip(boxes[0], s'\
        'cores[0], labels[0]):\n    # scores are sorted so we can break\n   '\
        ' if score < args.score_threshold:\n        break\n        \n    col'\
        'or = label_color(label)\n    \n    b = box.astype(int)\n    draw_bo'\
        'x(draw, b, color=(255,165,0))\n    \n    caption = "{} {:.3f}".form'\
        'at(labels_to_names[label], score)\n    draw_caption(draw, b, captio'\
        'n)\n\n',
        'filename =  os.path.join(args.output_dir, image_name + ".tif")\ncv2'\
        '.imwrite(filename, draw)\n\n',
        'filename\n',
        'image\n',
        'image = read_image_bgr(image_path)\n',
        'draw = image.copy()\n',
        'image = preprocess_image(image)\n',
        'image, scale = resize_image(image)\n',
        'image = preprocess_image(image, min_side = 400)\n',
        '# load image\nimage = read_image_bgr(image_path)\n\n# copy to draw '\
        'on\ndraw = image.copy()\n\n# preprocess image for network\nimage = '\
        'preprocess_image(image)\nimage, scale = resize_image(image, min_siz'\
        'e = 400)\n\n# process image\nstart = time.time()\nboxes, scores, la'\
        'bels = model.predict_on_batch(np.expand_dims(image, axis=0))\nprint'\
        '("processing time: ", time.time() - start)\n\n# correct for image s'\
        'cale\nboxes /= scale\n\n#drape boxes\n#get image name\nimage_name ='\
        ' os.path.splitext(os.path.basename(image_path))[0]\n\n',
        'resize_image\n',
        'resize_image()\n',
        'image, scale = resize_image(img = image, min_size = 400)\n',
        'import inspect\n',
        'inspect.getsource(resize_image)\n',
        'image = read_image_bgr(image_path)\n\n# copy to draw on\ndraw = ima'\
        'ge.copy()\n\n# preprocess image for network\nimage = preprocess_ima'\
        'ge(image)\nimage, scale = resize_image(img = image, min_side = 400)'\
        '\n\n# process image\nstart = time.time()\nboxes, scores, labels = m'\
        'odel.predict_on_batch(np.expand_dims(image, axis=0))\nprint("proces'\
        'sing time: ", time.time() - start)\n\n',
        'boxes /= scale\n',
        'scale\n',
        'image_name = os.path.splitext(os.path.basename(image_path))[0]\n',
        '#only pass score threshold boxes\nquality_boxes = []\nfor box, scor'\
        'e, label in zip(boxes[0], scores[0], labels[0]):\n    quality_boxes'\
        '.append(box)\n    # scores are sorted so we can break\n    if score'\
        ' < args.score_threshold:\n        break\n\n',
        'pc = postprocessing.drape_boxes(boxes=quality_boxes, tilename=image'\
        '_name, lidar_dir=DeepForest_config["lidar_path"])\n',
        'new_boxes = postprocessing.cloud_to_box(pc)\n',
        'for box, score, label in zip(boxes[0], scores[0], labels[0]):\n    '\
        '# scores are sorted so we can break\n    if score < args.score_thre'\
        'shold:\n        break\n\n',
        'for box, score, label in zip(boxes[0], scores[0], labels[0]):\n    '\
        '# scores are sorted so we can break\n    if score < args.score_thre'\
        'shold:\n        break\n        \n    color = label_color(label)\n  '\
        '  \n    b = box.astype(int)\n    draw_box(draw, b, color=(255,165,0'\
        '))\n    \n    caption = "{} {:.3f}".format(labels_to_names[label], '\
        'score)\n    draw_caption(draw, b, caption)\n\n',
        '#Write .shp of predictions?\nfilename =  os.path.join(args.output_d'\
        'ir, image_name + ".tif")\ncv2.imwrite(filename, draw)\n\n',
        'for box, score, label in zip(new_boxes[0], scores[0], labels[0]):\n'\
        '    # scores are sorted so we can break\n    if score < args.score_'\
        'threshold:\n        break\n        \n    color = label_color(label)'\
        '\n    \n    b = box.astype(int)\n    draw_box(draw, b, color=(255,9'\
        '0,0))\n\n',
        'image.shape\n',
        'box\n',
        'b\n',
        'new_boxes\n',
        'new_boxes.shape\n',
        'boxes.shape\n',
        '[pc.data.points.x.min(),pc.data.points.y.max()]\n',
        'np.array([pc.data.points.x.min(), pc.data.points.y.max()])\n',
        'points.shape\n',
        'points[0,:]\n',
        'points[:,]\n',
        'points = pc.data.points.loc[pc.data.points.user_data == tree_id,["x'\
        '","y"]]\n',
        'points.y = pc.data.points.y.max() - points.y\n',
        'points = pc.data.points.loc[pc.data.points.user_data == tree_id,["x'\
        '","y"]]\n\n#turn utm to cartesian, subtract min x and max y value, '\
        'divide by cell size. Max y because numpy 0,0 origin is top left. ut'\
        'm N is top. \npoints.x = points.x - pc.data.points.x.min()\npoints.'\
        'y = pc.data.points.y.max() - points.y \npoints =  points.values/ 0.'\
        '1\n\n',
        'points\n',
        'pc = Lidar.load_lidar(lidar_path)\n',
        'pc.points\n',
        'pc.data.points.nrow\n',
        'pc.data.points.size()\n',
        'pc.data.points.size\n',
        'pc.data.x\n',
        'pc.data.x.min()\n',
        '    xmax = pc.data.x.max()\n',
        'xmin = pc.data.x.min()\nxmax = pc.data.x.max()\n\nymin = pc.data.y.'\
        'min()\nymax = pc.data.y.max()\n\n',
        '    xmax - xmin\n',
        '    (xmax - xmin) * (ymax - ymin)\n',
        'n_points =  pc.data.points.size\n',
        'area = (xmax - xmin) * (ymax - ymin)\n',
        '    n_points / area\n',
        'pc.data.points.shape\n',
        'pc.data.points.shape[0]\n',
        '#number of points\nn_points =  pc.data.points.shape[0]\n\n#area\nxm'\
        'in = pc.data.x.min()\nxmax = pc.data.x.max()\n\nymin = pc.data.y.mi'\
        'n()\nymax = pc.data.y.max()\n\narea = (xmax - xmin) * (ymax - ymin)'\
        '\n\nn_points / area\n\n',
        'n_points / area\n',
        'density = n_points / area\n',
        'print("Point density is {.2f}".format(density))\n',
        'print("Point density is {:.2f}".format(density))\n',
        'images\n',
        'len(images)\n',
        ':odar\n',
        'Lidar\n',
        "def check_density(pc):\n    ''''\n    Check the point density of a "\
        "pyfor point cloud\n    returns: density in points/m^2\n    '''\n   "\
        " #number of points\n    n_points =  pc.data.points.shape[0]\n    \n"\
        "    #area\n    xmin = pc.data.x.min()\n    xmax = pc.data.x.max()\n"\
        "    \n    ymin = pc.data.y.min()\n    ymax = pc.data.y.max()\n    "\
        "\n    area = (xmax - xmin) * (ymax - ymin)\n    \n    density = n_p"\
        "oints / area\n    \n    return density\n\n",
        'check_density(pc)\n',
        'lidar_path\n',
        'laz_path\n',
        'pc.plot()\n',
        'a=pc.plot(return=True)\n',
        'help(pc.plot)\n',
        'a=pc.plot(return_plot=True)\n',
        'a\n',
        'a.show()\n',
        'pc\n',
        'pc.data.points\n',
        'pc.data.points.z\n',
        'pc.data.points.z.hist().show()\n',
        'pc.data.points.z.hist()\n',
        'pc.data.points.z.max()\n',
        'pc.data.points.z.quantile(0.995)\n'],
                                   u'file:/Users/ben/Documents/DeepLidar/sample.py': ['d'\
        'ata.columns\n',
        'data.rgb_path\n',
        'data.rgb_path.unique()\n',
        'windows.columns\n',
        'selected_windows = windows[["tile","window"]].drop_duplicates().sam'\
        'ple(n=n)\n',
        'selected_windows\n',
        'selected_data = data.merge(selected_windows)\n',
        'four_channel = generator.load_image(i)\n',
        'four_channel\n',
        'four_channel.shape\n',
        'four_channel[:,:,:3].shape\n',
        'rgb_image = four_channel[:,:,:3].shape\n',
        'import cv2\n',
        'generator.image_data\n',
        'impoort os\n',
        'import os\n',
        ' generator.image_data[i]["window"]\n',
        'tilename = tilename + "_" + generator.image_data[i]["window"] + ".t'\
        'if"\n',
        'tilename = tilename + "_" + str(generator.image_data[i]["window"]) '\
        '+ ".tif"\n',
        'DeepForest_confi\n',
        'filename = os.path.join("data",DeepForest_config["site"], tilename)'\
        '\n',
        'filename = os.path.join("data",DeepForest_config["Site"], tilename)'\
        '\n',
        'DeepForest_config\n',
        'os.getcwd()\n',
        'cv2.imwrite(rgb_image,filename)\n',
        'cv2.imwrite(filename,rgb_image)\n',
        'rgb_image\n',
        'rgb_image = four_channel[:,:,:3]\n',
        'cv2.imwrite(filename, rgb_image)\n',
        'from DeepForest import Lidar\n',
        'clipped_las = Lidar.clip_las(generator.lidar_tile, annotations = da'\
        'ta, row = generator.image_data[i], windows= windows, rgb_res = rgb_'\
        'res)\n',
        'clipped_las = Lidar.clip_las(generator.lidar_tile, annotations = da'\
        'ta, row = generator.image_data[i], windows= windows, rgb_res = Deep'\
        'Forest_config["rgb_res"])\n',
        'generator.image_data[i]\n',
        'generator.image_data[i]["window"]\n',
        'row\n',
        'windows\n',
        'generator.windows\n',
        'generator.windows[0]\n',
        'image\n',
        'help(generator.clipped_las.write)\n',
        'generator.clipped_las.Cloud.write(path=filename)\n',
        'generator.clipped_las.cloud.write(path=filename)\n',
        'generator.clipped_las.write(path=filename)\n',
        'generator\n',
        'generator.write\n',
        'generator.clipped_las.write()\n',
        'generator.clipped_las.data()\n',
        'generator.clipped_las.data.write\n',
        'generator.clipped_las.data.len\n',
        'generator.clipped_las.data\n',
        'generator.clipped_las.data.head()\n',
        'generator.clipped_las.head()\n',
        'generator.clipped_las.data.points.head()\n',
        'generator.clipped_las.write\n',
        'generator.clipped_las.write(path="/Users/Ben/Desktop/test.laz")\n',
        'lidar_tile\n',
        'generator.lidar_tile\n',
        'generator.clipped_tile\n',
        'generator.lidar_tile.write(path="/Users/Ben/Desktop/fulltest.laz")'\
        '\n',
        'a = generator.lidar_tile\n',
        'a\n',
        'a.write\n',
        'a.write(path="/Users/Ben/Desktop/fu2lltest.laz")\n',
        'generator.clipped_las\n',
        'generator.clipped_las.plot()\n',
        'tilename = os.path.splitext(generator.image_data[i]["tile"])[0]\n',
        'tilename = tilename + "_" + str(generator.image_data[i]["window"]) '\
        '+ ".laz"\n',
        'tilename\n',
        'filename = os.path.join("data",DeepForest_config["evaluation_site"]'\
        ', tilename)\n',
        'filename\n',
        'generator.clipped_las.write(filename)\n',
        'tilename = os.path.splitext(generator.image_data[i]["tile"])[0]\nti'\
        'lename = tilename + "_" + str(generator.image_data[i]["window"]) + '\
        '".tif"\nfilename = os.path.join("data",DeepForest_config["evaluatio'\
        'n_site"], tilename)\n\n#Write\ncv2.imwrite(filename, generator.imag'\
        'e)\n\n'],
                                   u'file:/Users/ben/Documents/DeepLidar/train.py': ['t'\
        'iles=self.windowdf["tile"].unique()\n',
        'tiles\n',
        'print("There are {} unique tiles".format(len(tiles)))\n',
        'total_annotations = 0\n',
        "for tilename in tiles:\n    csv_name = os.path.join(self.DeepForest"\
        "_config[\"h5_dir\"], str(tilename)+'.csv')\n    annotations = pd.re"\
        "ad_csv(csv_name)\n    selected_annotations = pd.merge(self.windowdf"\
        ", annotations)\n    total_annotations += len(selected_annotations)"\
        "\n\n",
        "print(\"There are {} unique tiles\".format(len(tiles)))\ntotal_anno"\
        "tations = 0\n        \n#Select annotations\nfor tilename in tiles:"\
        "\n    csv_name = os.path.join(self.DeepForest_config[\"h5_dir\"], s"\
        "tr(tilename)+'.csv')\n    annotations = pd.read_csv(csv_name)\n    "\
        "selected_annotations = pd.merge(self.windowdf, annotations)\n    to"\
        "tal_annotations += len(selected_annotations)        \n\nprint(\"The"\
        "re are a total of {} tree annotations\".format(total_annotations))"\
        "\n\n",
        'train.shape\n',
        'test.shape\n',
        'rain_generator.size()\n',
        'train_gen\n',
        'rain_generator.size().t\n',
        'train, test = preprocess.split_training(data, DeepForest_config, ex'\
        'periment=None)\n',
        'train_generator = H5Generator(train, batch_size = args.batch_size, '\
        'DeepForest_config = DeepForest_config, group_method="none", name = '\
        '"training")\n',
        'train_generator.windowdf\n',
        'train_generator.windowdf.windows\n',
        'image_names\n',
        'train_generator.image_names\n',
        'image_data= self.windowdf.to_dict("index")\n',
        'image_data\n',
        'len(image_data)\n',
        'windowdf\n',
        'self.windowdf\n',
        'self.windowdf.drop_duplicates()\n',
        'image.shape\n',
        'caption\n',
        'image\n',
        'image=image.copy()\n',
        'cv2.putText(image, caption, (b[0], b[1] - 10), cv2.FONT_HERSHEY_PLA'\
        'IN, 0.75, (0, 0, 0), 1)\n',
        'raw_image = raw_image.copy()\n',
        'image_index\n',
        'self.image_data\n',
        'self.image_data.keys()\n',
        'len(self.image_names)\n',
        'self.image_names\n',
        'print("There are {} names in the image names object".format(len(sel'\
        'f.image_names)))\n',
        'csv_data\n',
        'args.mode\n',
        'mode\n',
        'data.head\n',
        'csv_data.colunns\n',
        'csv_data.rgb_path.unique()\n',
        'tilename = os.path.split(data.rgb_path.unique())[-1]\ntilename = os'\
        '.path.splitext(tilename)[0]\n\n',
        'tios.path.split(data.rgb_path.unique())\n',
        'os.path.split(data.rgb_path.unique())\n',
        'data.rgb_path.unique\n',
        'data.rgb_path.unique()\n',
        'data.rgb_path.unique()[0]\n',
        'tilename = os.path.splitext(tile)[0]\n',
        'for tile in hand_annotation_tiles:\n    tilename = os.path.splitext'\
        '(tile)[0]\n\n',
        'hand_annotation_tiles = data.rgb_path.unique()[0]\nfor tile in hand'\
        '_annotation_tiles:\n    tilename = os.path.splitext(tile)[0]\n\n',
        'tile\n',
        'hand_annotation_tiles\n',
        'hand_annotation_tiles = data.rgb_path.unique()\nfor tile in hand_an'\
        'notation_tiles:\n    tilename = os.path.splitext(tile)[0]\n\n',
        'tilename\n',
        'os.path.join(DeepForest_config["h5_dir",tilename]) + ".csv"\n',
        'os.path.join(DeepForest_config["h5_dir"],tilename) + ".csv"\n',
        'laz_path\n',
        'self.lidar_filepath\n',
        'annotation_dict\n',
        'self.annotation_dict\n',
        'key\n',
        'box\n',
        'data\n',
        'csv_data.columns\n',
        "regex = re.compile(r'hand_annotations')\n",
        ' [i for i in data_paths if regex.search(i)]\n',
        'data_paths = [i for i in data_paths if regex.search(i)]\n',
        "regex = re.compile(r'hand_annotations')        \ndata_paths = [i fo"\
        "r i in data_paths if regex.search(i)]\n\n",
        'regex\n',
        'regex.search\n',
        'regex.search(data_paths)\n',
        'regex.search(data_paths[0])\n',
        'regex.search(data_paths[1])\n',
        'for csv in data_paths:\n    print(csv)\n\n',
        'for csv in data_paths:\n    print(csv)\n    if regex.search(csv):\n'\
        '        data_paths.remove(csv)\n\n',
        'data_paths\n',
        'train_generator.size()\n',
        'train_generator.image_data\n',
        'model.inputs\n',
        'DeepForest_config\n',
        'DeepForest_config["imagenet_weights"] == True\n',
        'DeepForest_config["num_GPUs"]\n',
        'args = ["--multi-gpu-force", "--multi-gpu", DeepForest_config["num_'\
        'GPUs"]] + args  \n',
        'not DeepForest_config["imagenet_weights"]\n',
        'DeepForest_config["weights"] \n',
        'DeepForest_config["imagenet_weights"]\n',
        'args.snapshot\n',
        'args.weights\n',
        'weights\n',
        'weights is None\n',
        'args.imagenet_weights\n',
        'args\n',
        'parse_args(args)\n',
        'parse_args(["--no-weights"])\n']},
                       'launch-id': None,
                       'sel-line': 8636L,
                       'sel-line-start': 515666L,
                       'selection_end': 515682L,
                       'selection_start': 515682L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 197L,
                       'folded-linenos': [],
                       'history': {None: ['import pyfor\n',
        'pc.pyfor.pc.Cloud("/Users/ben/Documents/pyfor/pyfortest/data/test.l'\
        'az")\n',
        'pc=pyfor..Cloud("/Users/ben/Documents/pyfor/pyfortest/data/test.laz'\
        '")\n',
        'pc=pyfor.Cloud("/Users/ben/Documents/pyfor/pyfortest/data/test.laz"'\
        ')\n',
        'pyfor.cloud\n',
        'pc = pyfor.cloud.Cloud("/Users/ben/Documents/pyfor/pyfortest/data/t'\
        'est.laz")\n',
        'generator\n',
        'g\n',
        'generator.clipped_las\n',
        'pc=pyfor.cloud.Cloud("/Users/ben/Documents/DeepLidar/data/TEAK/TEAK'\
        '_044.laz")\n',
        'pc.write("/Users/Ben/Desktop/test2.laz")\n',
        'pc.write\n',
        'pc\n',
        "import pyfor\n\n#Read in data\ntest_laz = pyfor.cloud.Cloud(\"/User"\
        "s/ben/Documents/pyfor/pyfortest/data/test.laz\")\ntest_shp = os.pat"\
        "h.join(data_dir, '/Users/ben/Documents/pyfor/pyfortest/data/clip.sh"\
        "p')\n\n",
        "import pyfor\nimport os\nimport geopandas as gpd\n\n#Read in data\n"\
        "test_laz = pyfor.cloud.Cloud(\"/Users/ben/Documents/pyfor/pyfortest"\
        "/data/test.laz\")\ntest_shp = os.path.join(data_dir, '/Users/ben/Do"\
        "cuments/pyfor/pyfortest/data/clip.shp')\n\n",
        "import pyfor\nimport os\nimport geopandas as gpd\n\n#Read in data\n"\
        "test_laz = pyfor.cloud.Cloud(\"/Users/ben/Documents/pyfor/pyfortest"\
        "/data/test.laz\")\ntest_shp = os.path.join('/Users/ben/Documents/py"\
        "for/pyfortest/data/, 'clip.shp')\n\n",
        "test_shp = os.path.join('/Users/ben/Documents/pyfor/pyfortest/data/"\
        "', 'clip.shp')\n",
        'test_laz.write("/Users/ben/Desktop/firstsave.laz")\n',
        "poly = gpd.read_file(test_shp)['geometry'][0]\n",
        'clipped=test_laz.clip(poly)\n',
        'clipped.data.points.head()\n',
        'test_laz.write("/Users/ben/Desktop/secondsave.laz")\n',
        'test_laz.write("/Users/ben/Desktop/clippedsave.laz")\n',
        'clipped.write("/Users/ben/Desktop/clippedsave.laz")\n',
        'data_paths\n',
        'a = ["a","b","c","d"]\n',
        'a.remove("b")\n',
        'a\n',
        "regex = re.compile(r'b')\n",
        'import re\n',
        "regex = re.compile(r'\\b[A-Z]{3,}\\b')\n",
        'a= ["dir/thing.csv","dir/hand_annotations.csv"]\n',
        "regex = re.compilte(r'hand_annotations')\n",
        "regex = re.compile(r'hand_annotations')\n",
        'a="/Users/ben/Documents/DeepLidar/data/TEAK/annotations/2018_TEAK_3'\
        '_315000_4094000_image_crop.xml"\n',
        'os.path\n',
        'os.path.split(a)\n',
        'os.path.split(a)[-1]\n',
        'os.path.split(a)[0]\n',
        'os.path.dirname\n',
        'os.path.dirname(a)\n',
        'os.path.dirname(os.path.dirname(a))\n',
        'a = [1,2,3]\n',
        'a[1:10]\n',
        '100 * 729\n',
        'exp\n',
        'import os\n',
        'os.path.join("this/dir",."*.png")\n',
        'os.path.join("this/dir","*.png")\n',
        'Lidar\n',
        'from Deep\n',
        'def load_lidar(laz_path):\n    """\n    Load lidar tile from file b'\
        'ased on path name\n    param: A string of the file path of the lida'\
        'r tile\n    return: A pyfor point cloud\n    """\n    \n    try:\n'\
        '        pc=pyfor.cloud.Cloud(laz_path)\n        pc.extension=".las"'\
        '\n        \n    except FileNotFoundError:\n        print("Failed lo'\
        'ading path: %s" %(laz_path))\n        \n    #normalize and filter\n'\
        '    pc.normalize(1)    \n    \n    #Quick filter for unreasonable p'\
        'oints.\n    pc.filter(min = -1, max = pc.data.points.z.quantile(0.9'\
        '95), dim = "z")    \n    \n    #Check dim\n    assert (not pc.data.'\
        'points.shape[0] == 0), "Lidar tile is empty!"\n    \n    return pc'\
        '\n\n',
        'pc = load_lidar("/Users/Ben/Documents/DeepLidar/data/TEAK/TEAK_043.'\
        'laz")\n',
        'pc.write("/Users/Ben/Desktop/test.laz")\n',
        'pyfor\n',
        'pyfor.__version__\n']},
                       'launch-id': None,
                       'sel-line': 205L,
                       'sel-line-start': 7360L,
                       'selection_end': 7360L,
                       'selection_start': 7360L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('DeepForest/Lidar.py'),
        {'attrib-starts': [('check_density',
                            258)],
         'first-line': 252L,
         'folded-linenos': [],
         'sel-line': 264L,
         'sel-line-start': 7897L,
         'selection_end': 7901L,
         'selection_start': 7901L,
         'zoom': 0L},
        1549052234.307028],
        [loc('DeepForest/postprocessing.py'),
         {'attrib-starts': [('drape_boxes',
                             12)],
          'first-line': 12L,
          'folded-linenos': [],
          'sel-line': 22L,
          'sel-line-start': 690L,
          'selection_end': 748L,
          'selection_start': 690L,
          'zoom': -1L},
         1549052240.846069],
        [loc('DeepForest/postprocessing.py'),
         {'attrib-starts': [('drape_boxes',
                             12)],
          'first-line': 9L,
          'folded-linenos': [],
          'sel-line': 24L,
          'sel-line-start': 711L,
          'selection_end': 749L,
          'selection_start': 711L,
          'zoom': -1L},
         1549052248.575768],
        [loc('DeepForest/Lidar.py'),
         {'attrib-starts': [('check_density',
                             258)],
          'first-line': 252L,
          'folded-linenos': [],
          'sel-line': 264L,
          'sel-line-start': 7897L,
          'selection_end': 7913L,
          'selection_start': 7913L,
          'zoom': 0L},
         1549052271.598317],
        [loc('../../miniconda3/envs/DeepLidar_dask/lib/python3.6/site-packages/pandas/core/generic.py'),
         {'attrib-starts': [('NDFrame',
                             101),
                            ('NDFrame.__getattr__',
                             4361)],
          'first-line': 4370L,
          'folded-linenos': [],
          'sel-line': 4375L,
          'sel-line-start': 150289L,
          'selection_end': 150289L,
          'selection_start': 150289L,
          'zoom': 0L},
         1549052281.977781],
        [loc('DeepForest/Lidar.py'),
         {'attrib-starts': [('check_density',
                             258)],
          'first-line': 188L,
          'folded-linenos': [],
          'sel-line': 258L,
          'sel-line-start': 7768L,
          'selection_end': 7785L,
          'selection_start': 7772L,
          'zoom': 0L},
         1549052461.745425],
        [loc('predict.py'),
         {'attrib-starts': [],
          'first-line': 83L,
          'folded-linenos': [36L],
          'sel-line': 89L,
          'sel-line-start': 2731L,
          'selection_end': 2763L,
          'selection_start': 2763L,
          'zoom': 0L},
         1549052463.513195],
        [loc('../keras-retinanet/keras_retinanet/utils/image.py'),
         {'attrib-starts': [('resize_image',
                             152)],
          'first-line': 12L,
          'folded-linenos': [],
          'sel-line': 152L,
          'sel-line-start': 5165L,
          'selection_end': 5181L,
          'selection_start': 5169L,
          'zoom': 0L},
         1549052466.730342],
        [loc('DeepForest/postprocessing.py'),
         {'attrib-starts': [('drape_boxes',
                             12)],
          'first-line': 9L,
          'folded-linenos': [],
          'sel-line': 28L,
          'sel-line-start': 797L,
          'selection_end': 827L,
          'selection_start': 827L,
          'zoom': -1L},
         1549052500.77112],
        [loc('predict.py'),
         {'attrib-starts': [],
          'first-line': 115L,
          'folded-linenos': [36L],
          'sel-line': 89L,
          'sel-line-start': 2731L,
          'selection_end': 2763L,
          'selection_start': 2763L,
          'zoom': 0L},
         1549052512.382711],
        [loc('DeepForest/postprocessing.py'),
         {'attrib-starts': [('drape_boxes',
                             12)],
          'first-line': 9L,
          'folded-linenos': [],
          'sel-line': 32L,
          'sel-line-start': 959L,
          'selection_end': 978L,
          'selection_start': 974L,
          'zoom': -1L},
         1549052600.98391],
        [loc('predict.py'),
         {'attrib-starts': [],
          'first-line': 106L,
          'folded-linenos': [36L],
          'sel-line': 87L,
          'sel-line-start': 2704L,
          'selection_end': 2721L,
          'selection_start': 2721L,
          'zoom': 0L},
         1549052676.387446],
        [loc('DeepForest/postprocessing.py'),
         {'attrib-starts': [('drape_boxes',
                             12)],
          'first-line': 19L,
          'folded-linenos': [],
          'sel-line': 47L,
          'sel-line-start': 1436L,
          'selection_end': 1461L,
          'selection_start': 1461L,
          'zoom': -1L},
         1549052739.335488],
        [loc('predict.py'),
         {'attrib-starts': [],
          'first-line': 83L,
          'folded-linenos': [36L],
          'sel-line': 105L,
          'sel-line-start': 3350L,
          'selection_end': 3360L,
          'selection_start': 3360L,
          'zoom': 0L},
         1549052959.896106],
        [loc('DeepForest/Lidar.py'),
         {'attrib-starts': [('check_density',
                             258)],
          'first-line': 169L,
          'folded-linenos': [],
          'sel-line': 258L,
          'sel-line-start': 7768L,
          'selection_end': 7785L,
          'selection_start': 7772L,
          'zoom': 0L},
         1549052968.030095],
        [loc('DeepForest/postprocessing.py'),
         {'attrib-starts': [('drape_boxes',
                             12)],
          'first-line': 26L,
          'folded-linenos': [],
          'sel-line': 43L,
          'sel-line-start': 1225L,
          'selection_end': 1247L,
          'selection_start': 1247L,
          'zoom': -1L},
         1549053098.098545],
        [loc('predict.py'),
         {'attrib-starts': [],
          'first-line': 97L,
          'folded-linenos': [36L],
          'sel-line': 112L,
          'sel-line-start': 3578L,
          'selection_end': 3600L,
          'selection_start': 3600L,
          'zoom': 0L},
         1549053519.77623],
        [loc('../../miniconda3/envs/DeepLidar_dask/lib/python3.6/site-packages/pyfor/ground_filter.py'),
         {'attrib-starts': [('Zhang2003',
                             6),
                            ('Zhang2003.bem',
                             118)],
          'first-line': 107L,
          'folded-linenos': [],
          'sel-line': 127L,
          'sel-line-start': 4386L,
          'selection_end': 4386L,
          'selection_start': 4386L,
          'zoom': 0L},
         1549053526.957278],
        [loc('predict.py'),
         {'attrib-starts': [],
          'first-line': 97L,
          'folded-linenos': [36L],
          'sel-line': 102L,
          'sel-line-start': 3125L,
          'selection_end': 3125L,
          'selection_start': 3125L,
          'zoom': 0L},
         1549053528.606568],
        [loc('DeepForest/postprocessing.py'),
         {'attrib-starts': [('drape_boxes',
                             12)],
          'first-line': 19L,
          'folded-linenos': [],
          'sel-line': 24L,
          'sel-line-start': 711L,
          'selection_end': 711L,
          'selection_start': 711L,
          'zoom': -1L},
         1549053546.278822]],
        20),
        'current-loc': loc('DeepForest/Lidar.py'),
        'editor-state-list': [(loc('DeepForest/postprocessing.py'),
                               {'attrib-starts': [('drape_boxes',
        12)],
                                'first-line': 19L,
                                'folded-linenos': [],
                                'sel-line': 24L,
                                'sel-line-start': 711L,
                                'selection_end': 711L,
                                'selection_start': 711L,
                                'zoom': -1L}),
                              (loc('predict.py'),
                               {'attrib-starts': [],
                                'first-line': 97L,
                                'folded-linenos': [36L],
                                'sel-line': 102L,
                                'sel-line-start': 3125L,
                                'selection_end': 3125L,
                                'selection_start': 3125L,
                                'zoom': 0L}),
                              (loc('../keras-retinanet/keras_retinanet/utils/image.py'),
                               {'attrib-starts': [('resize_image',
        152)],
                                'first-line': 12L,
                                'folded-linenos': [],
                                'sel-line': 152L,
                                'sel-line-start': 5165L,
                                'selection_end': 5181L,
                                'selection_start': 5169L,
                                'zoom': 0L}),
                              (loc('train.py'),
                               {'attrib-starts': [('parse_args',
        311)],
                                'first-line': 318L,
                                'folded-linenos': [],
                                'sel-line': 335L,
                                'sel-line-start': 13388L,
                                'selection_end': 13479L,
                                'selection_start': 13479L,
                                'zoom': 0L}),
                              (loc('../keras-retinanet/keras_retinanet/utils/eval.py'),
                               {'attrib-starts': [('_get_detections',
        56)],
                                'first-line': 68L,
                                'folded-linenos': [],
                                'sel-line': 79L,
                                'sel-line-start': 2992L,
                                'selection_end': 3000L,
                                'selection_start': 3000L,
                                'zoom': 0L}),
                              (loc('DeepForest/Lidar.py'),
                               {'attrib-starts': [('load_lidar',
        19)],
                                'first-line': 16L,
                                'folded-linenos': [],
                                'sel-line': 30L,
                                'sel-line-start': 598L,
                                'selection_end': 627L,
                                'selection_start': 627L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('DeepForest/postprocessing.py'),
         loc('predict.py'),
         loc('../keras-retinanet/keras_retinanet/utils/image.py'),
         loc('train.py'),
         loc('../keras-retinanet/keras_retinanet/utils/eval.py'),
         loc('DeepForest/Lidar.py')]),
                               'open_files': [u'../keras-retinanet/keras_retinanet/utils/eval.py',
        u'train.py',
        u'../keras-retinanet/keras_retinanet/utils/image.py',
        u'predict.py',
        u'DeepForest/postprocessing.py',
        u'DeepForest/Lidar.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.5},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         0,
                         1440,
                         900)}]}
guimgr.recent-documents = [loc('DeepForest/Lidar.py'),
                           loc('DeepForest/postprocessing.py'),
                           loc('predict.py'),
                           loc('../keras-retinanet/keras_retinanet/utils/image.py'),
                           loc('train.py'),
                           loc('../keras-retinanet/keras_retinanet/utils/eval.py')]
guimgr.visual-state = {loc('../../Desktop/test.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 487L,
        'selection_end': 487L,
        'selection_start': 487L,
        'zoom': 0L},
                       loc('DeepForest/CropGenerator.py'): {'attrib-starts': [('d'\
        'ata2geojson',
        113)],
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 114L,
        'sel-line-start': 3378L,
        'selection_end': 3385L,
        'selection_start': 3385L,
        'zoom': 0L},
                       loc('DeepForest/Generate.py'): {'attrib-starts': [('r'\
        'un',
        24)],
        'first-line': 87L,
        'folded-linenos': [],
        'sel-line': 103L,
        'sel-line-start': 3509L,
        'selection_end': 3513L,
        'selection_start': 3513L,
        'zoom': 0L},
                       loc('DeepForest/Lidar.py'): {'attrib-starts': [('load'\
        '_lidar',
        19)],
        'first-line': 11L,
        'folded-linenos': [],
        'sel-line': 24L,
        'sel-line-start': 500L,
        'selection_end': 507L,
        'selection_start': 507L,
        'zoom': 0L},
                       loc('DeepForest/README.md'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/RGB.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/callbacks.py'): {'attrib-starts': [('r'\
        'ecallCallback',
        6),
        ('recallCallback.on_epoch_end',
         36)],
        'first-line': 36L,
        'folded-linenos': [],
        'sel-line': 38L,
        'sel-line-start': 1807L,
        'selection_end': 1807L,
        'selection_start': 1807L,
        'zoom': 0L},
                       loc('DeepForest/config.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 4L,
        'sel-line-start': 42L,
        'selection_end': 85L,
        'selection_start': 85L,
        'zoom': 0L},
                       loc('DeepForest/dask_utils.py'): {'attrib-starts': [('s'\
        'tart_dask',
        4)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 126L,
        'selection_end': 130L,
        'selection_start': 130L,
        'zoom': 0L},
                       loc('DeepForest/evaluation.py'): {'attrib-starts': [],
        'first-line': 10L,
        'folded-linenos': [],
        'sel-line': 24L,
        'sel-line-start': 544L,
        'selection_end': 585L,
        'selection_start': 585L,
        'zoom': 0L},
                       loc('DeepForest/h5_generator.py'): {'attrib-starts': [('H'\
        '5Generator',
        25),
        ('H5Generator.load_annotations',
         198)],
        'first-line': 73L,
        'folded-linenos': [],
        'sel-line': 209L,
        'sel-line-start': 6750L,
        'selection_end': 6792L,
        'selection_start': 6791L,
        'zoom': 0L},
                       loc('DeepForest/neon_eval.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 91L,
        'selection_end': 125L,
        'selection_start': 125L,
        'zoom': 0L},
                       loc('DeepForest/onthefly_generator.py'): {'attrib-sta'\
        'rts': [('OnTheFlyGenerator',
                 24),
                ('OnTheFlyGenerator.fetch_annotations',
                 270)],
        'first-line': 162L,
        'folded-linenos': [94L,
                           117L,
                           118L,
                           132L,
                           137L,
                           142L,
                           147L,
                           168L,
                           176L,
                           182L,
                           187L,
                           188L,
                           195L,
                           204L,
                           210L,
                           216L,
                           247L,
                           270L],
        'sel-line': 276L,
        'sel-line-start': 8518L,
        'selection_end': 8540L,
        'selection_start': 8540L,
        'zoom': 0L},
                       loc('DeepForest/pointcloud.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/postprocessing.py'): {'attrib-starts': [('c'\
        'loud_to_box',
        73)],
        'first-line': 85L,
        'folded-linenos': [],
        'sel-line': 97L,
        'sel-line-start': 3044L,
        'selection_end': 3052L,
        'selection_start': 3052L,
        'zoom': -1L},
                       loc('DeepForest/preprocess.py'): {'attrib-starts': [('c'\
        'reate_windows',
        278)],
        'first-line': 272L,
        'folded-linenos': [],
        'sel-line': 289L,
        'sel-line-start': 9466L,
        'selection_end': 9485L,
        'selection_start': 9485L,
        'zoom': 0L},
                       loc('DeepForest/preprocess.pyc'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/sliding_window.py'): {'attrib-starts': [('l'\
        'oad',
        14)],
        'first-line': 11L,
        'folded-linenos': [],
        'sel-line': 18L,
        'sel-line-start': 484L,
        'selection_end': 488L,
        'selection_start': 488L,
        'zoom': 0L},
                       loc('DeepForest/tools.py'): {'attrib-starts': [],
        'first-line': 14L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 712L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/untitled-2.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/utils.py'): {'attrib-starts': [('_dis'\
        'crete_cmap',
        88)],
        'first-line': 85L,
        'folded-linenos': [],
        'sel-line': 93L,
        'sel-line-start': 2509L,
        'selection_end': 2509L,
        'selection_start': 2509L,
        'zoom': 0L},
                       loc('Generate.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('HPC/Start_Jupyter.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('HPC/retraining.sbatch'): {'attrib-starts': [],
        'first-line': 3L,
        'folded-linenos': [],
        'sel-line': 18L,
        'sel-line-start': 706L,
        'selection_end': 719L,
        'selection_start': 719L,
        'zoom': 0L},
                       loc('HPC/submit_cpu_job.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 13L,
        'sel-line-start': 646L,
        'selection_end': 652L,
        'selection_start': 652L,
        'zoom': 0L},
                       loc('HPC/submit_dask.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 16L,
        'sel-line-start': 650L,
        'selection_end': 663L,
        'selection_start': 663L,
        'zoom': 0L},
                       loc('HPC/submit_eval.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 924L,
        'selection_end': 953L,
        'selection_start': 953L,
        'zoom': 0L},
                       loc('HPC/submit_job.sh'): {'attrib-starts': [],
        'first-line': 12L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 897L,
        'selection_end': 913L,
        'selection_start': 913L,
        'zoom': 0L},
                       loc('HPC/submit_predict.sh'): {'attrib-starts': [],
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 924L,
        'selection_end': 1166L,
        'selection_start': 1166L,
        'zoom': 0L},
                       loc('HPC/submit_profile.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 6L,
        'sel-line-start': 283L,
        'selection_end': 291L,
        'selection_start': 291L,
        'zoom': 0L},
                       loc('HPC/submit_retraining.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 2L,
        'sel-line-start': 89L,
        'selection_end': 282L,
        'selection_start': 282L,
        'zoom': 0L},
                       loc('HPC/submit_training.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 2L,
        'sel-line-start': 89L,
        'selection_end': 99L,
        'selection_start': 99L,
        'zoom': 0L},
                       loc('HPC/training.sbatch'): {'attrib-starts': [],
        'first-line': 3L,
        'folded-linenos': [],
        'sel-line': 16L,
        'sel-line-start': 691L,
        'selection_end': 697L,
        'selection_start': 697L,
        'zoom': 0L},
                       loc('README.md'): {'attrib-starts': [],
        'first-line': 11L,
        'folded-linenos': [],
        'sel-line': 27L,
        'sel-line-start': 625L,
        'selection_end': 625L,
        'selection_start': 625L,
        'zoom': 0L},
                       loc('RGB.py'): {'attrib-starts': [],
                                       'first-line': 0L,
                                       'folded-linenos': [],
                                       'sel-line': 0L,
                                       'sel-line-start': 0L,
                                       'selection_end': 0L,
                                       'selection_start': 0L,
                                       'zoom': 0L},
                       loc('_config.yml'): {'attrib-starts': [],
        'first-line': 26L,
        'folded-linenos': [],
        'sel-line': 4L,
        'sel-line-start': 97L,
        'selection_end': 149L,
        'selection_start': 149L,
        'zoom': 0L},
                       loc('_config_debug.yml'): {'attrib-starts': [],
        'first-line': 41L,
        'folded-linenos': [],
        'sel-line': 45L,
        'sel-line-start': 1051L,
        'selection_end': 1112L,
        'selection_start': 1112L,
        'zoom': 0L},
                       loc('_retrain_config.yml'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('_retrain_config_debug.yml'): {'attrib-starts': [],
        'first-line': 11L,
        'folded-linenos': [],
        'sel-line': 38L,
        'sel-line-start': 1018L,
        'selection_end': 1018L,
        'selection_start': 1018L,
        'zoom': 0L},
                       loc('config.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('dask_generate.py'): {'attrib-starts': [],
        'first-line': 77L,
        'folded-linenos': [],
        'sel-line': 95L,
        'sel-line-start': 2434L,
        'selection_end': 2438L,
        'selection_start': 2438L,
        'zoom': 0L},
                       loc('data/SJER/annotations/2017_SJER_2_259000_4110000_image.xml'): {'a'\
        'ttrib-starts': [],
        'first-line': 10L,
        'folded-linenos': [],
        'sel-line': 25L,
        'sel-line-start': 613L,
        'selection_end': 625L,
        'selection_start': 619L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_002.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 16L,
        'sel-line-start': 375L,
        'selection_end': 388L,
        'selection_start': 388L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_003.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_004.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 270L,
        'selection_end': 298L,
        'selection_start': 298L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_005.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 16L,
        'sel-line-start': 375L,
        'selection_end': 388L,
        'selection_start': 388L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_006.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 14L,
        'sel-line-start': 327L,
        'selection_end': 355L,
        'selection_start': 355L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_007.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 13L,
        'selection_end': 29L,
        'selection_start': 29L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_008.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_009.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 13L,
        'selection_end': 29L,
        'selection_start': 29L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_010.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 13L,
        'selection_end': 29L,
        'selection_start': 29L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_012.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 13L,
        'selection_end': 29L,
        'selection_start': 29L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_015.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 13L,
        'selection_end': 29L,
        'selection_start': 29L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_016.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 13L,
        'selection_end': 29L,
        'selection_start': 29L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_021.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_022.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_025.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_026.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_045.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 13L,
        'selection_end': 29L,
        'selection_start': 29L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_046.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_047.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 8L,
        'sel-line-start': 185L,
        'selection_end': 197L,
        'selection_start': 197L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_048.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_049.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 13L,
        'selection_end': 29L,
        'selection_start': 29L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_050.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_051.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 13L,
        'selection_end': 29L,
        'selection_start': 29L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_052.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_053.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 13L,
        'selection_end': 32L,
        'selection_start': 29L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_054.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 13L,
        'selection_end': 29L,
        'selection_start': 29L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_055.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_056.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 13L,
        'selection_end': 29L,
        'selection_start': 29L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_057.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 13L,
        'selection_end': 29L,
        'selection_start': 29L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_058.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_059.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_060.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_061.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_062.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_063.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/SJER/annotations/SJER_064.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/TEAK/annotations/2018_TEAK_3_315000_4094000_image_crop.xml'): {'a'\
        'ttrib-starts': [],
        'first-line': 13671L,
        'folded-linenos': [15557L,
                           15570L,
                           15583L],
        'sel-line': 13684L,
        'sel-line-start': 354912L,
        'selection_end': 354925L,
        'selection_start': 354925L,
        'zoom': 0L},
                       loc('data/TEAK/annotations/TEAK_044.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/TEAK/annotations/TEAK_045.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/TEAK/annotations/TEAK_047.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/TEAK/annotations/TEAK_049.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/TEAK/annotations/TEAK_050.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/TEAK/annotations/TEAK_051.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/TEAK/annotations/TEAK_052.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 1043L,
        'folded-linenos': [],
        'sel-line': 10L,
        'sel-line-start': 223L,
        'selection_end': 241L,
        'selection_start': 237L,
        'zoom': 0L},
                       loc('data/TEAK/annotations/TEAK_054.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 19L,
        'sel-line-start': 482L,
        'selection_end': 503L,
        'selection_start': 503L,
        'zoom': 0L},
                       loc('data/TEAK/annotations/TEAK_057.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/TEAK/annotations/TEAK_058.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/TEAK/annotations/TEAK_059.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 669L,
        'folded-linenos': [],
        'sel-line': 691L,
        'sel-line-start': 17688L,
        'selection_end': 17690L,
        'selection_start': 17690L,
        'zoom': 0L},
                       loc('data/TEAK/annotations/TEAK_060.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('data/TEAK/annotations/TEAK_061.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 47L,
        'folded-linenos': [],
        'sel-line': 68L,
        'sel-line-start': 1731L,
        'selection_end': 1750L,
        'selection_start': 1750L,
        'zoom': 0L},
                       loc('data/TEAK/annotations/TEAK_062.xml'): {'attrib-s'\
        'tarts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('debug'): {'attrib-starts': [],
                                      'first-line': 0L,
                                      'folded-linenos': [],
                                      'sel-line': 0L,
                                      'sel-line-start': 0L,
                                      'selection_end': 0L,
                                      'selection_start': 0L,
                                      'zoom': 0L},
                       loc('debug.py'): {'attrib-starts': [('create_generato'\
        'r',
        31)],
        'first-line': 43L,
        'folded-linenos': [],
        'sel-line': 58L,
        'sel-line-start': 1999L,
        'selection_end': 2034L,
        'selection_start': 2034L,
        'zoom': 0L},
                       loc('debug_total_annotations.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('environment.yml'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('eval.py'): {'attrib-starts': [('main',
        97)],
        'first-line': 140L,
        'folded-linenos': [],
        'sel-line': 153L,
        'sel-line-start': 5701L,
        'selection_end': 5762L,
        'selection_start': 5762L,
        'zoom': 0L},
                       loc('index.html'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('install_dependencies.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 251L,
        'selection_end': 251L,
        'selection_start': 251L,
        'zoom': 0L},
                       loc('models/inception.py'): {'attrib-starts': [('get_'\
        'model',
        4)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 197L,
        'selection_end': 245L,
        'selection_start': 245L,
        'zoom': 0L},
                       loc('models/rgb.py'): {'attrib-starts': [('get_model',
        6)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 8L,
        'sel-line-start': 141L,
        'selection_end': 221L,
        'selection_start': 221L,
        'zoom': 0L},
                       loc('onthefly_generator.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('predict.py'): {'attrib-starts': [],
        'first-line': 54L,
        'folded-linenos': [],
        'sel-line': 63L,
        'sel-line-start': 1947L,
        'selection_end': 1970L,
        'selection_start': 1970L,
        'zoom': 0L},
                       loc('profiler.py'): {'attrib-starts': [],
        'first-line': 400L,
        'folded-linenos': [],
        'sel-line': 403L,
        'sel-line-start': 16291L,
        'selection_end': 16457L,
        'selection_start': 16291L,
        'zoom': 0L},
                       loc('retrain.py'): {'attrib-starts': [],
        'first-line': 435L,
        'folded-linenos': [],
        'sel-line': 450L,
        'sel-line-start': 17977L,
        'selection_end': 17977L,
        'selection_start': 17977L,
        'zoom': 0L},
                       loc('sample.py'): {'attrib-starts': [('sample',
        14)],
        'first-line': 24L,
        'folded-linenos': [],
        'sel-line': 51L,
        'sel-line-start': 1655L,
        'selection_end': 1671L,
        'selection_start': 1671L,
        'zoom': 0L},
                       loc('test.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('test_h5.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 467L,
        'selection_end': 486L,
        'selection_start': 486L,
        'zoom': 0L},
                       loc('tests/__init__.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_Lidar.py'): {'attrib-starts': [('test'\
        '_Lidar',
        2)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 207L,
        'selection_end': 207L,
        'selection_start': 207L,
        'zoom': 0L},
                       loc('train.py'): {'attrib-starts': [('main',
        348)],
        'first-line': 348L,
        'folded-linenos': [],
        'sel-line': 353L,
        'sel-line-start': 14528L,
        'selection_end': 14528L,
        'selection_start': 14528L,
        'zoom': 0L},
                       loc('train_retinanet.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepMeerkat/training/Classification/GenerateBoxes_new.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../TreeSegmentation/analysis/SubmitR.sh'): {'att'\
        'rib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 602L,
        'selection_end': 602L,
        'selection_start': 602L,
        'zoom': 0L},
                       loc('../TreeSegmentation/analysis/overlapCompetition.md'): {'a'\
        'ttrib-starts': [],
        'first-line': 81L,
        'folded-linenos': [],
        'sel-line': 98L,
        'sel-line-start': 2125L,
        'selection_end': 2125L,
        'selection_start': 2125L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/backend/common.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 51L,
        'selection_end': 56L,
        'selection_start': 55L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/_config_debug.yml'): {'a'\
        'ttrib-starts': [],
        'first-line': 1L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 246L,
        'selection_end': 246L,
        'selection_start': 246L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/config.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 14L,
        'sel-line-start': 494L,
        'selection_end': 494L,
        'selection_start': 494L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/debug.py'): {'a'\
        'ttrib-starts': [('run',
                          164)],
        'first-line': 143L,
        'folded-linenos': [],
        'sel-line': 198L,
        'sel-line-start': 8393L,
        'selection_end': 8500L,
        'selection_start': 8393L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/eval_test.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 26L,
        'folded-linenos': [],
        'sel-line': 31L,
        'sel-line-start': 1064L,
        'selection_end': 1064L,
        'selection_start': 1064L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/evaluate.py'): {'a'\
        'ttrib-starts': [('main',
                          114)],
        'first-line': 137L,
        'folded-linenos': [],
        'sel-line': 151L,
        'sel-line-start': 5982L,
        'selection_end': 5999L,
        'selection_start': 5999L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/train.py'): {'a'\
        'ttrib-starts': [('create_generators',
                          204)],
        'first-line': 198L,
        'folded-linenos': [],
        'sel-line': 211L,
        'sel-line-start': 7748L,
        'selection_end': 7767L,
        'selection_start': 7767L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/callbacks/common.py'): {'a'\
        'ttrib-starts': [('RedirectModel',
                          3)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 279L,
        'selection_end': 330L,
        'selection_start': 330L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/callbacks/eval.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 593L,
        'selection_end': 627L,
        'selection_start': 593L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/layers/filter_detections.py'): {'a'\
        'ttrib-starts': [('filter_detections',
                          20),
                         ('filter_detections._filter_detections',
                          50)],
        'first-line': 44L,
        'folded-linenos': [],
        'sel-line': 56L,
        'sel-line-start': 2552L,
        'selection_end': 2583L,
        'selection_start': 2583L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/models/__init__.py'): {'a'\
        'ttrib-starts': [('load_model',
                          61)],
        'first-line': 50L,
        'folded-linenos': [],
        'sel-line': 89L,
        'sel-line-start': 3727L,
        'selection_end': 3727L,
        'selection_start': 3727L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/models/resnet.py'): {'a'\
        'ttrib-starts': [('resnet_retinanet',
                          77)],
        'first-line': 76L,
        'folded-linenos': [],
        'sel-line': 86L,
        'sel-line-start': 3193L,
        'selection_end': 3204L,
        'selection_start': 3204L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/models/retinanet.py'): {'a'\
        'ttrib-starts': [('retinanet_bbox',
                          280)],
        'first-line': 300L,
        'folded-linenos': [],
        'sel-line': 317L,
        'sel-line-start': 12496L,
        'selection_end': 12522L,
        'selection_start': 12522L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/preprocessing/csv_generator.py'): {'a'\
        'ttrib-starts': [('CSVGenerator',
                          112),
                         ('CSVGenerator.__init__',
                          118)],
        'first-line': 145L,
        'folded-linenos': [],
        'sel-line': 159L,
        'sel-line-start': 5509L,
        'selection_end': 5509L,
        'selection_start': 5509L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/preprocessing/generator.py'): {'a'\
        'ttrib-starts': [('Generator',
                          37),
                         ('Generator.__init__',
                          41)],
        'first-line': 10L,
        'folded-linenos': [],
        'sel-line': 51L,
        'sel-line-start': 1404L,
        'selection_end': 1422L,
        'selection_start': 1412L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/preprocessing/lidar_crop.py'): {'a'\
        'ttrib-starts': [('compute_chm',
                          50)],
        'first-line': 27L,
        'folded-linenos': [],
        'sel-line': 68L,
        'sel-line-start': 2217L,
        'selection_end': 2221L,
        'selection_start': 2221L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'): {'a'\
        'ttrib-starts': [('OnTheFlyGenerator',
                          219),
                         ('OnTheFlyGenerator.load_annotations',
                          353)],
        'first-line': 350L,
        'folded-linenos': [],
        'sel-line': 367L,
        'sel-line-start': 12388L,
        'selection_end': 12439L,
        'selection_start': 12439L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/anchors.py'): {'a'\
        'ttrib-starts': [('bbox_transform',
                          285)],
        'first-line': 298L,
        'folded-linenos': [],
        'sel-line': 303L,
        'sel-line-start': 11676L,
        'selection_end': 11698L,
        'selection_start': 11698L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/colors.py'): {'a'\
        'ttrib-starts': [('label_color',
                          3)],
        'first-line': 91L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 436L,
        'selection_end': 484L,
        'selection_start': 484L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/compute_overlap.c'): {'a'\
        'ttrib-starts': [],
        'first-line': 1811L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/compute_overlap.pyx'): {'a'\
        'ttrib-starts': [],
        'first-line': 23L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 284L,
        'selection_end': 303L,
        'selection_start': 303L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/config.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 10L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 678L,
        'selection_end': 678L,
        'selection_start': 678L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/eval.py'): {'a'\
        'ttrib-starts': [('_get_detections',
                          56)],
        'first-line': 230L,
        'folded-linenos': [],
        'sel-line': 64L,
        'sel-line-start': 2170L,
        'selection_end': 2227L,
        'selection_start': 2227L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/image.py'): {'a'\
        'ttrib-starts': [('preprocess_image',
                          35)],
        'first-line': 29L,
        'folded-linenos': [],
        'sel-line': 50L,
        'sel-line-start': 1611L,
        'selection_end': 1633L,
        'selection_start': 1633L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/model.py'): {'a'\
        'ttrib-starts': [('freeze',
                          17)],
        'first-line': 14L,
        'folded-linenos': [],
        'sel-line': 18L,
        'sel-line-start': 600L,
        'selection_end': 642L,
        'selection_start': 642L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/visualization.py'): {'a'\
        'ttrib-starts': [('draw_box',
                          32)],
        'first-line': 27L,
        'folded-linenos': [],
        'sel-line': 38L,
        'sel-line-start': 1118L,
        'selection_end': 1159L,
        'selection_start': 1159L,
        'zoom': 0L},
                       loc('../keras-retinanet/profile.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../keras-retinanet/tests/bin/test_train.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 67L,
        'folded-linenos': [],
        'sel-line': 18L,
        'sel-line-start': 634L,
        'selection_end': 634L,
        'selection_start': 634L,
        'zoom': 0L},
                       loc('../keras-retinanet/tests/preprocessing/profile_onthefly.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 14L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 179L,
        'selection_end': 190L,
        'selection_start': 190L,
        'zoom': 0L},
                       loc('../keras-retinanet/tests/preprocessing/test_csv_generator.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 10L,
        'folded-linenos': [],
        'sel-line': 23L,
        'sel-line-start': 693L,
        'selection_end': 713L,
        'selection_start': 698L,
        'zoom': 0L},
                       loc('../lidR/src/C_knn.cpp'): {'attrib-starts': [],
        'first-line': 49L,
        'folded-linenos': [],
        'sel-line': 63L,
        'sel-line-start': 1743L,
        'selection_end': 1743L,
        'selection_start': 1743L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/clip.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/cloud.py'): {'attrib-starts': [('C'\
        'loud',
        77),
        ('Cloud.clip',
         299)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 317L,
        'sel-line-start': 14248L,
        'selection_end': 14272L,
        'selection_start': 14272L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/metrics2.py'): {'attrib-starts': [('m'\
        'ode',
        12)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 477L,
        'selection_end': 480L,
        'selection_start': 480L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/pointcloud2.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/rasterizer.py'): {'attrib-starts': [('G'\
        'rid',
        7),
        ('Grid.__init__',
         12)],
        'first-line': 336L,
        'folded-linenos': [],
        'sel-line': 19L,
        'sel-line-start': 773L,
        'selection_end': 784L,
        'selection_start': 784L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/test.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 13L,
        'sel-line-start': 250L,
        'selection_end': 286L,
        'selection_start': 286L,
        'zoom': 0L},
                       loc('../pyfor/pyfortest/test_pyfor.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 7L,
        'folded-linenos': [],
        'sel-line': 24L,
        'sel-line-start': 664L,
        'selection_end': 710L,
        'selection_start': 664L,
        'zoom': 0L},
                       loc('../temp/keras-retinanet/keras_retinanet/callbacks/eval.py'): {'a'\
        'ttrib-starts': [('Evaluate',
                          21),
                         ('Evaluate.on_epoch_end',
                          63)],
        'first-line': 19L,
        'folded-linenos': [],
        'sel-line': 110L,
        'sel-line-start': 4438L,
        'selection_end': 4476L,
        'selection_start': 4476L,
        'zoom': 0L},
                       loc('../temp/keras-retinanet/keras_retinanet/utils/eval.py'): {'a'\
        'ttrib-starts': [('JaccardEvaluate',
                          256)],
        'first-line': 268L,
        'folded-linenos': [],
        'sel-line': 276L,
        'sel-line-start': 10611L,
        'selection_end': 10624L,
        'selection_start': 10624L,
        'zoom': 0L},
                       loc('../temp/keras-retinanet/keras_retinanet/utils/visualization.py'): {'a'\
        'ttrib-starts': [('draw_ground_overlap',
                          111)],
        'first-line': 127L,
        'folded-linenos': [],
        'sel-line': 149L,
        'sel-line-start': 5416L,
        'selection_end': 5416L,
        'selection_start': 5416L,
        'zoom': 0L},
                       loc('../temp/keras-retinanet/setup.py'): {'attrib-sta'\
        'rts': [],
        'first-line': 8L,
        'folded-linenos': [],
        'sel-line': 29L,
        'sel-line-start': 1192L,
        'selection_end': 1269L,
        'selection_start': 1269L,
        'zoom': 0L},
                       loc('../train.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../Downloads/DeepForest.out'): {'attrib-start'\
        's': [],
        'first-line': 275L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 1031L,
        'selection_end': 1077L,
        'selection_start': 1077L,
        'zoom': 0L},
                       loc('../../Downloads/Miniconda3-latest-MacOSX-x86_64.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../Downloads/dask_example.py'): {'attrib-star'\
        'ts': [],
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 20L,
        'sel-line-start': 443L,
        'selection_end': 483L,
        'selection_start': 483L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/importlib/_bootstrap.py'): {'a'\
        'ttrib-starts': [('_lock_unlock_module',
                          193)],
        'first-line': 204L,
        'folded-linenos': [],
        'sel-line': 204L,
        'sel-line-start': 6252L,
        'selection_end': 6276L,
        'selection_start': 6276L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/posixpath.py'): {'a'\
        'ttrib-starts': [('split',
                          103)],
        'first-line': 97L,
        'folded-linenos': [],
        'sel-line': 106L,
        'sel-line-start': 3598L,
        'selection_end': 3598L,
        'selection_start': 3598L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/PIL/Image.py'): {'a'\
        'ttrib-starts': [('open',
                          2516)],
        'first-line': 2542L,
        'folded-linenos': [],
        'sel-line': 2546L,
        'sel-line-start': 85673L,
        'selection_end': 85689L,
        'selection_start': 85689L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/comet_ml/connection.py'): {'a'\
        'ttrib-starts': [('WebSocketConnection',
                          344),
                         ('WebSocketConnection.wait_for_connection',
                          435)],
        'first-line': 433L,
        'folded-linenos': [],
        'sel-line': 452L,
        'sel-line-start': 13751L,
        'selection_end': 13751L,
        'selection_start': 13751L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/comet_ml/keras_logger.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 55L,
        'folded-linenos': [],
        'sel-line': 67L,
        'sel-line-start': 2236L,
        'selection_end': 2236L,
        'selection_start': 2236L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/bin/debug.py'): {'a'\
        'ttrib-starts': [('run',
                          157)],
        'first-line': 86L,
        'folded-linenos': [],
        'sel-line': 198L,
        'sel-line-start': 8432L,
        'selection_end': 8432L,
        'selection_start': 8432L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/callbacks/eval.py'): {'a'\
        'ttrib-starts': [('Evaluate',
                          21),
                         ('Evaluate.__init__',
                          25)],
        'first-line': 36L,
        'folded-linenos': [],
        'sel-line': 59L,
        'sel-line-start': 2482L,
        'selection_end': 2521L,
        'selection_start': 2504L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/models/retinanet.py'): {'a'\
        'ttrib-starts': [('retinanet_bbox',
                          301)],
        'first-line': 293L,
        'folded-linenos': [],
        'sel-line': 305L,
        'sel-line-start': 11391L,
        'selection_end': 11424L,
        'selection_start': 11391L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/preprocessing/generator.py'): {'a'\
        'ttrib-starts': [('Generator',
                          39),
                         ('Generator.compute_input_output',
                          272)],
        'first-line': 277L,
        'folded-linenos': [],
        'sel-line': 288L,
        'sel-line-start': 11641L,
        'selection_end': 11674L,
        'selection_start': 11674L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/preprocessing/onthefly.py'): {'a'\
        'ttrib-starts': [('OnTheFlyGenerator',
                          165),
                         ('OnTheFlyGenerator.__init__',
                          171)],
        'first-line': 52L,
        'folded-linenos': [],
        'sel-line': 209L,
        'sel-line-start': 6660L,
        'selection_end': 6660L,
        'selection_start': 6660L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/utils/anchors.py'): {'a'\
        'ttrib-starts': [('bbox_transform',
                          311)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 342L,
        'sel-line-start': 12824L,
        'selection_end': 12842L,
        'selection_start': 12842L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/utils/eval.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 15L,
        'folded-linenos': [],
        'sel-line': 20L,
        'sel-line-start': 657L,
        'selection_end': 693L,
        'selection_start': 693L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/utils/visualization.py'): {'a'\
        'ttrib-starts': [('draw_box',
                          32)],
        'first-line': 23L,
        'folded-linenos': [],
        'sel-line': 42L,
        'sel-line-start': 1269L,
        'selection_end': 1352L,
        'selection_start': 1352L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/numpy/core/_methods.py'): {'a'\
        'ttrib-starts': [('_mean',
                          52)],
        'first-line': 67L,
        'folded-linenos': [],
        'sel-line': 81L,
        'sel-line-start': 2635L,
        'selection_end': 2635L,
        'selection_start': 2635L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          100),
                         ('NDFrame.__getattr__',
                          4357)],
        'first-line': 4352L,
        'folded-linenos': [],
        'sel-line': 4371L,
        'sel-line-start': 149987L,
        'selection_end': 149987L,
        'selection_start': 149987L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/pandas/core/groupby/groupby.py'): {'a'\
        'ttrib-starts': [('_GroupBy',
                          562),
                         ('_GroupBy._set_result_index_ordered',
                          736)],
        'first-line': 745L,
        'folded-linenos': [],
        'sel-line': 751L,
        'sel-line-start': 24174L,
        'selection_end': 24174L,
        'selection_start': 24174L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/pandas/core/ops.py'): {'a'\
        'ttrib-starts': [('_comp_method_SERIES',
                          1125),
                         ('_comp_method_SERIES.wrapper',
                          1177)],
        'first-line': 1224L,
        'folded-linenos': [],
        'sel-line': 1249L,
        'sel-line-start': 37432L,
        'selection_end': 37482L,
        'selection_start': 37482L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/rasterio/__init__.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/requests/adapters.py'): {'a'\
        'ttrib-starts': [('HTTPAdapter',
                          81),
                         ('HTTPAdapter.send',
                          392)],
        'first-line': 507L,
        'folded-linenos': [],
        'sel-line': 512L,
        'sel-line-start': 20618L,
        'selection_end': 20618L,
        'selection_start': 20618L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/six.py'): {'a'\
        'ttrib-starts': [('reraise',
                          686)],
        'first-line': 668L,
        'folded-linenos': [],
        'sel-line': 692L,
        'sel-line-start': 24225L,
        'selection_end': 24225L,
        'selection_start': 24225L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/tensorflow/python/framework/errors_impl.py'): {'a'\
        'ttrib-starts': [('raise_exception_on_not_ok_status',
                          505),
                         ('raise_exception_on_not_ok_status.__exit__',
                          512)],
        'first-line': 504L,
        'folded-linenos': [],
        'sel-line': 521L,
        'sel-line-start': 17930L,
        'selection_end': 17942L,
        'selection_start': 17942L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/utils/np_utils.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 15L,
        'sel-line-start': 720L,
        'selection_end': 758L,
        'selection_start': 758L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/tensorflow/python/ops/functional_ops.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/yaml/scanner.py'): {'a'\
        'ttrib-starts': [('Scanner',
                          45),
                         ('Scanner.stale_possible_simple_keys',
                          275)],
        'first-line': 278L,
        'folded-linenos': [],
        'sel-line': 288L,
        'sel-line-start': 9408L,
        'selection_end': 9408L,
        'selection_start': 9408L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepLidar_dask/lib/python3.6/site-packages/keras_retinanet/preprocessing/generator.py'): {'a'\
        'ttrib-starts': [('Generator',
                          37),
                         ('Generator.on_epoch_end',
                          81)],
        'first-line': 78L,
        'folded-linenos': [],
        'sel-line': 83L,
        'sel-line-start': 3362L,
        'selection_end': 3362L,
        'selection_start': 3362L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepLidar_dask/lib/python3.6/site-packages/keras_retinanet/utils/eval.py'): {'a'\
        'ttrib-starts': [('_get_detections',
                          56)],
        'first-line': 96L,
        'folded-linenos': [],
        'sel-line': 131L,
        'sel-line-start': 5133L,
        'selection_end': 5133L,
        'selection_start': 5133L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepLidar_dask/lib/python3.6/site-packages/keras_retinanet/utils/image.py'): {'a'\
        'ttrib-starts': [('read_image_bgr',
                          25)],
        'first-line': 7L,
        'folded-linenos': [],
        'sel-line': 31L,
        'sel-line-start': 841L,
        'selection_end': 841L,
        'selection_start': 841L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepLidar_dask/lib/python3.6/site-packages/keras_retinanet/utils/visualization.py'): {'a'\
        'ttrib-starts': [('draw_box',
                          32)],
        'first-line': 23L,
        'folded-linenos': [],
        'sel-line': 37L,
        'sel-line-start': 1059L,
        'selection_end': 1100L,
        'selection_start': 1100L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepLidar_dask/lib/python3.6/site-packages/matplotlib/artist.py'): {'a'\
        'ttrib-starts': [('Artist',
                          68),
                         ('Artist.update',
                          884),
                         ('Artist.update._update_property',
                          888)],
        'first-line': 898L,
        'folded-linenos': [],
        'sel-line': 911L,
        'sel-line-start': 29032L,
        'selection_end': 29032L,
        'selection_start': 29032L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepLidar_dask/lib/python3.6/site-packages/pandas/core/config.py'): {'a'\
        'ttrib-starts': [('_get_single_key',
                          77)],
        'first-line': 65L,
        'folded-linenos': [],
        'sel-line': 82L,
        'sel-line-start': 2959L,
        'selection_end': 2959L,
        'selection_start': 2959L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepLidar_dask/lib/python3.6/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          101),
                         ('NDFrame.groupby',
                          6591)],
        'first-line': 6645L,
        'folded-linenos': [],
        'sel-line': 6660L,
        'sel-line-start': 232705L,
        'selection_end': 232705L,
        'selection_start': 232705L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepLidar_dask/lib/python3.6/site-packages/pandas/core/ops.py'): {'a'\
        'ttrib-starts': [('_comp_method_SERIES',
                          1125),
                         ('_comp_method_SERIES.wrapper',
                          1177)],
        'first-line': 1228L,
        'folded-linenos': [],
        'sel-line': 1241L,
        'sel-line-start': 37008L,
        'selection_end': 37082L,
        'selection_start': 37082L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepLidar_dask/lib/python3.6/site-packages/pandas/core/reshape/merge.py'): {'a'\
        'ttrib-starts': [('_MergeOperation',
                          483),
                         ('_MergeOperation._validate_specification',
                          1012)],
        'first-line': 1011L,
        'folded-linenos': [],
        'sel-line': 1034L,
        'sel-line-start': 39588L,
        'selection_end': 39588L,
        'selection_start': 39588L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepLidar_dask/lib/python3.6/site-packages/pyfor/cloud.py'): {'a'\
        'ttrib-starts': [('Cloud',
                          62),
                         ('Cloud.write',
                          342)],
        'first-line': 335L,
        'folded-linenos': [],
        'sel-line': 351L,
        'sel-line-start': 15373L,
        'selection_end': 15373L,
        'selection_start': 15373L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepLidar_dask/lib/python3.6/site-packages/tornado/ioloop.py'): {'a'\
        'ttrib-starts': [('IOLoop',
                          84),
                         ('IOLoop._run_callback',
                          751)],
        'first-line': 734L,
        'folded-linenos': [],
        'sel-line': 757L,
        'sel-line-start': 28262L,
        'selection_end': 28262L,
        'selection_start': 28262L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/OpenGL/raw/GL/SGIX/igloo_interface.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 6L,
        'sel-line-start': 227L,
        'selection_end': 260L,
        'selection_start': 260L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 16L,
        'sel-line-start': 554L,
        'selection_end': 563L,
        'selection_start': 563L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          97),
                         ('NDFrame._get_axis_number',
                          345)],
        'first-line': 339L,
        'folded-linenos': [],
        'sel-line': 356L,
        'sel-line-start': 12711L,
        'selection_end': 12711L,
        'selection_start': 12711L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/indexing.py'): {'a'\
        'ttrib-starts': [('_LocIndexer',
                          1413),
                         ('_LocIndexer._has_valid_type',
                          1442)],
        'first-line': 1466L,
        'folded-linenos': [],
        'sel-line': 1476L,
        'sel-line-start': 52819L,
        'selection_end': 52888L,
        'selection_start': 52888L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/series.py'): {'a'\
        'ttrib-starts': [('Series',
                          119),
                         ('Series.apply',
                          2425)],
        'first-line': 2515L,
        'folded-linenos': [],
        'sel-line': 2537L,
        'sel-line-start': 81854L,
        'selection_end': 81854L,
        'selection_start': 81854L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pyfor_env/lib/python3.6/site-packages/plotly/offline/offline.py'): {'a'\
        'ttrib-starts': [('init_notebook_mode',
                          79)],
        'first-line': 89L,
        'folded-linenos': [],
        'sel-line': 106L,
        'sel-line-start': 3737L,
        'selection_end': 3737L,
        'selection_start': 3737L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pyfor_env/lib/python3.6/site-packages/rasterio/__init__.py'): {'a'\
        'ttrib-starts': [('NullHandler',
                          18)],
        'first-line': 5L,
        'folded-linenos': [],
        'sel-line': 18L,
        'sel-line-start': 346L,
        'selection_end': 385L,
        'selection_start': 385L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/comet_ml/connection.py'): {'a'\
        'ttrib-starts': [('WebSocketConnection',
                          373),
                         ('WebSocketConnection.wait_for_connection',
                          466)],
        'first-line': 461L,
        'folded-linenos': [],
        'sel-line': 471L,
        'sel-line-start': 15080L,
        'selection_end': 15080L,
        'selection_start': 15080L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/keras/callbacks.py'): {'a'\
        'ttrib-starts': [('CallbackList',
                          28),
                         ('CallbackList.on_epoch_end',
                          67)],
        'first-line': 53L,
        'folded-linenos': [],
        'sel-line': 76L,
        'sel-line-start': 2084L,
        'selection_end': 2084L,
        'selection_start': 2084L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/keras_retinanet/callbacks/eval.py'): {'a'\
        'ttrib-starts': [('Evaluate',
                          20),
                         ('Evaluate.on_epoch_end',
                          52)],
        'first-line': 65L,
        'folded-linenos': [],
        'sel-line': 92L,
        'sel-line-start': 4052L,
        'selection_end': 4052L,
        'selection_start': 4052L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/keras_retinanet/layers/filter_detections.py'): {'a'\
        'ttrib-starts': [('filter_detections',
                          20),
                         ('filter_detections._filter_detections',
                          50)],
        'first-line': 35L,
        'folded-linenos': [],
        'sel-line': 59L,
        'sel-line-start': 2653L,
        'selection_end': 2785L,
        'selection_start': 2772L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/keras_retinanet/models/__init__.py'): {'a'\
        'ttrib-starts': [('load_model',
                          61)],
        'first-line': 42L,
        'folded-linenos': [],
        'sel-line': 86L,
        'sel-line-start': 3554L,
        'selection_end': 3707L,
        'selection_start': 3694L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/keras_retinanet/models/retinanet.py'): {'a'\
        'ttrib-starts': [('retinanet_bbox',
                          280)],
        'first-line': 289L,
        'folded-linenos': [],
        'sel-line': 313L,
        'sel-line-start': 12326L,
        'selection_end': 12401L,
        'selection_start': 12388L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/keras_retinanet/preprocessing/generator.py'): {'a'\
        'ttrib-starts': [('Generator',
                          38),
                         ('Generator.next',
                          290)],
        'first-line': 281L,
        'folded-linenos': [],
        'sel-line': 309L,
        'sel-line-start': 12432L,
        'selection_end': 12432L,
        'selection_start': 12432L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/keras_retinanet/preprocessing/onthefly.py'): {'a'\
        'ttrib-starts': [('OnTheFlyGenerator',
                          219),
                         ('OnTheFlyGenerator.__init__',
                          225)],
        'first-line': 253L,
        'folded-linenos': [],
        'sel-line': 270L,
        'sel-line-start': 9169L,
        'selection_end': 9208L,
        'selection_start': 9208L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/keras_retinanet/utils/anchors.py'): {'a'\
        'ttrib-starts': [('anchor_targets_bbox',
                          52)],
        'first-line': 75L,
        'folded-linenos': [],
        'sel-line': 98L,
        'sel-line-start': 4432L,
        'selection_end': 4443L,
        'selection_start': 4439L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/keras_retinanet/utils/eval.py'): {'a'\
        'ttrib-starts': [('_compute_ap',
                          28)],
        'first-line': 53L,
        'folded-linenos': [],
        'sel-line': 56L,
        'sel-line-start': 1767L,
        'selection_end': 1767L,
        'selection_start': 1767L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/keras_retinanet/utils/visualization.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 25L,
        'folded-linenos': [],
        'sel-line': 31L,
        'sel-line-start': 901L,
        'selection_end': 901L,
        'selection_start': 901L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/retinanet/lib/python3.6/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          101),
                         ('NDFrame.__getattr__',
                          4361)],
        'first-line': 4361L,
        'folded-linenos': [],
        'sel-line': 4370L,
        'sel-line-start': 150069L,
        'selection_end': 150110L,
        'selection_start': 150110L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('custom',
                        [u'PYTHONPATH=""'])}
proj.pyexec = {None: ('custom',
                      u'/Users/ben/miniconda3/envs/DeepLidar_dask/bin/python')}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
search.replace-history = [u'TEAK',
                          u'/ufrc/ewhite/b.weinstein/NeonData',
                          u'DeepForest_config',
                          u'anchor_config',
                          u'batch_size']
search.search-history = [u'min_side',
                         u'min',
                         u'resize_image',
                         u'color',
                         u'load',
                         u'drape',
                         u'parse_args',
                         u'--imagenet-weights',
                         u'imagenet_weights',
                         u'--imagenet_weights',
                         u'num',
                         u'imagenet-weights',
                         u'snapshot',
                         u'no-weights',
                         u'no-weoghts',
                         u'parse',
                         u'parsse',
                         u'args',
                         u'--multi',
                         u'preprocess']
testing.stored-results = (1,
                          [],
                          {})
