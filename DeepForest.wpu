#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.breakpoints = {loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'): {312L: (0,
        None,
        1,
        0)}}
debug.err-values = {loc('evaluate.py'): {},
                    loc('predict.py'): {},
                    loc('train.py'): {},
                    loc('train_fixed.py'): {},
                    loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'): {}}
debug.recent-run-args = {loc('eval.py'): [u'--score-threshold 0.4 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_08.h5 --convert-model',
        u'--score-threshold 0.5 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_08.h5 --convert-model',
        u'--score-threshold 0.5 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_04.h5 --convert-model',
        u'--score-threshold 0.5 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_05.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_18.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly snapshots/detection.csv snapshots/resnet50_onthefly_18.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly snapshots/detection.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly snapshots/evaluation.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly data/training/detection.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.50 --save-path snapshots/images/ onthefly data/training/detection.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.25 --save-path snapshots/images/ onthefly data/training/detection.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.25 --save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.25 --save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_27.h5 --convert-model',
        u'--score-threshold 0.5 --save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_27.h5 --convert-model',
        u'--score-threshold 0.5 --save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_28.h5 --convert-model',
        u'--score-threshold 0.5 --save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_03.h5 --convert-model',
        u'--save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_03.h5 --convert-model',
        u'--save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_01.h5 --convert-model',
        u'--save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_02.h5 --convert-model',
        u'onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_01.h5 --convert-model',
        u'--save-path snapshots/images onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_01.h5 --convert-model',
        u'--save-path snapshots/images onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_01.h5 ',
        u'onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_01.h5 --save-path snapshots/images',
        u'onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_01.h5'],
                         loc('evaluate.py'): [u'--logdir=logs/20180524-065707',
        u'--logdir=20180524-065707'],
                         loc('predict.py'): [u'--logdir logs/20180524-065707',
        u'--logdir 20180524-065707',
        u'--logdir 20180521-085302']}
debug.remote-hosts = (4,
                      [{'agent-port': 0,
                        'basedir': u'',
                        'debug-port': 0,
                        'forward-x11': False,
                        'hostname': 'b.weinstein@dev1.ufhpc',
                        'id': 'Hipergator',
                        'io-encoding': None,
                        'pyexec': u'',
                        'shared': False,
                        'winghome': '/home/b.weinstein/wing/'}])
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'ZJTPJytlEesMIKzXs2TV5OeGs8'\
        'yol7dB',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.1228070175438597,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': ()}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [1,
                          4],
        'notebook_display': 'normal',
        'notebook_percent': 0.49808429118773945,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'batch_size',
                                       'fReverse': False,
                                       'fSearchText': u'show',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': 178,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'',
                                       'fReverse': False,
                                       'fSearchText': u'row.',
                                       'fStartPos': 174,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': True,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': True}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('testing',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 635L,
                       'folded-linenos': [],
                       'history': {u'file:/Users/ben/Documents/DeepForest/eval.py': [],
                                   u'file:/Users/ben/Documents/DeepForest/train.py': ['c'\
        'onfig\n',
        'args\n',
        'main(args,config,experiment)\n'],
                                   u'file:/Users/ben/Documents/keras-retinanet/keras_retinanet/preprocessing/onthefly.py': ['/'\
        'Users/ben/Documents/DeepForest/data/OSBS_006.tif\n',
        'im\n',
        'IMage\n',
        'im = Image.open(image)\n',
        'im.mode\n',
        'training_generator.image_data\n',
        'training_generator.image_data.keys\n',
        'training_generator=OnTheFlyGenerator(csv_data_file=path,group_metho'\
        'd="random",config=config,base_dir=config["rgb_tile_dir"])\n',
        'np.random.seed(2)\ntraining_generator=OnTheFlyGenerator(csv_data_fi'\
        'le=path,group_method="random",config=config,base_dir=config["rgb_ti'\
        'le_dir"])\n\n',
        'training_generator\n',
        'raining_generator.image_data.keys()\n',
        'training_generator.image_data.keys()\n',
        'image=retrieve_window(self.base_dir+row["image"], row["windows"])\n',
        'self.annotation_list    \n',
        'self.image_data.head()\n',
        'self.image_data.head\n',
        'self.image_data.\n',
        'self.image_data\n',
        'self.annotation_list.head(n=10)\n',
        'self.annotation_list.columns\n',
        'self.annotation_list.rgb_path.head(10)\n',
        'tile_annotations=self.annotations_list[self.annotations_list["rgb_p'\
        'ath"]==row["image"]]\n',
        'self.annotation_list\n',
        'tile_annotations=self.self.annotation_list[self.self.annotation_lis'\
        't["rgb_path"]==row["image"]]\n',
        'tile_annotations=self.annotation_list[self.annotation_list["rgb_pat'\
        'h"]==row["image"]]\n',
        'tile_annotations\n',
        'tile_xmin=tile_annotations\n',
        'tile_xmin=tile_annotations.tile_xmin.unique()\n',
        'tile_annotations.tile_xmin.unique()\n',
        'tile_annotations.tile_xmin.unique()[0]\n',
        'tile_xmin=tile_annotations.tile_xmin.unique()[0]\ntile_xmax=tile_an'\
        'notations.tile_xmax.unique()[0]\ntile_ymin=tile_annotations.tile_ym'\
        'ax.unique()[0]\ntile_ymax=tile_annotations.tile_ymin.unique()[0]\n'\
        '\n',
        'tile_ymac\n',
        'tile_ymax\n',
        'self.windwos\n',
        'image\n',
        'self.windows[row["window"]].indices()\n',
        'row\n',
        'self.windows[row["windows"]].indices()\n',
        'self.windows[row["windows"]].getRect()\n',
        'x,y,w,h= self.windows[row["windows"]].getRect()\n',
        'tile_annotations=self.annotation_list[self.annotation_list["rgb_pat'\
        'h"]==row["image"]]\n\n#Set tile extent, remember to flip y axis fro'\
        'm R -> Python\ntile_xmin=tile_annotations.tile_xmin.unique()[0]\nti'\
        'le_xmax=tile_annotations.tile_xmax.unique()[0]\ntile_ymin=tile_anno'\
        'tations.tile_ymax.unique()[0]\ntile_ymax=tile_annotations.tile_ymin'\
        '.unique()[0]\n\n',
        'tile_xmin\n',
        'tile_xmin-x\n',
        'x\n',
        'x/0.01\n',
        'x*0.01\n',
        'x*0.1\n',
        'self.rgb_res\n',
        'x * self.rgb_res\n',
        'x * self.rgb_res + tile_xmin\n',
        'window_xmin=x * self.rgb_res + tile_xmin\nwindow_xmax=(x+w) * self.'\
        'rgb_res + tile_xmin\nwindow_ymin=y * self.rgb_res + tile_ymin\nwind'\
        'ow_ymax=(y+h) * self.rgb_res + tile_xmin\n\n',
        'window_xmin=x * self.rgb_res + tile_xmin\nwindow_xmax=(x+w) * self.'\
        'rgb_res + tile_xmin\nwindow_ymin=y * self.rgb_res + tile_ymin\nwind'\
        'ow_ymax=(y+h) * self.rgb_res + tile_ymin\n\n',
        'window_ymax\n',
        'window_ymin\n',
        'window_xmin\n',
        'window_xmax\n',
        "def createPolygon(xmin,xmax,ymin,ymax):\n    '''\n    Convert a pan"\
        "das row into a polygon bounding box\n    ''' \n    \n    p1 = geome"\
        "try.Point(xmin,ymin)\n    p2 = geometry.Point(xmin,ymax)\n    p3 = "\
        "geometry.Point(xmax,ymin)\n    p4 = geometry.Point(xmax,ymax)\n    "\
        "\n    pointList = [p1, p2, p3, p4, p1]\n    \n    poly = geometry.P"\
        "olygon([[p.x, p.y] for p in pointList])\n    \n    return poly\n\n"\
        "\ndef get_window_extent(annotations,row,windows):\n    '''\n    Get"\
        " the geographic coordinates of the sliding window.\n    '''\n    #S"\
        "elect tile from annotations to get extent\n    tile_annotations=ann"\
        "otations[annotations[\"rgb_path\"]==row[\"image\"]]\n    \n    #Set"\
        " tile extent, remember to flip y axis from R -> Python\n    tile_xm"\
        "in=tile_annotations.tile_xmin.unique()[0]\n    tile_xmax=tile_annot"\
        "ations.tile_xmax.unique()[0]\n    tile_ymin=tile_annotations.tile_y"\
        "max.unique()[0]\n    tile_ymax=tile_annotations.tile_ymin.unique()["\
        "0]\n    \n    #Get window cartesian coordinates\n    x,y,w,h= windo"\
        "ws[row[\"windows\"]].getRect()\n    \n    window_xmin=x * self.rgb_"\
        "res + tile_xmin\n    window_xmax=(x+w) * self.rgb_res + tile_xmin\n"\
        "    window_ymin=(y+h) * self.rgb_res + tile_ymin\n    window_ymax=y"\
        " * self.rgb_res + tile_ymin\n    \n    return(window_xmin,window_xm"\
        "ax,window_ymin,window_ymax)\n\n#Find geographic coordinates of the "\
        "rgb tile \nxmin,xmax,ymin,ymax=get_window_extent(annotations=self.a"\
        "nnotations_list, row=row, windows=self.windows)\n\n\n",
        'self.annotation_listxmin,xmax,ymin,ymax=get_window_extent(annotatio'\
        'ns=self.annotation_list, row=row, windows=self.windows)\n',
        'self.windows\n',
        'xmin,xmax,ymin,ymax=get_window_extent(annotations=self.annotation_l'\
        'ist, row=row, windows=self.windows)\n',
        "def createPolygon(xmin,xmax,ymin,ymax):\n    '''\n    Convert a pan"\
        "das row into a polygon bounding box\n    ''' \n    \n    p1 = geome"\
        "try.Point(xmin,ymin)\n    p2 = geometry.Point(xmin,ymax)\n    p3 = "\
        "geometry.Point(xmax,ymin)\n    p4 = geometry.Point(xmax,ymax)\n    "\
        "\n    pointList = [p1, p2, p3, p4, p1]\n    \n    poly = geometry.P"\
        "olygon([[p.x, p.y] for p in pointList])\n    \n    return poly\n\n"\
        "\ndef get_window_extent(annotations,row,windows,rgb_res):\n    '''"\
        "\n    Get the geographic coordinates of the sliding window.\n    ''"\
        "'\n    #Select tile from annotations to get extent\n    tile_annota"\
        "tions=annotations[annotations[\"rgb_path\"]==row[\"image\"]]\n    "\
        "\n    #Set tile extent, remember to flip y axis from R -> Python\n"\
        "    tile_xmin=tile_annotations.tile_xmin.unique()[0]\n    tile_xmax"\
        "=tile_annotations.tile_xmax.unique()[0]\n    tile_ymin=tile_annotat"\
        "ions.tile_ymax.unique()[0]\n    tile_ymax=tile_annotations.tile_ymi"\
        "n.unique()[0]\n    \n    #Get window cartesian coordinates\n    x,y"\
        ",w,h= windows[row[\"windows\"]].getRect()\n    \n    window_xmin=x "\
        "* rgb_res + tile_xmin\n    window_xmax=(x+w) * self.rgb_res + tile_"\
        "xmin\n    window_ymin=(y+h) * self.rgb_res + tile_ymin\n    window_"\
        "ymax=y * rgb_res + tile_ymin\n    \n    return(window_xmin,window_x"\
        "max,window_ymin,window_ymax)\n\n#Find geographic coordinates of the"\
        " rgb tile \nxmin,xmax,ymin,ymax=get_window_extent(annotations=self."\
        "annotation_list, row=row, windows=self.windows,rgb_res=self.rgb_res"\
        ")\n\n\n",
        "def get_window_extent(annotations,row,windows,rgb_res):\n    '''\n"\
        "    Get the geographic coordinates of the sliding window.\n    '''"\
        "\n    #Select tile from annotations to get extent\n    tile_annotat"\
        "ions=annotations[annotations[\"rgb_path\"]==row[\"image\"]]\n    \n"\
        "    #Set tile extent, remember to flip y axis from R -> Python\n   "\
        " tile_xmin=tile_annotations.tile_xmin.unique()[0]\n    tile_xmax=ti"\
        "le_annotations.tile_xmax.unique()[0]\n    tile_ymin=tile_annotation"\
        "s.tile_ymax.unique()[0]\n    tile_ymax=tile_annotations.tile_ymin.u"\
        "nique()[0]\n    \n    #Get window cartesian coordinates\n    x,y,w,"\
        "h= windows[row[\"windows\"]].getRect()\n    \n    window_xmin=x * r"\
        "gb_res + tile_xmin\n    window_xmax=(x+w) * rgb_res + tile_xmin\n  "\
        "  window_ymin=(y+h) * rgb_res + tile_ymin\n    window_ymax=y * rgb_"\
        "res + tile_ymin\n    \n    return(window_xmin,window_xmax,window_ym"\
        "in,window_ymax)\n\n",
        'xmin,xmax,ymin,ymax=get_window_extent(annotations=self.annotation_l'\
        'ist, row=row, windows=self.windows,rgb_res=self.rgb_res)\n',
        'xmin\n',
        'xmax\n',
        'ymin\n',
        'ymax\n']},
                       'launch-id': None,
                       'sel-line': 644L,
                       'sel-line-start': 106630L,
                       'selection_end': 106634L,
                       'selection_start': 106634L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 56L,
                       'folded-linenos': [],
                       'history': {None: ['for i in range(2): print(i)\n',
        'import h5py as h5\nimport numpy as np\nimport pyfor\n\n',
        'import shapely\n',
        'import h5py as h5\nimport numpy as np\nimport pyfor\nimport open3d'\
        '\nfrom scipy.stats import gaussian_kde\nfrom scipy.spatial import d'\
        'istance\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom'\
        ' shapely import geometry\n\n',
        'import pyfor\n',
        'def loadLidar(path):\n    pc = pyfor.cloud.Cloud(path)\n    pc.norm'\
        'alize(0.5)\n    return(pc)\n\n',
        'loadLidar("../data/OSBS_006.laz")\n',
        'loadLidar("/Users/ben/Documents/DeepForest/data/OSBS_006.laz")\n',
        'pc=loadLidar("/Users/ben/Documents/DeepForest/data/OSBS_006.laz")\n',
        'pc.grid\n',
        'pc.grid()\n',
        'pc\n',
        'pc_grid=pc.grid(10)\n',
        'pc_grid\n',
        'pc_grid.data\n',
        'pc_grid.raster\n',
        'pc.crs()\n',
        'pc.las.header()\n',
        'pc.las.header\n',
        'window_xmin=407690.2\nwindow_xmax=407715.2\nwindow_ymin=3292452.190'\
        '0000004\nwindow_ymax=3292477.1900000004\n\n',
        'def createPolygon(xmin,xmax,ymin,ymax):\n\n',
        'poly=createPolygon(window_xmin, window_xmax, window_ymin, window_ym'\
        'ax)\n',
        'pc=pyfor.cloud.Cloud("/Users/ben/Documents/DeepForest/data/OSBS_006'\
        '.laz")\n',
        'clipped=cloud.clip(poly)\n',
        "clipped.plot(cmap='viridis', block=True)\n",
        'clipped.values\n',
        'clipped.las\n',
        'pc.las.pointsw\n',
        'pc=pyfor.cloud.Cloud("/Users/ben/Documents/DeepForest/data/NEON_D03'\
        '_OSBS_DP1_407000_3291000_classified_point_cloud.laz")\n',
        "clipped.plot(cmap='viridis', return_plot=False, block=False)\n",
        'pc.crs\n',
        'pc.las.points.head(n=10)\n',
        'clipped.las.points.x.min\n',
        'clipped.las.points.x.min()\n',
        'pc.las[pc.las.isnull().any(axis=1)]\n',
        'pc.las\n',
        'pc.las.points\n',
        'pc.las.points[pc.las.pointsisnull().any(axis=1)]\n',
        'pc.las.points[pc.las.points.isnull().any(axis=1)]\n',
        'pc.las.points.x\n',
        'pc.las.points.x=="NaN"\n',
        'pc.las.points.iloc[1:10]\n',
        'pc.las.points.iloc[500:1000]\n',
        'cloud.filter(min = -5, max = 200, dim = "z")\n',
        'pc.filter(min = -5, max = 200, dim = "z")\n',
        'pc.plot\n',
        'import pyfor\nfrom shapely import geometry\n\n',
        "def createPolygon(xmin,xmax,ymin,ymax):\n    '''\n    Convert a pan"\
        "das row into a polygon bounding box\n    ''' \n    \n    p1 = geome"\
        "try.Point(xmin,ymin)\n    p2 = geometry.Point(xmin,ymax)\n    p3 = "\
        "geometry.Point(xmax,ymin)\n    p4 = geometry.Point(xmax,ymax)\n    "\
        "\n    pointList = [p1, p2, p3, p4, p1]\n    \n    poly = geometry.P"\
        "olygon([[p.x, p.y] for p in pointList])\n    \n    return poly\n\n",
        '#TEMP\nwindow_xmin=407071.4\nwindow_xmax=407096.4\nwindow_ymin=3292'\
        '691.39\nwindow_ymax=3292666.39\n\n#Create shapely polygon\npoly=cre'\
        'atePolygon(window_xmin, window_xmax, window_ymin, window_ymax)\n\n'\
        '#Read lidar tile\npc=pyfor.cloud.Cloud("/Users/ben/Documents/DeepFo'\
        'rest/data/NEON_D03_OSBS_DP1_407000_3291000_classified_point_cloud.l'\
        'az")\n\npc.filter(min = -5, max = 100, dim = "z")\n\n',
        'clipped=pc.clip(poly)\n',
        'clipped\n',
        'clipped.plot\n',
        'clipped.plot()\n',
        'clipped.las.points\n',
        'poly\n',
        "pc.plot(cmap='viridis', return_plot=False, block=False)\n"]},
                       'launch-id': None,
                       'sel-line': 75L,
                       'sel-line-start': 2983L,
                       'selection_end': 2983L,
                       'selection_start': 2983L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('lidar_crop.py'),
        {'attrib-starts': [('createPolygon',
                            6)],
         'first-line': 1L,
         'folded-linenos': [],
         'sel-line': 6L,
         'sel-line-start': 35L,
         'selection_end': 35L,
         'selection_start': 35L,
         'zoom': 0L},
        1531244640.078529],
        [loc('lidar_crop.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 5L,
          'sel-line-start': 34L,
          'selection_end': 34L,
          'selection_start': 34L,
          'zoom': 0L},
         1531244677.204378],
        [loc('DeepForest/Lidar.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 12L,
          'sel-line-start': 230L,
          'selection_end': 259L,
          'selection_start': 230L,
          'zoom': 0L},
         1531244681.521353],
        [loc('lidar_crop.py'),
         {'attrib-starts': [],
          'first-line': 41L,
          'folded-linenos': [],
          'sel-line': 56L,
          'sel-line-start': 1679L,
          'selection_end': 1699L,
          'selection_start': 1699L,
          'zoom': 0L},
         1531245024.742213],
        [loc('DeepForest/Lidar.py'),
         {'attrib-starts': [('preprocess',
                             14)],
          'first-line': 30L,
          'folded-linenos': [],
          'sel-line': 40L,
          'sel-line-start': 966L,
          'selection_end': 1002L,
          'selection_start': 971L,
          'zoom': 0L},
         1531245045.795501],
        [loc('lidar_crop.py'),
         {'attrib-starts': [],
          'first-line': 48L,
          'folded-linenos': [24L],
          'sel-line': 64L,
          'sel-line-start': 1818L,
          'selection_end': 1840L,
          'selection_start': 1818L,
          'zoom': 0L},
         1531245279.582056],
        [loc('../../miniconda3/envs/pyfor_env/lib/python3.6/site-packages/pyfor/rasterizer.py'),
         {'attrib-starts': [('Grid',
                             10),
                            ('Grid.__init__',
                             19)],
          'first-line': 18L,
          'folded-linenos': [],
          'sel-line': 28L,
          'sel-line-start': 1114L,
          'selection_end': 1114L,
          'selection_start': 1114L,
          'zoom': 0L},
         1531245308.786643],
        [loc('lidar_crop.py'),
         {'attrib-starts': [],
          'first-line': 51L,
          'folded-linenos': [24L],
          'sel-line': 64L,
          'sel-line-start': 1865L,
          'selection_end': 1887L,
          'selection_start': 1865L,
          'zoom': 0L},
         1531245421.339168],
        [loc('../../miniconda3/envs/pyfor_env/lib/python3.6/site-packages/pyfor/rasterizer.py'),
         {'attrib-starts': [('Grid',
                             10),
                            ('Grid.__init__',
                             19)],
          'first-line': 18L,
          'folded-linenos': [],
          'sel-line': 28L,
          'sel-line-start': 1114L,
          'selection_end': 1114L,
          'selection_start': 1114L,
          'zoom': 0L},
         1531245427.855737],
        [loc('lidar_crop.py'),
         {'attrib-starts': [],
          'first-line': 51L,
          'folded-linenos': [24L],
          'sel-line': 66L,
          'sel-line-start': 1888L,
          'selection_end': 1938L,
          'selection_start': 1888L,
          'zoom': 0L},
         1531245713.127037],
        [loc('../../miniconda3/envs/pyfor_env/lib/python3.6/site-packages/pandas/core/ops.py'),
         {'attrib-starts': [('_comp_method_SERIES',
                             1125),
                            ('_comp_method_SERIES.na_op',
                             1133)],
          'first-line': 1151L,
          'folded-linenos': [],
          'sel-line': 1168L,
          'sel-line-start': 33858L,
          'selection_end': 33858L,
          'selection_start': 33858L,
          'zoom': 0L},
         1531245721.523036],
        [loc('lidar_crop.py'),
         {'attrib-starts': [],
          'first-line': 51L,
          'folded-linenos': [24L],
          'sel-line': 63L,
          'sel-line-start': 1838L,
          'selection_end': 1842L,
          'selection_start': 1842L,
          'zoom': 0L},
         1531245814.092647],
        [loc('DeepForest/Lidar.py'),
         {'attrib-starts': [('preprocess',
                             14)],
          'first-line': 14L,
          'folded-linenos': [],
          'sel-line': 29L,
          'sel-line-start': 722L,
          'selection_end': 770L,
          'selection_start': 722L,
          'zoom': 0L},
         1531245819.954756],
        [loc('lidar_crop.py'),
         {'attrib-starts': [],
          'first-line': 51L,
          'folded-linenos': [24L],
          'sel-line': 64L,
          'sel-line-start': 1839L,
          'selection_end': 1881L,
          'selection_start': 1839L,
          'zoom': 0L},
         1531245837.081616],
        [loc('DeepForest/Lidar.py'),
         {'attrib-starts': [('preprocess',
                             14)],
          'first-line': 14L,
          'folded-linenos': [],
          'sel-line': 29L,
          'sel-line-start': 722L,
          'selection_end': 770L,
          'selection_start': 722L,
          'zoom': 0L},
         1531245841.560332],
        [loc('lidar_crop.py'),
         {'attrib-starts': [('get_window_extent',
                             24)],
          'first-line': 41L,
          'folded-linenos': [],
          'sel-line': 46L,
          'sel-line-start': 1339L,
          'selection_end': 1339L,
          'selection_start': 1339L,
          'zoom': 0L},
         1531246107.036518],
        [loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'),
         {'attrib-starts': [('OnTheFlyGenerator',
                             195),
                            ('OnTheFlyGenerator.load_image',
                             294)],
          'first-line': 304L,
          'folded-linenos': [149L,
                             251L,
                             267L,
                             272L,
                             277L,
                             282L,
                             287L],
          'sel-line': 311L,
          'sel-line-start': 9958L,
          'selection_end': 9958L,
          'selection_start': 9958L,
          'zoom': 0L},
         1531246212.147761],
        [loc('lidar_crop.py'),
         {'attrib-starts': [],
          'first-line': 51L,
          'folded-linenos': [],
          'sel-line': 65L,
          'sel-line-start': 1899L,
          'selection_end': 1921L,
          'selection_start': 1899L,
          'zoom': 0L},
         1531246464.936461],
        [loc('../../miniconda3/envs/pyfor_env/lib/python3.6/site-packages/pyfor/rasterizer.py'),
         {'attrib-starts': [('Grid',
                             10),
                            ('Grid.__init__',
                             19)],
          'first-line': 11L,
          'folded-linenos': [],
          'sel-line': 28L,
          'sel-line-start': 1114L,
          'selection_end': 1114L,
          'selection_start': 1114L,
          'zoom': 0L},
         1531246471.524614],
        [loc('lidar_crop.py'),
         {'attrib-starts': [('get_window_extent',
                             24)],
          'first-line': 34L,
          'folded-linenos': [],
          'sel-line': 38L,
          'sel-line-start': 1042L,
          'selection_end': 1087L,
          'selection_start': 1087L,
          'zoom': 0L},
         1531246763.306016]],
        20),
        'current-loc': loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'),
        'editor-state-list': [(loc('eval.py'),
                               {'attrib-starts': [('create_generator',
        44)],
                                'first-line': 52L,
                                'folded-linenos': [],
                                'sel-line': 71L,
                                'sel-line-start': 2514L,
                                'selection_end': 2556L,
                                'selection_start': 2556L,
                                'zoom': 0L}),
                              (loc('DeepForest/Lidar.py'),
                               {'attrib-starts': [('preprocess',
        14)],
                                'first-line': 14L,
                                'folded-linenos': [],
                                'sel-line': 29L,
                                'sel-line-start': 722L,
                                'selection_end': 770L,
                                'selection_start': 722L,
                                'zoom': 0L}),
                              (loc('lidar_crop.py'),
                               {'attrib-starts': [('get_window_extent',
        24)],
                                'first-line': 34L,
                                'folded-linenos': [],
                                'sel-line': 38L,
                                'sel-line-start': 1042L,
                                'selection_end': 1087L,
                                'selection_start': 1087L,
                                'zoom': 0L}),
                              (loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'),
                               {'attrib-starts': [('OnTheFlyGenerator',
        195),
        ('OnTheFlyGenerator.load_image',
         294)],
                                'first-line': 304L,
                                'folded-linenos': [149L,
        251L,
        267L,
        272L,
        277L,
        282L,
        287L],
                                'sel-line': 311L,
                                'sel-line-start': 9958L,
                                'selection_end': 9958L,
                                'selection_start': 9958L,
                                'zoom': 0L}),
                              (loc('../../miniconda3/envs/pyfor_env/lib/python3.6/site-packages/pyfor/rasterizer.py'),
                               {'attrib-starts': [('Grid',
        10),
        ('Grid.__init__',
         19)],
                                'first-line': 11L,
                                'folded-linenos': [],
                                'sel-line': 28L,
                                'sel-line-start': 1114L,
                                'selection_end': 1114L,
                                'selection_start': 1114L,
                                'zoom': 0L}),
                              (loc('DeepForest/RGB.py'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 0L,
                                'sel-line-start': 0L,
                                'selection_end': 0L,
                                'selection_start': 0L,
                                'zoom': 0L}),
                              (loc('DeepForest/sliding_window.py'),
                               {'attrib-starts': [('compute_windows',
        7)],
                                'first-line': 4L,
                                'folded-linenos': [],
                                'sel-line': 9L,
                                'sel-line-start': 282L,
                                'selection_end': 285L,
                                'selection_start': 285L,
                                'zoom': 0L}),
                              (loc('train.py'),
                               {'attrib-starts': [],
                                'first-line': 451L,
                                'folded-linenos': [67L,
        75L,
        270L],
                                'sel-line': 461L,
                                'sel-line-start': 18722L,
                                'selection_end': 18786L,
                                'selection_start': 18722L,
                                'zoom': 0L}),
                              (loc('../keras-retinanet/keras_retinanet/utils/eval.py'),
                               {'attrib-starts': [('_get_detections',
        56)],
                                'first-line': 95L,
                                'folded-linenos': [],
                                'sel-line': 100L,
                                'sel-line-start': 3706L,
                                'selection_end': 3720L,
                                'selection_start': 3720L,
                                'zoom': 0L}),
                              (loc('_config.yml'),
                               {'attrib-starts': [],
                                'first-line': 9L,
                                'folded-linenos': [],
                                'sel-line': 22L,
                                'sel-line-start': 591L,
                                'selection_end': 606L,
                                'selection_start': 606L,
                                'zoom': 0L}),
                              (loc('_config_debug.yml'),
                               {'attrib-starts': [],
                                'first-line': 13L,
                                'folded-linenos': [],
                                'sel-line': 29L,
                                'sel-line-start': 658L,
                                'selection_end': 681L,
                                'selection_start': 681L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('eval.py'),
         loc('DeepForest/Lidar.py'),
         loc('lidar_crop.py'),
         loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'),
         loc('../../miniconda3/envs/pyfor_env/lib/python3.6/site-packages/pyfor/rasterizer.py'),
         loc('DeepForest/RGB.py'),
         loc('DeepForest/sliding_window.py'),
         loc('train.py'),
         loc('../keras-retinanet/keras_retinanet/utils/eval.py'),
         loc('_config.yml'),
         loc('_config_debug.yml')]),
                               'open_files': [u'_config_debug.yml',
        u'_config.yml',
        u'DeepForest/RGB.py',
        u'train.py',
        u'DeepForest/sliding_window.py',
        u'../keras-retinanet/keras_retinanet/utils/eval.py',
        u'eval.py',
        u'DeepForest/Lidar.py',
        u'lidar_crop.py',
        u'../keras-retinanet/keras_retinanet/preprocessing/onthefly.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.27419354838709675},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         23,
                         1428,
                         877)}]}
guimgr.recent-documents = [loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'),
                           loc('lidar_crop.py'),
                           loc('../../miniconda3/envs/pyfor_env/lib/python3.6/site-packages/pyfor/rasterizer.py'),
                           loc('DeepForest/Lidar.py'),
                           loc('eval.py'),
                           loc('../keras-retinanet/keras_retinanet/utils/eval.py'),
                           loc('DeepForest/sliding_window.py'),
                           loc('train.py'),
                           loc('DeepForest/RGB.py'),
                           loc('_config.yml'),
                           loc('_config_debug.yml')]
guimgr.visual-state = {loc('DeepForest/CropGenerator.py'): {'attrib-starts': [('d'\
        'ata2geojson',
        113)],
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 114L,
        'sel-line-start': 3378L,
        'selection_end': 3385L,
        'selection_start': 3385L,
        'zoom': 0L},
                       loc('DeepForest/Lidar.py'): {'attrib-starts': [('Lida'\
        'r',
        2),
        ('Lidar.plot',
         6)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 8L,
        'sel-line-start': 169L,
        'selection_end': 177L,
        'selection_start': 177L,
        'zoom': 0L},
                       loc('DeepForest/README.md'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/RGB.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/config.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 14L,
        'sel-line-start': 494L,
        'selection_end': 494L,
        'selection_start': 494L,
        'zoom': 0L},
                       loc('DeepForest/dask_utils.py'): {'attrib-starts': [('s'\
        'tart_dask',
        4)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 126L,
        'selection_end': 130L,
        'selection_start': 130L,
        'zoom': 0L},
                       loc('DeepForest/pointcloud.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/preprocess.py'): {'attrib-starts': [('N'\
        'DVI',
        37)],
        'first-line': 13L,
        'folded-linenos': [],
        'sel-line': 60L,
        'sel-line-start': 1530L,
        'selection_end': 1530L,
        'selection_start': 1530L,
        'zoom': 0L},
                       loc('DeepForest/sliding_window.py'): {'attrib-starts': [('l'\
        'oad',
        14)],
        'first-line': 18L,
        'folded-linenos': [],
        'sel-line': 34L,
        'sel-line-start': 1051L,
        'selection_end': 1059L,
        'selection_start': 1059L,
        'zoom': 0L},
                       loc('DeepForest/tools.py'): {'attrib-starts': [],
        'first-line': 14L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 712L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/untitled-2.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('HPC/submit_cpu_job.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 13L,
        'sel-line-start': 646L,
        'selection_end': 652L,
        'selection_start': 652L,
        'zoom': 0L},
                       loc('HPC/submit_eval.sh'): {'attrib-starts': [],
        'first-line': 10L,
        'folded-linenos': [],
        'sel-line': 19L,
        'sel-line-start': 729L,
        'selection_end': 767L,
        'selection_start': 767L,
        'zoom': 0L},
                       loc('HPC/submit_job.sh'): {'attrib-starts': [],
        'first-line': 16L,
        'folded-linenos': [],
        'sel-line': 15L,
        'sel-line-start': 687L,
        'selection_end': 747L,
        'selection_start': 747L,
        'zoom': 0L},
                       loc('README.md'): {'attrib-starts': [],
        'first-line': 26L,
        'folded-linenos': [],
        'sel-line': 42L,
        'sel-line-start': 1588L,
        'selection_end': 1588L,
        'selection_start': 1588L,
        'zoom': 0L},
                       loc('RGB.py'): {'attrib-starts': [],
                                       'first-line': 0L,
                                       'folded-linenos': [],
                                       'sel-line': 0L,
                                       'sel-line-start': 0L,
                                       'selection_end': 0L,
                                       'selection_start': 0L,
                                       'zoom': 0L},
                       loc('_config.yml'): {'attrib-starts': [],
        'first-line': 22L,
        'folded-linenos': [],
        'sel-line': 36L,
        'sel-line-start': 963L,
        'selection_end': 963L,
        'selection_start': 963L,
        'zoom': 0L},
                       loc('_config_debug.yml'): {'attrib-starts': [],
        'first-line': 14L,
        'folded-linenos': [],
        'sel-line': 29L,
        'sel-line-start': 658L,
        'selection_end': 681L,
        'selection_start': 681L,
        'zoom': 0L},
                       loc('config.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('debug.py'): {'attrib-starts': [('parse_args',
        117)],
        'first-line': 178L,
        'folded-linenos': [],
        'sel-line': 161L,
        'sel-line-start': 7130L,
        'selection_end': 7154L,
        'selection_start': 7154L,
        'zoom': 0L},
                       loc('environment.yml'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('eval.py'): {'attrib-starts': [],
        'first-line': 9L,
        'folded-linenos': [],
        'sel-line': 14L,
        'sel-line-start': 596L,
        'selection_end': 596L,
        'selection_start': 596L,
        'zoom': 0L},
                       loc('install_dependencies.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 251L,
        'selection_end': 251L,
        'selection_start': 251L,
        'zoom': 0L},
                       loc('models/inception.py'): {'attrib-starts': [('get_'\
        'model',
        4)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 197L,
        'selection_end': 245L,
        'selection_start': 245L,
        'zoom': 0L},
                       loc('models/rgb.py'): {'attrib-starts': [('get_model',
        6)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 8L,
        'sel-line-start': 141L,
        'selection_end': 221L,
        'selection_start': 221L,
        'zoom': 0L},
                       loc('predict.py'): {'attrib-starts': [('view_predicti'\
        'ons',
        38)],
        'first-line': 28L,
        'folded-linenos': [],
        'sel-line': 41L,
        'sel-line-start': 1071L,
        'selection_end': 1075L,
        'selection_start': 1075L,
        'zoom': 0L},
                       loc('tests/__init__.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_Lidar.py'): {'attrib-starts': [('test'\
        '_Lidar',
        2)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 207L,
        'selection_end': 207L,
        'selection_start': 207L,
        'zoom': 0L},
                       loc('train.py'): {'attrib-starts': [('create_generato'\
        'rs',
        203)],
        'first-line': 446L,
        'folded-linenos': [67L,
                           75L,
                           270L],
        'sel-line': 237L,
        'sel-line-start': 8541L,
        'selection_end': 8584L,
        'selection_start': 8584L,
        'zoom': 0L},
                       loc('train_retinanet.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepMeerkat/training/Classification/GenerateBoxes_new.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/_config_debug.yml'): {'a'\
        'ttrib-starts': [],
        'first-line': 1L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 246L,
        'selection_end': 246L,
        'selection_start': 246L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/config.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 14L,
        'sel-line-start': 494L,
        'selection_end': 494L,
        'selection_start': 494L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/eval_test.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 26L,
        'folded-linenos': [],
        'sel-line': 31L,
        'sel-line-start': 1064L,
        'selection_end': 1064L,
        'selection_start': 1064L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/evaluate.py'): {'a'\
        'ttrib-starts': [('main',
                          114)],
        'first-line': 137L,
        'folded-linenos': [],
        'sel-line': 151L,
        'sel-line-start': 5982L,
        'selection_end': 5999L,
        'selection_start': 5999L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/train.py'): {'a'\
        'ttrib-starts': [('parse_args',
                          368)],
        'first-line': 244L,
        'folded-linenos': [],
        'sel-line': 416L,
        'sel-line-start': 16696L,
        'selection_end': 16766L,
        'selection_start': 16766L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/callbacks/eval.py'): {'a'\
        'ttrib-starts': [('Evaluate',
                          20),
                         ('Evaluate.on_epoch_end',
                          48)],
        'first-line': 62L,
        'folded-linenos': [],
        'sel-line': 67L,
        'sel-line-start': 2728L,
        'selection_end': 2749L,
        'selection_start': 2744L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/preprocessing/generator.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 27L,
        'folded-linenos': [],
        'sel-line': 33L,
        'sel-line-start': 884L,
        'selection_end': 904L,
        'selection_start': 888L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 350L,
        'folded-linenos': [],
        'sel-line': 369L,
        'sel-line-start': 11880L,
        'selection_end': 11880L,
        'selection_start': 11880L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/colors.py'): {'a'\
        'ttrib-starts': [('label_color',
                          3)],
        'first-line': 91L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 436L,
        'selection_end': 484L,
        'selection_start': 484L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/compute_overlap.pyx'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/eval.py'): {'a'\
        'ttrib-starts': [('_get_detections',
                          56)],
        'first-line': 92L,
        'folded-linenos': [],
        'sel-line': 99L,
        'sel-line-start': 3681L,
        'selection_end': 3705L,
        'selection_start': 3705L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/image.py'): {'a'\
        'ttrib-starts': [('read_image_bgr',
                          25)],
        'first-line': 107L,
        'folded-linenos': [],
        'sel-line': 33L,
        'sel-line-start': 933L,
        'selection_end': 933L,
        'selection_start': 933L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/visualization.py'): {'a'\
        'ttrib-starts': [('draw_caption',
                          35)],
        'first-line': 28L,
        'folded-linenos': [],
        'sel-line': 45L,
        'sel-line-start': 1493L,
        'selection_end': 1588L,
        'selection_start': 1588L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/cloud.py'): {'attrib-starts': [('C'\
        'loud',
        41),
        ('Cloud.filter_z',
         152)],
        'first-line': 148L,
        'folded-linenos': [],
        'sel-line': 162L,
        'sel-line-start': 5941L,
        'selection_end': 5991L,
        'selection_start': 5991L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/metrics2.py'): {'attrib-starts': [('m'\
        'ode',
        12)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 477L,
        'selection_end': 480L,
        'selection_start': 480L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/pointcloud2.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/rasterizer.py'): {'attrib-starts': [('G'\
        'rid',
        7),
        ('Grid.__init__',
         14)],
        'first-line': 4L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 827L,
        'selection_end': 838L,
        'selection_start': 838L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/test.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 13L,
        'sel-line-start': 250L,
        'selection_end': 286L,
        'selection_start': 286L,
        'zoom': 0L},
                       loc('../train.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../Downloads/Miniconda3-latest-MacOSX-x86_64.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/comet_ml/keras_logger.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 55L,
        'folded-linenos': [],
        'sel-line': 67L,
        'sel-line-start': 2236L,
        'selection_end': 2236L,
        'selection_start': 2236L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/bin/debug.py'): {'a'\
        'ttrib-starts': [('run',
                          157)],
        'first-line': 86L,
        'folded-linenos': [],
        'sel-line': 198L,
        'sel-line-start': 8432L,
        'selection_end': 8432L,
        'selection_start': 8432L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/callbacks/eval.py'): {'a'\
        'ttrib-starts': [('Evaluate',
                          20),
                         ('Evaluate.on_epoch_end',
                          48)],
        'first-line': 42L,
        'folded-linenos': [],
        'sel-line': 51L,
        'sel-line-start': 2162L,
        'selection_end': 2186L,
        'selection_start': 2186L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/preprocessing/generator.py'): {'a'\
        'ttrib-starts': [('Generator',
                          39),
                         ('Generator.load_annotations_group',
                          121)],
        'first-line': 119L,
        'folded-linenos': [],
        'sel-line': 124L,
        'sel-line-start': 4607L,
        'selection_end': 4607L,
        'selection_start': 4607L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/preprocessing/onthefly.py'): {'a'\
        'ttrib-starts': [('OnTheFlyGenerator',
                          220),
                         ('OnTheFlyGenerator.__init__',
                          226)],
        'first-line': 251L,
        'folded-linenos': [],
        'sel-line': 266L,
        'sel-line-start': 8361L,
        'selection_end': 8361L,
        'selection_start': 8361L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/utils/eval.py'): {'a'\
        'ttrib-starts': [('_get_detections',
                          56)],
        'first-line': 100L,
        'folded-linenos': [],
        'sel-line': 103L,
        'sel-line-start': 4001L,
        'selection_end': 4014L,
        'selection_start': 4014L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/utils/visualization.py'): {'a'\
        'ttrib-starts': [('draw_caption',
                          35)],
        'first-line': 32L,
        'folded-linenos': [],
        'sel-line': 44L,
        'sel-line-start': 1400L,
        'selection_end': 1490L,
        'selection_start': 1490L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          100),
                         ('NDFrame.__nonzero__',
                          1569)],
        'first-line': 1567L,
        'folded-linenos': [],
        'sel-line': 1572L,
        'sel-line-start': 51097L,
        'selection_end': 51097L,
        'selection_start': 51097L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/rasterio/__init__.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/requests/adapters.py'): {'a'\
        'ttrib-starts': [('HTTPAdapter',
                          80),
                         ('HTTPAdapter.send',
                          387)],
        'first-line': 502L,
        'folded-linenos': [],
        'sel-line': 520L,
        'sel-line-start': 20691L,
        'selection_end': 20691L,
        'selection_start': 20691L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/utils/np_utils.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 15L,
        'sel-line-start': 720L,
        'selection_end': 758L,
        'selection_start': 758L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/tensorflow/python/ops/functional_ops.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 16L,
        'sel-line-start': 554L,
        'selection_end': 563L,
        'selection_start': 563L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          97),
                         ('NDFrame._get_axis_number',
                          345)],
        'first-line': 339L,
        'folded-linenos': [],
        'sel-line': 356L,
        'sel-line-start': 12711L,
        'selection_end': 12711L,
        'selection_start': 12711L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/indexing.py'): {'a'\
        'ttrib-starts': [('_LocIndexer',
                          1413),
                         ('_LocIndexer._has_valid_type',
                          1442)],
        'first-line': 1466L,
        'folded-linenos': [],
        'sel-line': 1476L,
        'sel-line-start': 52819L,
        'selection_end': 52888L,
        'selection_start': 52888L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/series.py'): {'a'\
        'ttrib-starts': [('Series',
                          119),
                         ('Series.apply',
                          2425)],
        'first-line': 2515L,
        'folded-linenos': [],
        'sel-line': 2537L,
        'sel-line-start': 81854L,
        'selection_end': 81854L,
        'selection_start': 81854L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pyfor_env/lib/python3.6/site-packages/rasterio/__init__.py'): {'a'\
        'ttrib-starts': [('NullHandler',
                          18)],
        'first-line': 5L,
        'folded-linenos': [],
        'sel-line': 18L,
        'sel-line-start': 346L,
        'selection_end': 385L,
        'selection_start': 385L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('custom',
                        [u'PYTHONPATH=""'])}
proj.pyexec = {None: ('custom',
                      u'/Users/ben/miniconda3/envs/DeepForest/bin/python')}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
search.replace-history = [u'batch_size']
search.search-history = [u'load_csv',
                         u'load',
                         u'load_',
                         u'retrieve',
                         u'tile',
                         u'fetch',
                         u'steps',
                         u'score',
                         u'sample',
                         u'save',
                         u'print',
                         u'epoch',
                         u'eval.py',
                         u'train.py',
                         u'save_path',
                         u'evaluate',
                         u'experiment',
                         u'on_epoch_end',
                         u'copy',
                         u'preprocess_image']
testing.stored-results = (1,
                          [],
                          {})
