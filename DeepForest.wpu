#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'bpZQzW8ebbbzsc7bKeMVVsVoTb'\
        'xpUqNE',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.25,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': ()}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [3,
                          4],
        'notebook_display': 'normal',
        'notebook_percent': 0.3869610935856993,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': u'grid',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': 1750,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'float(X["ymax"]))',
                                       'fReverse': False,
                                       'fSearchText': u'X["ymax"])',
                                       'fStartPos': 1740,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': True,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': True}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {}),
                     ('testing',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 0L,
                       'folded-linenos': [],
                       'history': {},
                       'launch-id': None,
                       'sel-line': 0L,
                       'sel-line-start': 0L,
                       'selection_end': 0L,
                       'selection_start': 0L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 2054L,
                       'folded-linenos': [],
                       'history': {None: ["config['data_dir']\n",
        'from DeepForest import config\n',
        'config=config.config\n',
        'config\n',
        "data_paths=glob.glob(config['data_dir']+\"/*.csv\")\n",
        'import glob\n',
        "data_paths=glob.glob(config['data_dir']+\"/*.csv\")\ndataframes = ("\
        "pd.read_csv(f) for f in data_paths)\ndata = pd.concat(dataframes, i"\
        "gnore_index=True)\n\n",
        "import pandas as pd\nimport glob\nimport numpy as np\n#from DeepFor"\
        "est.CropGenerator import CropDataGenerator\n\n#Load configs\nconfig"\
        "=config.config\n\n#Load data\ndata_paths=glob.glob(config['data_dir"\
        "']+\"/*.csv\")\ndataframes = (pd.read_csv(f) for f in data_paths)\n"\
        "data = pd.concat(dataframes, ignore_index=True)\n\n",
        "from DeepForest.config import config\nimport pandas as pd\nimport g"\
        "lob\nimport numpy as np\n#from DeepForest.CropGenerator import Crop"\
        "DataGenerator\n\n#Load data\ndata_paths=glob.glob(config['data_dir'"\
        "]+\"/*.csv\")\ndataframes = (pd.read_csv(f) for f in data_paths)\n"\
        "data = pd.concat(dataframes, ignore_index=True)\n\n",
        "#Load data\ndata_paths=glob.glob(config['data_dir']+\"/*.csv\")\nda"\
        "taframes = (pd.read_csv(f,index_col=0) for f in data_paths)\ndata ="\
        " pd.concat(dataframes, ignore_index=True)\n\n",
        'np.random.seed(2)\n',
        'msk = np.random.rand(len(df)) < 0.8\n',
        'm\n',
        '#Partition data\n##Set seed for reproducibility##\nnp.random.seed(2'\
        ')\nmsk = np.random.rand(len(data)) < 0.8\n\n#Training and testing d'\
        'ataframes\ntrain = df[msk]\ntest = df[~msk]\n\n',
        '#Partition data\n##Set seed for reproducibility##\nnp.random.seed(2'\
        ')\nmsk = np.random.rand(len(data)) < 0.8\n\n#Training and testing d'\
        'ataframes\ntrain = data[msk]\ntest = data[~msk]\n\n',
        'msk\n',
        'test.index.values\n',
        'train.box.to_dict\n',
        'train.box.to_dict()\n',
        'train.label.to_dict()\n',
        'labels=data.label.to_dict()\n',
        'data.head\n',
        '32*3\n',
        'data[::4]\n',
        'data[:4]\n',
        'data[4]\n',
        'data.keys\n',
        'data.keys()\n',
        'data.\n',
        'data.box\n',
        'partition\n',
        "data.loc['504']\n",
        'data.index\n',
        'data.[504]\n',
        'data.loc[504]\n',
        'data.loc[504].xmin\n',
        'data.set_index\n',
        "#Load data\ndata_paths=glob.glob(config['data_dir']+\"/*.csv\")\nda"\
        "taframes = (pd.read_csv(f,index_col=0) for f in data_paths)\ndata ="\
        " pd.concat(dataframes, ignore_index=True)\n#set index explicitely\n"\
        "data.set_index('box')\n\n",
        "from DeepForest.config import config\nimport pandas as pd\nimport g"\
        "lob\nimport numpy as np\nfrom DeepForest.CropGenerator import DataG"\
        "enerator\n\n##Set seed for reproducibility##\nnp.random.seed(2)\n\n"\
        "#Load data\ndata_paths=glob.glob(config['data_dir']+\"/*.csv\")\nda"\
        "taframes = (pd.read_csv(f,index_col=0) for f in data_paths)\ndata ="\
        " pd.concat(dataframes, ignore_index=True)\n\n#set index explicitely"\
        "\ndata.set_index('box')\n\n#Partition data\nmsk = np.random.rand(le"\
        "n(data)) < 0.8\n\n#Training and testing dataframes\ntrain = data[ms"\
        "k]\ntest = data[~msk]\n\n#Create dictionaries to keep track of labe"\
        "ls and splits\npartition={\"train\": train.box,\"test\": test.box}"\
        "\nlabels=data.label.to_dict()\n\n",
        '# Authors: Ben Weinstein<ben.weinstein@weecology.org>\n\nimport ras'\
        'terio\nfrom rasterio.tools.mask import mask\nfrom rasterio import p'\
        'lot\nfrom matplotlib import pyplot\nimport keras\nfrom tools import'\
        ' crop_lidar,crop_rgb\n\n',
        'import rasterio\nfrom rasterio.tools.mask import mask\nfrom rasteri'\
        'o import plot\nfrom matplotlib import pyplot\nimport keras\nfrom to'\
        'ols import crop_lidar,crop_rgb\n\n',
        'from . import tools\n',
        "'''\nfrom DeepForest.config import config\nimport pandas as pd\nimp"\
        "ort glob\nimport numpy as np\nfrom DeepForest.CropGenerator import "\
        "DataGenerator\nimport keras\n\n##Set seed for reproducibility##\nnp"\
        ".random.seed(2)\n\n#Load data\ndata_paths=glob.glob(config['data_di"\
        "r']+\"/*.csv\")\ndataframes = (pd.read_csv(f,index_col=0) for f in "\
        "data_paths)\ndata = pd.concat(dataframes, ignore_index=True)\n\n#se"\
        "t index explicitely\ndata.set_index('box')\n\n#Partition data\nmsk "\
        "= np.random.rand(len(data)) < 0.8\n\n#Training and testing datafram"\
        "es\ntrain = data[msk]\ntest = data[~msk]\n\n",
        "rom DeepForest.config import config\nimport pandas as pd\nimport gl"\
        "ob\nimport numpy as np\nfrom DeepForest.CropGenerator import DataGe"\
        "nerator\nimport keras\n\n##Set seed for reproducibility##\nnp.rando"\
        "m.seed(2)\n\n#Load data\ndata_paths=glob.glob(config['data_dir']+\""\
        "/*.csv\")\ndataframes = (pd.read_csv(f,index_col=0) for f in data_p"\
        "aths)\ndata = pd.concat(dataframes, ignore_index=True)\n\n#set inde"\
        "x explicitely\ndata.set_index('box')\n\n#Partition data\nmsk = np.r"\
        "andom.rand(len(data)) < 0.8\n\n#Training and testing dataframes\ntr"\
        "ain = data[msk]\ntest = data[~msk]\n\n#Create dictionaries to keep "\
        "track of labels and splits\npartition={\"train\": train.box,\"test"\
        "\": test.box}\nlabels=data.label.to_dict()\n\n",
        "from DeepForest.config import config\nimport pandas as pd\nimport g"\
        "lob\nimport numpy as np\nfrom DeepForest.CropGenerator import DataG"\
        "enerator\nimport keras\n\n##Set seed for reproducibility##\nnp.rand"\
        "om.seed(2)\n\n#Load data\ndata_paths=glob.glob(config['data_dir']+"\
        "\"/*.csv\")\ndataframes = (pd.read_csv(f,index_col=0) for f in data"\
        "_paths)\ndata = pd.concat(dataframes, ignore_index=True)\n\n#set in"\
        "dex explicitely\ndata.set_index('box')\n\n#Partition data\nmsk = np"\
        ".random.rand(len(data)) < 0.8\n\n#Training and testing dataframes\n"\
        "train = data[msk]\ntest = data[~msk]\n\n#Create dictionaries to kee"\
        "p track of labels and splits\npartition={\"train\": train.box,\"tes"\
        "t\": test.box}\nlabels=data.label.to_dict()\n\n",
        'from collections import Counter\nfrom itertools import chain\n\n',
        'counts = Counter(chain.from_iterable(e.keys() for e in d))\n',
        'counts = Counter(chain.from_iterable(e.keys() for e in labels))\n',
        'd=labels\n',
        '# fetch keys\nb=[j[0] for i in d for j in i.items()]\n\n# print out'\
        'put\nfor k in list(set(b)):\n    print "{0}: {1}".format(k, b.count'\
        '(k))\n\n',
        'b=[j[0] for i in d for j in i.items()]\n',
        'd\n',
        'd.items\n',
        'd.items()\n',
        '[for j in d.items()]\n',
        '[j[0] for i in d for j in i.items()]\n',
        'from collections import Counter\n',
        'Counter(list(d))\n',
        'Counter(list(d) for dict in zzz )\n',
        'Counter(list(di) for dict in )\n',
        'Counter(d)\n',
        'a=Counter(d)\n',
        'sum(a)\n',
        'data\n',
        "from DeepForest.config import config\nimport pandas as pd\nimport g"\
        "lob\nimport numpy as np\nfrom DeepForest.CropGenerator import DataG"\
        "enerator\nimport keras\n\n##Set seed for reproducibility##\nnp.rand"\
        "om.seed(2)\n\n#Load data\ndata_paths=glob.glob(config['data_dir']+"\
        "\"/*.csv\")\ndataframes = (pd.read_csv(f,index_col=0) for f in data"\
        "_paths)\ndata = pd.concat(dataframes, ignore_index=True)\n\n#set in"\
        "dex explicitely\ndata.set_index('box')\n\n#Partition data\nmsk = np"\
        ".random.rand(len(data)) < 0.8\n\n#Training and testing dataframes\n"\
        "train = data[msk]\ntest = data[~msk]\n\n",
        'test\n',
        'train.groupby()\n',
        'train.stack\n',
        'train.stack.value_counts()\n',
        'train.stack().value_counts()\n',
        'train.label.stack().value_counts()\n',
        'train.label.value_counts()\n',
        'test.label.value_counts()\n',
        '#Create dictionaries to keep track of labels and splits\npartition='\
        '{"train": train.box,"test": test.box}\nlabels=data.label.to_dict()'\
        '\n\n',
        "#Load data\ndata_paths=glob.glob(config['data_dir']+\"/*.csv\")\nda"\
        "taframes = (pd.read_csv(f,index_col=0) for f in data_paths)\ndata ="\
        " pd.concat(dataframes, ignore_index=True)\n\n#set index explicitely"\
        "\ndata.set_index('box')\n\n#Partition data\nmsk = np.random.rand(le"\
        "n(data)) < 0.8\n\n#Training and testing dataframes\ntrain = data[ms"\
        "k]\ntest = data[~msk]\n\n#Create dictionaries to keep track of labe"\
        "ls and splits\npartition={\"train\": train.box,\"test\": test.box}"\
        "\nlabels=data.label.to_dict()\n\n",
        'data.label\n',
        'train.box\n',
        "data.set_index('box')\n",
        "#Load data\ndata_paths=glob.glob(config['data_dir']+\"/*.csv\")\nda"\
        "taframes = (pd.read_csv(f,index_col=0) for f in data_paths)\ndata ="\
        " pd.concat(dataframes, ignore_index=True)\n\n#set index explicitely"\
        "\ndata=data.set_index('box')\n\n#Partition data\nmsk = np.random.ra"\
        "nd(len(data)) < 0.8\n\n#Training and testing dataframes\ntrain = da"\
        "ta[msk]\ntest = data[~msk]\n\n#Create dictionaries to keep track of"\
        " labels and splits\npartition={\"train\": train.box,\"test\": test."\
        "box}\nlabels=data.label.to_dict()\n\n",
        'train\n',
        'train.index.values\n',
        "#Load data\ndata_paths=glob.glob(config['data_dir']+\"/*.csv\")\nda"\
        "taframes = (pd.read_csv(f,index_col=0) for f in data_paths)\ndata ="\
        " pd.concat(dataframes, ignore_index=True)\n\n#set index explicitely"\
        "\ndata=data.set_index('box')\n\n#Partition data\nmsk = np.random.ra"\
        "nd(len(data)) < 0.8\n\n#Training and testing dataframes\ntrain = da"\
        "ta[msk]\ntest = data[~msk]\n\n#Create dictionaries to keep track of"\
        " labels and splits\npartition={\"train\": train.index.values,\"test"\
        "\": test.index.values}\nlabels=data.label.to_dict()\n\n",
        "labels['0']\n",
        'labels[0]\n',
        'labels["0"]\n',
        'labels["1"]\n',
        'labels["1_background"]\n',
        'labels\n']},
                       'launch-id': None,
                       'sel-line': 2071L,
                       'sel-line-start': 276665L,
                       'selection_end': 276665L,
                       'selection_start': 276665L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('DeepForest/CropGenerator.py'),
        {'attrib-starts': [('DataGenerator',
                            10),
                           ('DataGenerator.crop_rgb',
                            57)],
         'first-line': 33L,
         'folded-linenos': [],
         'sel-line': 61L,
         'sel-line-start': 1749L,
         'selection_end': 1749L,
         'selection_start': 1749L,
         'zoom': 0L},
        1526498849.72495],
        [loc('DeepForest/tools.py'),
         {'attrib-starts': [('data2geojson',
                             54)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 73L,
          'sel-line-start': 2176L,
          'selection_end': 2176L,
          'selection_start': 2176L,
          'zoom': 0L},
         1526498978.355166],
        [loc('DeepForest/CropGenerator.py'),
         {'attrib-starts': [('DataGenerator',
                             11),
                            ('DataGenerator.__getitem__',
                             30)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 43L,
          'sel-line-start': 1260L,
          'selection_end': 1264L,
          'selection_start': 1264L,
          'zoom': 0L},
         1526505534.53939],
        [loc('train.py'),
         {'attrib-starts': [],
          'first-line': 1L,
          'folded-linenos': [],
          'sel-line': 5L,
          'sel-line-start': 165L,
          'selection_end': 831L,
          'selection_start': 165L,
          'zoom': 0L},
         1526505550.060669],
        [loc('DeepForest/CropGenerator.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 2L,
          'sel-line-start': 60L,
          'selection_end': 274L,
          'selection_start': 60L,
          'zoom': 0L},
         1526505688.761051],
        [loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 16L,
          'sel-line-start': 554L,
          'selection_end': 563L,
          'selection_start': 563L,
          'zoom': 0L},
         1526506105.917495],
        [loc('DeepForest/CropGenerator.py'),
         {'attrib-starts': [],
          'first-line': 36L,
          'folded-linenos': [],
          'sel-line': 9L,
          'sel-line-start': 237L,
          'selection_end': 256L,
          'selection_start': 237L,
          'zoom': 0L},
         1526506158.301388],
        [loc('DeepForest/tools.py'),
         {'attrib-starts': [('start_dask',
                             8)],
          'first-line': 22L,
          'folded-linenos': [],
          'sel-line': 38L,
          'sel-line-start': 1199L,
          'selection_end': 1201L,
          'selection_start': 1201L,
          'zoom': 0L},
         1526506174.235481],
        [loc('DeepForest/CropGenerator.py'),
         {'attrib-starts': [('crop_lidar',
                             125)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 131L,
          'sel-line-start': 3833L,
          'selection_end': 3833L,
          'selection_start': 3833L,
          'zoom': 0L},
         1526506357.889045],
        [loc('_config.yml'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 7L,
          'sel-line-start': 136L,
          'selection_end': 159L,
          'selection_start': 159L,
          'zoom': 0L},
         1526506358.378237],
        [loc('train.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 8L,
          'sel-line-start': 234L,
          'selection_end': 252L,
          'selection_start': 252L,
          'zoom': 0L},
         1526506374.098957],
        [loc('DeepForest/tools.py'),
         {'attrib-starts': [('start_dask',
                             8)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 38L,
          'sel-line-start': 1199L,
          'selection_end': 1201L,
          'selection_start': 1201L,
          'zoom': 0L},
         1526506376.129138],
        [loc('DeepForest/CropGenerator.py'),
         {'attrib-starts': [('crop_lidar',
                             125)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 131L,
          'sel-line-start': 3833L,
          'selection_end': 3833L,
          'selection_start': 3833L,
          'zoom': 0L},
         1526506376.99063],
        [loc('train.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 8L,
          'sel-line-start': 234L,
          'selection_end': 252L,
          'selection_start': 252L,
          'zoom': 0L},
         1526506378.995805],
        [loc('DeepForest/CropGenerator.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 8L,
          'sel-line-start': 224L,
          'selection_end': 224L,
          'selection_start': 224L,
          'zoom': 0L},
         1526506388.319332],
        [loc('train.py'),
         {'attrib-starts': [],
          'first-line': 1L,
          'folded-linenos': [],
          'sel-line': 18L,
          'sel-line-start': 493L,
          'selection_end': 537L,
          'selection_start': 537L,
          'zoom': 0L},
         1526507661.875193],
        [loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/generic.py'),
         {'attrib-starts': [('NDFrame',
                             97),
                            ('NDFrame.__getattr__',
                             3599)],
          'first-line': 3608L,
          'folded-linenos': [],
          'sel-line': 3613L,
          'sel-line-start': 125950L,
          'selection_end': 125950L,
          'selection_start': 125950L,
          'zoom': 0L},
         1526507718.537173],
        [loc('train.py'),
         {'attrib-starts': [],
          'first-line': 5L,
          'folded-linenos': [],
          'sel-line': 15L,
          'sel-line-start': 370L,
          'selection_end': 850L,
          'selection_start': 370L,
          'zoom': 0L},
         1526508031.022412],
        [loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/generic.py'),
         {'attrib-starts': [('NDFrame',
                             97),
                            ('NDFrame.__getattr__',
                             3599)],
          'first-line': 3608L,
          'folded-linenos': [],
          'sel-line': 3613L,
          'sel-line-start': 125950L,
          'selection_end': 125950L,
          'selection_start': 125950L,
          'zoom': 0L},
         1526508038.665047],
        [loc('DeepForest/CropGenerator.py'),
         {'attrib-starts': [('DataGenerator',
                             9),
                            ('DataGenerator.__getitem__',
                             28)],
          'first-line': 12L,
          'folded-linenos': [],
          'sel-line': 39L,
          'sel-line-start': 1188L,
          'selection_end': 1188L,
          'selection_start': 1188L,
          'zoom': 0L},
         1526508047.703461]],
        20),
        'current-loc': loc('train.py'),
        'editor-state-list': [(loc('DeepForest/CropGenerator.py'),
                               {'attrib-starts': [('DataGenerator',
        9),
        ('DataGenerator.__getitem__',
         28)],
                                'first-line': 12L,
                                'folded-linenos': [],
                                'sel-line': 39L,
                                'sel-line-start': 1188L,
                                'selection_end': 1188L,
                                'selection_start': 1188L,
                                'zoom': 0L}),
                              (loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/generic.py'),
                               {'attrib-starts': [('NDFrame',
        97),
        ('NDFrame.__getattr__',
         3599)],
                                'first-line': 3608L,
                                'folded-linenos': [],
                                'sel-line': 3613L,
                                'sel-line-start': 125950L,
                                'selection_end': 125950L,
                                'selection_start': 125950L,
                                'zoom': 0L}),
                              (loc('DeepForest/tools.py'),
                               {'attrib-starts': [('start_dask',
        8)],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 38L,
                                'sel-line-start': 1199L,
                                'selection_end': 1201L,
                                'selection_start': 1201L,
                                'zoom': 0L}),
                              (loc('train.py'),
                               {'attrib-starts': [],
                                'first-line': 10L,
                                'folded-linenos': [],
                                'sel-line': 26L,
                                'sel-line-start': 648L,
                                'selection_end': 656L,
                                'selection_start': 656L,
                                'zoom': 0L}),
                              (loc('_config.yml'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 7L,
                                'sel-line-start': 136L,
                                'selection_end': 159L,
                                'selection_start': 159L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('DeepForest/CropGenerator.py'),
         loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/generic.py'),
         loc('DeepForest/tools.py'),
         loc('train.py'),
         loc('_config.yml')]),
                               'open_files': [u'_config.yml',
        u'DeepForest/tools.py',
        u'DeepForest/CropGenerator.py',
        u'train.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.1424561403508772},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (1587,
                         23,
                         1404,
                         1005)}]}
guimgr.recent-documents = [loc('train.py'),
                           loc('DeepForest/CropGenerator.py'),
                           loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/generic.py'),
                           loc('DeepForest/tools.py'),
                           loc('_config.yml')]
guimgr.visual-state = {loc('DeepForest/Lidar.py'): {'attrib-starts': [('Lida'\
        'r',
        2),
        ('Lidar.plot',
         6)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 8L,
        'sel-line-start': 169L,
        'selection_end': 177L,
        'selection_start': 177L,
        'zoom': 0L},
                       loc('DeepForest/README.md'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/RGB.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/pointcloud.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/untitled-2.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('README.md'): {'attrib-starts': [],
        'first-line': 26L,
        'folded-linenos': [],
        'sel-line': 42L,
        'sel-line-start': 1588L,
        'selection_end': 1588L,
        'selection_start': 1588L,
        'zoom': 0L},
                       loc('RGB.py'): {'attrib-starts': [],
                                       'first-line': 0L,
                                       'folded-linenos': [],
                                       'sel-line': 0L,
                                       'sel-line-start': 0L,
                                       'selection_end': 0L,
                                       'selection_start': 0L,
                                       'zoom': 0L},
                       loc('_config.yml'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('config.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('install_dependencies.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 251L,
        'selection_end': 251L,
        'selection_start': 251L,
        'zoom': 0L},
                       loc('tests/__init__.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_Lidar.py'): {'attrib-starts': [('test'\
        '_Lidar',
        2)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 207L,
        'selection_end': 207L,
        'selection_start': 207L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/cloud.py'): {'attrib-starts': [('C'\
        'loud',
        41),
        ('Cloud.filter_z',
         152)],
        'first-line': 148L,
        'folded-linenos': [],
        'sel-line': 162L,
        'sel-line-start': 5941L,
        'selection_end': 5991L,
        'selection_start': 5991L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/metrics2.py'): {'attrib-starts': [('m'\
        'ode',
        12)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 477L,
        'selection_end': 480L,
        'selection_start': 480L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/pointcloud2.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/rasterizer.py'): {'attrib-starts': [('G'\
        'rid',
        7),
        ('Grid.__init__',
         14)],
        'first-line': 4L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 827L,
        'selection_end': 838L,
        'selection_start': 838L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/test.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 13L,
        'sel-line-start': 250L,
        'selection_end': 286L,
        'selection_start': 286L,
        'zoom': 0L},
                       loc('../train.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../Downloads/Miniconda3-latest-MacOSX-x86_64.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 16L,
        'sel-line-start': 554L,
        'selection_end': 563L,
        'selection_start': 563L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          97),
                         ('NDFrame.__getattr__',
                          3599)],
        'first-line': 3608L,
        'folded-linenos': [],
        'sel-line': 3613L,
        'sel-line-start': 125950L,
        'selection_end': 125950L,
        'selection_start': 125950L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/indexing.py'): {'a'\
        'ttrib-starts': [('_LocIndexer',
                          1413),
                         ('_LocIndexer._has_valid_type',
                          1442)],
        'first-line': 1466L,
        'folded-linenos': [],
        'sel-line': 1476L,
        'sel-line-start': 52819L,
        'selection_end': 52888L,
        'selection_start': 52888L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('default',
                        [u''])}
proj.pyexec = {None: ('custom',
                      u'/Users/ben/miniconda3/envs/pangeo/bin/python3.6')}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
search.search-history = [u'pd',
                         u'pandas',
                         u'grid']
testing.stored-results = (1,
                          [],
                          {})
