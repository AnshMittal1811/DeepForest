#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.err-values = {loc('evaluate.py'): {},
                    loc('predict.py'): {},
                    loc('train.py'): {},
                    loc('train_fixed.py'): {},
                    loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'): {}}
debug.recent-run-args = {loc('eval.py'): [u'--score-threshold 0.4 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_08.h5 --convert-model',
        u'--score-threshold 0.5 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_08.h5 --convert-model',
        u'--score-threshold 0.5 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_04.h5 --convert-model',
        u'--score-threshold 0.5 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_05.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_18.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly snapshots/detection.csv snapshots/resnet50_onthefly_18.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly snapshots/detection.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly snapshots/evaluation.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly data/training/evaluation.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.9 --save-path snapshots/images/ onthefly data/training/detection.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.50 --save-path snapshots/images/ onthefly data/training/detection.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.25 --save-path snapshots/images/ onthefly data/training/detection.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.25 --save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_14.h5 --convert-model',
        u'--score-threshold 0.25 --save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_27.h5 --convert-model',
        u'--score-threshold 0.5 --save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_27.h5 --convert-model',
        u'--score-threshold 0.5 --save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_28.h5 --convert-model',
        u'--score-threshold 0.5 --save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_03.h5 --convert-model',
        u'--save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_03.h5 --convert-model',
        u'--save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_01.h5 --convert-model',
        u'--save-path snapshots/images/ onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_02.h5 --convert-model',
        u'onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_01.h5 --convert-model',
        u'--save-path snapshots/images onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_01.h5 --convert-model',
        u'--save-path snapshots/images onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_01.h5 ',
        u'onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_01.h5 --save-path snapshots/images',
        u'onthefly data/tmp/detection.csv snapshots/resnet50_onthefly_01.h5'],
                         loc('evaluate.py'): [u'--logdir=logs/20180524-065707',
        u'--logdir=20180524-065707'],
                         loc('predict.py'): [u'--logdir logs/20180524-065707',
        u'--logdir 20180524-065707',
        u'--logdir 20180521-085302']}
debug.remote-hosts = (4,
                      [{'agent-port': 0,
                        'basedir': u'',
                        'debug-port': 0,
                        'forward-x11': False,
                        'hostname': 'b.weinstein@dev1.ufhpc',
                        'id': 'Hipergator',
                        'io-encoding': None,
                        'pyexec': u'',
                        'shared': False,
                        'winghome': '/home/b.weinstein/wing/'}])
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'ZJTPJytlEesMIKzXs2TV5OeGs8'\
        'yol7dB',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.1228070175438597,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': ()}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [3,
                          0],
        'notebook_display': 'normal',
        'notebook_percent': 0.49808429118773945,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'batch_size',
                                       'fReverse': False,
                                       'fSearchText': u'show',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'',
                                       'fReverse': False,
                                       'fSearchText': u'fetch_annotation',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': True,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('testing',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 1126L,
                       'folded-linenos': [],
                       'history': {u'file:/Users/ben/Documents/DeepForest/eval.py': [],
                                   u'file:/Users/ben/Documents/DeepForest/train.py': ['c'\
        'onfig\n',
        'args\n',
        'main(args,config,experiment)\n'],
                                   u'file:/Users/ben/Documents/keras-retinanet/keras_retinanet/preprocessing/onthefly.py': ['i'\
        'm.mode\n',
        'training_generator.image_data\n',
        'training_generator.image_data.keys\n',
        'training_generator=OnTheFlyGenerator(csv_data_file=path,group_metho'\
        'd="random",config=config,base_dir=config["rgb_tile_dir"])\n',
        'np.random.seed(2)\ntraining_generator=OnTheFlyGenerator(csv_data_fi'\
        'le=path,group_method="random",config=config,base_dir=config["rgb_ti'\
        'le_dir"])\n\n',
        'training_generator\n',
        'raining_generator.image_data.keys()\n',
        'training_generator.image_data.keys()\n',
        'image=retrieve_window(self.base_dir+row["image"], row["windows"])\n',
        'self.annotation_list    \n',
        'self.image_data.head()\n',
        'self.image_data.head\n',
        'self.image_data.\n',
        'self.image_data\n',
        'self.annotation_list.head(n=10)\n',
        'self.annotation_list.columns\n',
        'self.annotation_list.rgb_path.head(10)\n',
        'tile_annotations=self.annotations_list[self.annotations_list["rgb_p'\
        'ath"]==row["image"]]\n',
        'self.annotation_list\n',
        'tile_annotations=self.self.annotation_list[self.self.annotation_lis'\
        't["rgb_path"]==row["image"]]\n',
        'tile_annotations=self.annotation_list[self.annotation_list["rgb_pat'\
        'h"]==row["image"]]\n',
        'tile_annotations\n',
        'tile_xmin=tile_annotations\n',
        'tile_xmin=tile_annotations.tile_xmin.unique()\n',
        'tile_annotations.tile_xmin.unique()\n',
        'tile_annotations.tile_xmin.unique()[0]\n',
        'tile_xmin=tile_annotations.tile_xmin.unique()[0]\ntile_xmax=tile_an'\
        'notations.tile_xmax.unique()[0]\ntile_ymin=tile_annotations.tile_ym'\
        'ax.unique()[0]\ntile_ymax=tile_annotations.tile_ymin.unique()[0]\n'\
        '\n',
        'tile_ymac\n',
        'tile_ymax\n',
        'self.windwos\n',
        'self.windows[row["window"]].indices()\n',
        'row\n',
        'self.windows[row["windows"]].indices()\n',
        'self.windows[row["windows"]].getRect()\n',
        'x,y,w,h= self.windows[row["windows"]].getRect()\n',
        'tile_annotations=self.annotation_list[self.annotation_list["rgb_pat'\
        'h"]==row["image"]]\n\n#Set tile extent, remember to flip y axis fro'\
        'm R -> Python\ntile_xmin=tile_annotations.tile_xmin.unique()[0]\nti'\
        'le_xmax=tile_annotations.tile_xmax.unique()[0]\ntile_ymin=tile_anno'\
        'tations.tile_ymax.unique()[0]\ntile_ymax=tile_annotations.tile_ymin'\
        '.unique()[0]\n\n',
        'tile_xmin\n',
        'tile_xmin-x\n',
        'x\n',
        'x/0.01\n',
        'x*0.01\n',
        'x*0.1\n',
        'self.rgb_res\n',
        'x * self.rgb_res\n',
        'x * self.rgb_res + tile_xmin\n',
        'window_xmin=x * self.rgb_res + tile_xmin\nwindow_xmax=(x+w) * self.'\
        'rgb_res + tile_xmin\nwindow_ymin=y * self.rgb_res + tile_ymin\nwind'\
        'ow_ymax=(y+h) * self.rgb_res + tile_xmin\n\n',
        'window_xmin=x * self.rgb_res + tile_xmin\nwindow_xmax=(x+w) * self.'\
        'rgb_res + tile_xmin\nwindow_ymin=y * self.rgb_res + tile_ymin\nwind'\
        'ow_ymax=(y+h) * self.rgb_res + tile_ymin\n\n',
        'window_ymax\n',
        'window_ymin\n',
        'window_xmin\n',
        'window_xmax\n',
        "def createPolygon(xmin,xmax,ymin,ymax):\n    '''\n    Convert a pan"\
        "das row into a polygon bounding box\n    ''' \n    \n    p1 = geome"\
        "try.Point(xmin,ymin)\n    p2 = geometry.Point(xmin,ymax)\n    p3 = "\
        "geometry.Point(xmax,ymin)\n    p4 = geometry.Point(xmax,ymax)\n    "\
        "\n    pointList = [p1, p2, p3, p4, p1]\n    \n    poly = geometry.P"\
        "olygon([[p.x, p.y] for p in pointList])\n    \n    return poly\n\n"\
        "\ndef get_window_extent(annotations,row,windows):\n    '''\n    Get"\
        " the geographic coordinates of the sliding window.\n    '''\n    #S"\
        "elect tile from annotations to get extent\n    tile_annotations=ann"\
        "otations[annotations[\"rgb_path\"]==row[\"image\"]]\n    \n    #Set"\
        " tile extent, remember to flip y axis from R -> Python\n    tile_xm"\
        "in=tile_annotations.tile_xmin.unique()[0]\n    tile_xmax=tile_annot"\
        "ations.tile_xmax.unique()[0]\n    tile_ymin=tile_annotations.tile_y"\
        "max.unique()[0]\n    tile_ymax=tile_annotations.tile_ymin.unique()["\
        "0]\n    \n    #Get window cartesian coordinates\n    x,y,w,h= windo"\
        "ws[row[\"windows\"]].getRect()\n    \n    window_xmin=x * self.rgb_"\
        "res + tile_xmin\n    window_xmax=(x+w) * self.rgb_res + tile_xmin\n"\
        "    window_ymin=(y+h) * self.rgb_res + tile_ymin\n    window_ymax=y"\
        " * self.rgb_res + tile_ymin\n    \n    return(window_xmin,window_xm"\
        "ax,window_ymin,window_ymax)\n\n#Find geographic coordinates of the "\
        "rgb tile \nxmin,xmax,ymin,ymax=get_window_extent(annotations=self.a"\
        "nnotations_list, row=row, windows=self.windows)\n\n\n",
        'self.annotation_listxmin,xmax,ymin,ymax=get_window_extent(annotatio'\
        'ns=self.annotation_list, row=row, windows=self.windows)\n',
        'self.windows\n',
        'xmin,xmax,ymin,ymax=get_window_extent(annotations=self.annotation_l'\
        'ist, row=row, windows=self.windows)\n',
        "def createPolygon(xmin,xmax,ymin,ymax):\n    '''\n    Convert a pan"\
        "das row into a polygon bounding box\n    ''' \n    \n    p1 = geome"\
        "try.Point(xmin,ymin)\n    p2 = geometry.Point(xmin,ymax)\n    p3 = "\
        "geometry.Point(xmax,ymin)\n    p4 = geometry.Point(xmax,ymax)\n    "\
        "\n    pointList = [p1, p2, p3, p4, p1]\n    \n    poly = geometry.P"\
        "olygon([[p.x, p.y] for p in pointList])\n    \n    return poly\n\n"\
        "\ndef get_window_extent(annotations,row,windows,rgb_res):\n    '''"\
        "\n    Get the geographic coordinates of the sliding window.\n    ''"\
        "'\n    #Select tile from annotations to get extent\n    tile_annota"\
        "tions=annotations[annotations[\"rgb_path\"]==row[\"image\"]]\n    "\
        "\n    #Set tile extent, remember to flip y axis from R -> Python\n"\
        "    tile_xmin=tile_annotations.tile_xmin.unique()[0]\n    tile_xmax"\
        "=tile_annotations.tile_xmax.unique()[0]\n    tile_ymin=tile_annotat"\
        "ions.tile_ymax.unique()[0]\n    tile_ymax=tile_annotations.tile_ymi"\
        "n.unique()[0]\n    \n    #Get window cartesian coordinates\n    x,y"\
        ",w,h= windows[row[\"windows\"]].getRect()\n    \n    window_xmin=x "\
        "* rgb_res + tile_xmin\n    window_xmax=(x+w) * self.rgb_res + tile_"\
        "xmin\n    window_ymin=(y+h) * self.rgb_res + tile_ymin\n    window_"\
        "ymax=y * rgb_res + tile_ymin\n    \n    return(window_xmin,window_x"\
        "max,window_ymin,window_ymax)\n\n#Find geographic coordinates of the"\
        " rgb tile \nxmin,xmax,ymin,ymax=get_window_extent(annotations=self."\
        "annotation_list, row=row, windows=self.windows,rgb_res=self.rgb_res"\
        ")\n\n\n",
        "def get_window_extent(annotations,row,windows,rgb_res):\n    '''\n"\
        "    Get the geographic coordinates of the sliding window.\n    '''"\
        "\n    #Select tile from annotations to get extent\n    tile_annotat"\
        "ions=annotations[annotations[\"rgb_path\"]==row[\"image\"]]\n    \n"\
        "    #Set tile extent, remember to flip y axis from R -> Python\n   "\
        " tile_xmin=tile_annotations.tile_xmin.unique()[0]\n    tile_xmax=ti"\
        "le_annotations.tile_xmax.unique()[0]\n    tile_ymin=tile_annotation"\
        "s.tile_ymax.unique()[0]\n    tile_ymax=tile_annotations.tile_ymin.u"\
        "nique()[0]\n    \n    #Get window cartesian coordinates\n    x,y,w,"\
        "h= windows[row[\"windows\"]].getRect()\n    \n    window_xmin=x * r"\
        "gb_res + tile_xmin\n    window_xmax=(x+w) * rgb_res + tile_xmin\n  "\
        "  window_ymin=(y+h) * rgb_res + tile_ymin\n    window_ymax=y * rgb_"\
        "res + tile_ymin\n    \n    return(window_xmin,window_xmax,window_ym"\
        "in,window_ymax)\n\n",
        'xmin,xmax,ymin,ymax=get_window_extent(annotations=self.annotation_l'\
        'ist, row=row, windows=self.windows,rgb_res=self.rgb_res)\n',
        'image\n',
        "def createPolygon(xmin,xmax,ymin,ymax):\n    '''\n    Convert a pan"\
        "das row into a polygon bounding box\n    ''' \n    \n    p1 = geome"\
        "try.Point(xmin,ymin)\n    p2 = geometry.Point(xmin,ymax)\n    p3 = "\
        "geometry.Point(xmax,ymin)\n    p4 = geometry.Point(xmax,ymax)\n    "\
        "\n    pointList = [p1, p2, p3, p4, p1]\n    \n    poly = geometry.P"\
        "olygon([[p.x, p.y] for p in pointList])\n    \n    return poly\n\n"\
        "\ndef get_window_extent(annotations,row,windows,rgb_res):\n    '''"\
        "\n    Get the geographic coordinates of the sliding window.\n    ''"\
        "'\n    #Select tile from annotations to get extent\n    tile_annota"\
        "tions=annotations[annotations[\"rgb_path\"]==row[\"image\"]]\n    "\
        "\n    #Set tile extent, remember to flip y axis from R -> Python\n"\
        "    tile_xmin=tile_annotations.tile_xmin.unique()[0]\n    tile_xmax"\
        "=tile_annotations.tile_xmax.unique()[0]\n    tile_ymin=tile_annotat"\
        "ions.tile_ymin.unique()[0]\n    tile_ymax=tile_annotations.tile_yma"\
        "x.unique()[0]\n    \n    #Get window cartesian coordinates\n    x,y"\
        ",w,h= windows[row[\"windows\"]].getRect()\n    \n    window_xmin=x "\
        "* rgb_res + tile_xmin\n    window_xmax=(x+w) * rgb_res + tile_xmin"\
        "\n    window_ymin=(y+h) * rgb_res + tile_ymin\n    window_ymax=y * "\
        "rgb_res + tile_ymin\n    \n    return(window_xmin,window_xmax,windo"\
        "w_ymin,window_ymax)\n\n#Find geographic coordinates of the rgb tile"\
        " \nxmin,xmax,ymin,ymax=get_window_extent(annotations=self.annotatio"\
        "n_list, row=row, windows=self.windows,rgb_res=self.rgb_res)\n\n\n",
        'xmin\n',
        'xmax\n',
        'ymax\n',
        '407715.2-407715.2\n',
        '407715.2-407690.2\n',
        'ymin\n',
        'xmin,xmax,ymin,ymax=get_window_extent(annotations=annotations, row='\
        'row, windows=windows,rgb_res=rgb_res)\n',
        'lidar_path\n',
        'chm=compute_chm(annotations=self.annotation_list,row=row,windows=se'\
        'lf.windows,rgb_res=self.rgb_res,lidar_path=lidar_path)\n',
        'overlapping_annotations\n',
        'overlapping_boxes.columns\n',
        'tile_annotations["origin_ymax"]- window_coords["y1"]\n',
        'tile_annotations["origin_ymax"]\n',
        'window_coords["y1"]\n',
        'overlapping_boxes.window_xmin\n',
        'overlapping_boxes.window_xmin < 0\n',
        'overlapping_boxes[overlapping_boxes.window_xmin < 0].xmin\n',
        'overlapping_boxes[overlapping_boxes.window_xmin < 0].xmin=0\n',
        'overlapping_boxes[overlapping_boxes.window_xmin < 0]\n',
        'overlapping_boxes.loc[overlapping_boxes.window_xmin < 0,"xmin"]\n',
        'overlapping_boxes.loc[overlapping_boxes.window_xmin < 0,"xmin"]=0\n',
        'overlapping_boxes.loc[overlapping_boxes["window_xmin"] < 0,"xmin"]='\
        '0\n',
        '   overlapping_boxes.window_xmin < 0\n',
        'overlapping_boxes.loc[overlapping_boxes["window_ymin"] < 0,"window_'\
        'ymin"]\n',
        'window_coords\n',
        "window_coords['y2']\n",
        "window_coords['y2']-window_coords['y1']\n",
        "max_width=window_coords['y2']-window_coords['y1']\n",
        'overlapping_boxes[overlapping_boxes["window_xmin"] < max_width]\n',
        'overlapping_boxes[overlapping_boxes["window_xmax"] > max_width]\n',
        'overlapping_boxes.loc[overlapping_boxes["window_xmax"] > max_width,'\
        '"window_ymax"]=max_width\n',
        "max_height=window_coords['y2']-window_coords['y1']\n",
        'overlapping_annotations=[]\n\n#for each  box, check if annotations '\
        'overlap by more than 50% with crop.\nfor index,row in tile_annotati'\
        'ons.iterrows():\n    \n    #construct box\n    box_coords={}\n    '\
        '\n    #top left\n    box_coords["x1"]=row["origin_xmin"]\n    box_c'\
        'oords["y1"]=row["origin_ymin"]\n    \n    #Bottom right\n    box_co'\
        'ords["x2"]=row["origin_xmax"]\n    box_coords["y2"]=row["origin_yma'\
        'x"]     \n    \n    overlap=box_overlap(window_coords, box_coords)'\
        '\n    if overlap > 0.25:\n        \n        overlapping_annotations'\
        '.append(row.treeID)\n\n',
        'overlapping_boxes=tile_annotations[tile_annotations.treeID.isin(ove'\
        'rlapping_annotations)]\n',
        'overlapping_boxes.loc[overlapping_boxes["window_xmin"] < 0,"window_'\
        'xmin"]=0\noverlapping_boxes.loc[overlapping_boxes["window_ymin"] < '\
        '0,"window_ymin"]=0\n\n',
        ' overlapping_boxes.loc[overlapping_boxes["window_xmax"] > max_width'\
        ',"window_ymax"]\n',
        'overlapping_boxes.loc[overlapping_boxes["window_xmax"] > max_width,'\
        '"window_xmax"]\n',
        'overlapping_boxes.loc[overlapping_boxes["window_ymax"] > max_height'\
        ',"window_ymax"]\n',
        'max_height\n',
        'retrieve_window(numpy_image, index, windows)\n']},
                       'launch-id': None,
                       'sel-line': 1143L,
                       'sel-line-start': 120601L,
                       'selection_end': 120601L,
                       'selection_start': 120601L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 289L,
                       'folded-linenos': [],
                       'history': {None: ['pc_grid.raster\n',
        'pc.crs()\n',
        'pc.las.header()\n',
        'pc.las.header\n',
        'window_xmin=407690.2\nwindow_xmax=407715.2\nwindow_ymin=3292452.190'\
        '0000004\nwindow_ymax=3292477.1900000004\n\n',
        'def createPolygon(xmin,xmax,ymin,ymax):\n\n',
        'pc=pyfor.cloud.Cloud("/Users/ben/Documents/DeepForest/data/OSBS_006'\
        '.laz")\n',
        'clipped=cloud.clip(poly)\n',
        "clipped.plot(cmap='viridis', block=True)\n",
        'clipped.values\n',
        'clipped.las\n',
        'pc.las.pointsw\n',
        'pc=pyfor.cloud.Cloud("/Users/ben/Documents/DeepForest/data/NEON_D03'\
        '_OSBS_DP1_407000_3291000_classified_point_cloud.laz")\n',
        'pc.crs\n',
        'pc.las.points.head(n=10)\n',
        'clipped.las.points.x.min\n',
        'clipped.las.points.x.min()\n',
        'pc.las[pc.las.isnull().any(axis=1)]\n',
        'pc.las\n',
        'pc.las.points\n',
        'pc.las.points[pc.las.pointsisnull().any(axis=1)]\n',
        'pc.las.points[pc.las.points.isnull().any(axis=1)]\n',
        'pc.las.points.x\n',
        'pc.las.points.x=="NaN"\n',
        'pc.las.points.iloc[1:10]\n',
        'pc.las.points.iloc[500:1000]\n',
        'cloud.filter(min = -5, max = 200, dim = "z")\n',
        'pc.filter(min = -5, max = 200, dim = "z")\n',
        'pc.plot\n',
        '#TEMP\nwindow_xmin=407071.4\nwindow_xmax=407096.4\nwindow_ymin=3292'\
        '691.39\nwindow_ymax=3292666.39\n\n#Create shapely polygon\npoly=cre'\
        'atePolygon(window_xmin, window_xmax, window_ymin, window_ymax)\n\n'\
        '#Read lidar tile\npc=pyfor.cloud.Cloud("/Users/ben/Documents/DeepFo'\
        'rest/data/NEON_D03_OSBS_DP1_407000_3291000_classified_point_cloud.l'\
        'az")\n\npc.filter(min = -5, max = 100, dim = "z")\n\n',
        'clipped=pc.clip(poly)\n',
        'clipped.plot\n',
        'clipped.plot()\n',
        'clipped.las.points\n',
        "pc.plot(cmap='viridis', return_plot=False, block=False)\n",
        "'''\nRead in dat\n'''\nimport pandas as pd\nimport pyfor\nfrom shap"\
        "ely import geometry\n\ndef createPolygon(xmin,xmax,ymin,ymax):\n   "\
        " '''\n    Convert a pandas row into a polygon bounding box\n    '''"\
        " \n    \n    p1 = geometry.Point(xmin,ymin)\n    p2 = geometry.Poin"\
        "t(xmin,ymax)\n    p3 = geometry.Point(xmax,ymin)\n    p4 = geometry"\
        ".Point(xmax,ymax)\n    \n    pointList = [p1, p2, p3, p4, p1]\n    "\
        "\n    poly = geometry.Polygon([[p.x, p.y] for p in pointList])\n   "\
        " \n    return poly\n\n\ndef get_window_extent(annotations,row,windo"\
        "ws,rgb_res):\n    '''\n    Get the geographic coordinates of the sl"\
        "iding window.\n    Be careful that the ymin in the geographic data "\
        "refers to the utm (bottom) and the ymin in the cartesian refers to "\
        "origin (top). \n    '''\n    #Select tile from annotations to get e"\
        "xtent\n    tile_annotations=annotations[annotations[\"rgb_path\"]=="\
        "row[\"image\"]]\n    \n    #Set tile extent, remember to flip y axi"\
        "s from R -> Python\n    tile_xmin=tile_annotations.tile_xmin.unique"\
        "()[0]\n    tile_xmax=tile_annotations.tile_xmax.unique()[0]\n    ti"\
        "le_ymin=tile_annotations.tile_ymin.unique()[0]\n    tile_ymax=tile_"\
        "annotations.tile_ymax.unique()[0]\n    \n    #Get window cartesian "\
        "coordinates\n    x,y,w,h= windows[row[\"windows\"]].getRect()\n    "\
        "\n    window_xmin=x * rgb_res + tile_xmin\n    window_xmax=(x+w) * "\
        "rgb_res + tile_xmin\n    window_ymin=(y+h) * rgb_res + tile_ymin\n"\
        "    window_ymax=y * rgb_res + tile_ymin\n    \n    return(window_xm"\
        "in,window_xmax,window_ymin,window_ymax)\n\n\n",
        '#TEMP\nwindow_xmin=407690.2\nwindow_xmax=407715.2\nwindow_ymin=3291'\
        '477.2\nwindow_ymax=3291452.2\n\n#Create shapely polygon\npoly=creat'\
        'ePolygon(window_xmin, window_xmax, window_ymin, window_ymax)\n\n#Re'\
        'ad lidar tile\npc=pyfor.cloud.Cloud("/Users/ben/Documents/DeepFores'\
        't/data/NEON_D03_OSBS_DP1_407000_3291000_classified_point_cloud.laz"'\
        ')\n\npc.filter(min = -5, max = 100, dim = "z")\n\n#Clip to geograph'\
        'ic extent\nclipped=pc.clip(poly)\n\n',
        'clipped.plot3d\n',
        "clipped.plot3d(cmap='Spectral_r', max_points=500000.0)\n",
        'clipped\n',
        'import pyfor\nfrom shapely import geometry\n\n',
        "def createPolygon(xmin,xmax,ymin,ymax):\n    '''\n    Convert a pan"\
        "das row into a polygon bounding box\n    ''' \n    \n    p1 = geome"\
        "try.Point(xmin,ymin)\n    p2 = geometry.Point(xmin,ymax)\n    p3 = "\
        "geometry.Point(xmax,ymin)\n    p4 = geometry.Point(xmax,ymax)\n    "\
        "\n    pointList = [p1, p2, p3, p4, p1]\n    \n    poly = geometry.P"\
        "olygon([[p.x, p.y] for p in pointList])\n    \n    return poly\n\n",
        '#TEMP\nwindow_xmin=407690.2\nwindow_xmax=407715.2\nwindow_ymin=3291'\
        '477.2\nwindow_ymax=3291452.2\n\n',
        'poly=createPolygon(window_xmin, window_xmax, window_ymin, window_ym'\
        'ax)\n',
        'poly\n',
        "x,y = poly.exterior.xy\nax = fig.add_subplot(111)\nax.plot(x, y, co"\
        "lor='#6699cc', alpha=0.7,\n    linewidth=3, solid_capstyle='round',"\
        " zorder=2)\nax.set_title('Polygon')\n\n",
        'from matplotlib import pyplot\n',
        'window_xmin\n',
        'window_ymin\n',
        "def createPolygon(xmin,xmax,ymin,ymax):\n    '''\n    Convert a pan"\
        "das row into a polygon bounding box\n    ''' \n    \n    p1 = geome"\
        "try.Point(xmin,ymax)\n    p2 = geometry.Point(xmax,ymax)\n    p3 = "\
        "geometry.Point(xmax,ymin)\n    p4 = geometry.Point(xmin,ymax)\n    "\
        "\n    pointList = [p1, p2, p3, p4, p1]\n    \n    poly = geometry.P"\
        "olygon([[p.x, p.y] for p in pointList])\n    \n    return poly\n\n",
        'x\n',
        'y\n',
        "def createPolygon(xmin,xmax,ymin,ymax):\n    '''\n    Convert a pan"\
        "das row into a polygon bounding box\n    ''' \n    \n    p1 = geome"\
        "try.Point(xmin,ymax)\n    p2 = geometry.Point(xmax,ymax)\n    p3 = "\
        "geometry.Point(xmax,ymin)\n    p4 = geometry.Point(xmin,ymin)\n    "\
        "\n    pointList = [p1, p2, p3, p4, p1]\n    \n    poly = geometry.P"\
        "olygon([[p.x, p.y] for p in pointList])\n    \n    return poly\n\n",
        'poly=createPolygon(window_xmin, window_xmax, window_ymax,window_ymi'\
        'n)\n',
        "x,y = poly.exterior.xy\npyplot.plot(x, y, color='#6699cc', alpha=0."\
        "7,\n    linewidth=3, solid_capstyle='round', zorder=2)\n\n",
        '#Read lidar tile\npc=pyfor.cloud.Cloud("/Users/ben/Documents/DeepFo'\
        'rest/data/NEON_D03_OSBS_DP1_407000_3291000_classified_point_cloud.l'\
        'az")\n\npc.filter(min = -5, max = 100, dim = "z")\n\n#Clip to geogr'\
        'aphic extent\nclipped=pc.clip(poly)\n\n',
        'chm=clipped.chm(0.1)\n',
        "clipped.plot(cmap='viridis', return_plot=False, block=False)\n",
        'chm=clipped.chm(cell_size,interp_method="nearest")\n',
        "'''\nRead in dat\n'''\nimport pandas as pd\nimport pyfor\nfrom shap"\
        "ely import geometry\nfrom matplotlib import pyplot\n\ndef createPol"\
        "ygon(xmin,xmax,ymin,ymax):\n    '''\n    Convert a pandas row into "\
        "a polygon bounding box\n    ''' \n    \n    p1 = geometry.Point(xmi"\
        "n,ymax)\n    p2 = geometry.Point(xmax,ymax)\n    p3 = geometry.Poin"\
        "t(xmax,ymin)\n    p4 = geometry.Point(xmin,ymin)\n    \n    pointLi"\
        "st = [p1, p2, p3, p4, p1]\n    \n    poly = geometry.Polygon([[p.x,"\
        " p.y] for p in pointList])\n    \n    return poly\n\n",
        "#TEMP\nwindow_xmin=407690.2\nwindow_xmax=407715.2\nwindow_ymin=3291"\
        "477.2\nwindow_ymax=3291452.2\n\n#Create shapely polygon\npoly=creat"\
        "ePolygon(window_xmin, window_xmax, window_ymax,window_ymin)\n\n#Che"\
        "ck the polygon\n\nx,y = poly.exterior.xy\npyplot.plot(x, y, color='"\
        "#6699cc', alpha=0.7,\n    linewidth=3, solid_capstyle='round', zord"\
        "er=2)\n\n#Read lidar tile\npc=pyfor.cloud.Cloud(\"/Users/ben/Docume"\
        "nts/DeepForest/data/NEON_D03_OSBS_DP1_407000_3291000_classified_poi"\
        "nt_cloud.laz\")\n\npc.filter(min = -5, max = 100, dim = \"z\")\n\n"\
        "#Clip to geographic extent\nclipped=pc.clip(poly)\n\nchm=clipped.ch"\
        "m(cell_size=1,interp_method=\"nearest\")\n\n",
        'chm=clipped.chm(cell_size=0.5,interp_method="nearest")\n',
        'chm=clipped.chm(cell_size=0.25,interp_method="nearest")\n',
        'chm=clipped.chm(cell_size=0.1,interp_method="nearest")\n',
        'chm = pc.chm(cell_size = 0.75, interp_method = "nearest", pit_filte'\
        'r = "median", kernel_size = 3)\n',
        'chm = clipped.chm(cell_size = 0.75, interp_method = "nearest", pit_'\
        'filter = "median", kernel_size = 0.5)\n',
        'chm = clipped.chm(cell_size = 0.75, interp_method = "nearest", pit_'\
        'filter = "median", kernel_size = 1)\n',
        'chm = clipped.chm(cell_size = 0.1, interp_method = "nearest", pit_f'\
        'ilter = "median", kernel_size = 1)\n',
        'chm = clipped.chm(cell_size = 0.1, interp_method = "nearest", pit_f'\
        'ilter = "median", kernel_size = 5)\n',
        'chm = clipped.chm(cell_size = 0.1, interp_method = "nearest", pit_f'\
        'ilter = "median", kernel_size = 3)\n\nchm.plot()\n\n',
        'chm = clipped.chm(cell_size = 0.1, interp_method = "nearest", pit_f'\
        'ilter = "median", kernel_size = 1)\n\nchm.plot()\n\n',
        'chm = clipped.chm(cell_size = 1, interp_method = "nearest", pit_fil'\
        'ter = "median", kernel_size = 1)\n',
        'plot(chm)\n',
        'chm = clipped.chm(cell_size = 0.5, interp_method = "nearest", pit_f'\
        'ilter = "median", kernel_size = 1.5)\n',
        'chm = clipped.chm(cell_size = 0.5, interp_method = "nearest", pit_f'\
        'ilter = "median", kernel_size = 1)\n',
        'chm\n',
        'chm.iplot3d\n',
        'chm.iplot3d()\n',
        'chm = clipped.chm(cell_size = 2, interp_method = "nearest", pit_fil'\
        'ter = "median", kernel_size = 1)chm = clipped.chm(cell_size = 2, in'\
        'terp_method = "nearest")\n',
        'chm = clipped.chm(cell_size = 2, interp_method = "nearest")\n',
        'chm = clipped.chm(cell_size = 1, interp_method = "nearest")\n',
        'chm = clipped.chm(cell_size = 0.5, interp_method = "nearest", pit_f'\
        'ilter = "median", kernel_size = 3)\n',
        'chm = clipped.chm(cell_size = 0.75, interp_method = "nearest", pit_'\
        'filter = "median", kernel_size = 3)\n',
        'chm = clipped.chm(cell_size = 0.75, interp_method = "nearest")\nchm'\
        '.plot()\n\n',
        'chm = clipped.chm(cell_size = 0.1, interp_method = "nearest")\n',
        'chm = clipped.chm(cell_size = 0.5, interp_method = "nearest")\nchm.'\
        'plot()\n\n',
        'chm = clipped.chm(cell_size = 0.5, interp_method = "nearest")\nchm.'\
        'plot()\n\nchm = clipped.chm(cell_size = 0.5, interp_method = "neare'\
        'st", pit_filter = "median", kernel_size = 3)\n\nchm.plot()\n\n',
        'clipped.normalize(0.5)\n',
        'chm = clipped.chm(cell_size = 0.5, interp_method = "nearest")\n',
        'chm = clipped.chm(cell_size = 0.5, interp_method = "nearest", pit_f'\
        'ilter = "median", kernel_size = 3)\n\nchm.plot()\n\n',
        'clipped=pc.clip(poly)\n\nclipped.normalize(0.5)\nchm = clipped.chm('\
        'cell_size = 0.1, interp_method = "nearest")\nchm.plot()\n\nchm = cl'\
        'ipped.chm(cell_size = 0.1, interp_method = "nearest", pit_filter = '\
        '"median", kernel_size = 3)\n\nchm.plot()\n\n',
        'chm = clipped.chm(cell_size = 0.1, interp_method = "nearest", pit_f'\
        'ilter = "median", kernel_size = 10)\n\nchm.plot()\n\n',
        'chm = clipped.chm(cell_size = 0.1, interp_method = "nearest", pit_f'\
        'ilter = "median", kernel_size = 11)\n\nchm.plot()\n\n',
        'chm = clipped.chm(cell_size = 0.1, interp_method = "nearest", pit_f'\
        'ilter = "median", kernel_size = 8)\n',
        'chm = clipped.chm(cell_size = 0.1, interp_method = "nearest", pit_f'\
        'ilter = "median", kernel_size = 7)\n',
        'chm.plot(block=False, return_plot=False)\n',
        '#Read lidar tile\npc=pyfor.cloud.Cloud("/Users/ben/Documents/DeepFo'\
        'rest/data/NEON_D03_OSBS_DP1_407000_3291000_classified_point_cloud.l'\
        'az")\n\npc.filter(min = -5, max = 100, dim = "z")\n\n#Clip to geogr'\
        'aphic extent\nclipped=pc.clip(poly)\n\nclipped.normalize(1)\nchm = '\
        'clipped.chm(cell_size = 0.1, interp_method = "nearest", pit_filter '\
        '= "median", kernel_size = 7)\nchm.plot()\n\n',
        'chm = clipped.chm(cell_size = 0.1, interp_method = "nearest", pit_f'\
        'ilter = "median", kernel_size = 11)\n',
        'chm.plot()\n',
        '#Clip to geographic extent\nclipped=pc.clip(poly)\n\n#Quick filter '\
        'for unreasonable points.\nclipped.filter(min = -5, max = 100, dim ='\
        ' "z")\n\nclipped.normalize(1)\nchm = clipped.chm(cell_size = 0.1, i'\
        'nterp_method = "nearest", pit_filter = "median", kernel_size = 11)'\
        '\nchm.plot()\n\n']},
                       'launch-id': None,
                       'sel-line': 308L,
                       'sel-line-start': 13396L,
                       'selection_end': 13396L,
                       'selection_start': 13396L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'),
        {'attrib-starts': [('OnTheFlyGenerator',
                            195),
                           ('OnTheFlyGenerator.load_image',
                            294)],
         'first-line': 34L,
         'folded-linenos': [149L,
                            251L,
                            267L,
                            272L,
                            277L,
                            282L,
                            287L],
         'sel-line': 311L,
         'sel-line-start': 9958L,
         'selection_end': 9958L,
         'selection_start': 9958L,
         'zoom': 0L},
        1531252670.517795],
        [loc('../keras-retinanet/keras_retinanet/preprocessing/lidar_crop.py'),
         {'attrib-starts': [('get_window_extent',
                             -1)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 33L,
          'sel-line-start': 949L,
          'selection_end': 952L,
          'selection_start': 952L,
          'zoom': 0L},
         1531252697.112735],
        [loc('../keras-retinanet/keras_retinanet/preprocessing/lidar_crop.py'),
         {'attrib-starts': [('compute_chm',
                             50)],
          'first-line': 39L,
          'folded-linenos': [],
          'sel-line': 50L,
          'sel-line-start': 1558L,
          'selection_end': 1618L,
          'selection_start': 1562L,
          'zoom': 0L},
         1531252707.783701],
        [loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [150L,
                             252L,
                             268L,
                             273L,
                             278L,
                             283L,
                             288L],
          'sel-line': 5L,
          'sel-line-start': 196L,
          'selection_end': 196L,
          'selection_start': 196L,
          'zoom': 0L},
         1531253223.855131],
        [loc('../keras-retinanet/keras_retinanet/preprocessing/lidar_crop.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 5L,
          'sel-line-start': 106L,
          'selection_end': 106L,
          'selection_start': 106L,
          'zoom': 0L},
         1531253262.356528],
        [loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'),
         {'attrib-starts': [('OnTheFlyGenerator',
                             196),
                            ('OnTheFlyGenerator.load_image',
                             295)],
          'first-line': 300L,
          'folded-linenos': [150L,
                             252L,
                             268L,
                             273L,
                             278L,
                             283L,
                             288L],
          'sel-line': 315L,
          'sel-line-start': 10148L,
          'selection_end': 10278L,
          'selection_start': 10148L,
          'zoom': 0L},
         1531253274.398168],
        [loc('../keras-retinanet/keras_retinanet/preprocessing/lidar_crop.py'),
         {'attrib-starts': [('compute_chm',
                             50)],
          'first-line': 37L,
          'folded-linenos': [],
          'sel-line': 68L,
          'sel-line-start': 2217L,
          'selection_end': 2221L,
          'selection_start': 2221L,
          'zoom': 0L},
         1531253415.292019],
        [loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'),
         {'attrib-starts': [('OnTheFlyGenerator',
                             196),
                            ('OnTheFlyGenerator.load_image',
                             295)],
          'first-line': 300L,
          'folded-linenos': [150L,
                             252L,
                             268L,
                             273L,
                             278L,
                             283L,
                             288L],
          'sel-line': 315L,
          'sel-line-start': 10148L,
          'selection_end': 10278L,
          'selection_start': 10148L,
          'zoom': 0L},
         1531253429.531433],
        [loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/laspy/file.py'),
         {'attrib-starts': [('File',
                             7)],
          'first-line': 3L,
          'folded-linenos': [],
          'sel-line': 8L,
          'sel-line-start': 153L,
          'selection_end': 174L,
          'selection_start': 174L,
          'zoom': 0L},
         1531255319.821438],
        [loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'),
         {'attrib-starts': [('OnTheFlyGenerator',
                             198),
                            ('OnTheFlyGenerator.load_image',
                             297)],
          'first-line': 302L,
          'folded-linenos': [152L,
                             254L,
                             270L,
                             275L,
                             280L,
                             285L,
                             290L],
          'sel-line': 316L,
          'sel-line-start': 10184L,
          'selection_end': 10209L,
          'selection_start': 10184L,
          'zoom': 0L},
         1531258323.161065],
        [loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/laspy/file.py'),
         {'attrib-starts': [('File',
                             7),
                            ('File.open',
                             65)],
          'first-line': 56L,
          'folded-linenos': [],
          'sel-line': 71L,
          'sel-line-start': 2616L,
          'selection_end': 2616L,
          'selection_start': 2616L,
          'zoom': 0L},
         1531258326.413312],
        [loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'),
         {'attrib-starts': [('fetch_annotations',
                             97)],
          'first-line': 126L,
          'folded-linenos': [162L,
                             264L,
                             280L,
                             285L,
                             290L,
                             295L,
                             300L],
          'sel-line': 148L,
          'sel-line-start': 4624L,
          'selection_end': 4636L,
          'selection_start': 4636L,
          'zoom': 0L},
         1531259155.79564],
        [loc('DeepForest/Lidar.py'),
         {'attrib-starts': [('preprocess',
                             14)],
          'first-line': 93L,
          'folded-linenos': [],
          'sel-line': 29L,
          'sel-line-start': 722L,
          'selection_end': 770L,
          'selection_start': 722L,
          'zoom': 0L},
         1531259157.062212],
        [loc('../keras-retinanet/keras_retinanet/preprocessing/lidar_crop.py'),
         {'attrib-starts': [('compute_chm',
                             50)],
          'first-line': 27L,
          'folded-linenos': [],
          'sel-line': 68L,
          'sel-line-start': 2217L,
          'selection_end': 2221L,
          'selection_start': 2221L,
          'zoom': 0L},
         1531259159.922433],
        [loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'),
         {'attrib-starts': [('OnTheFlyGenerator',
                             208),
                            ('OnTheFlyGenerator.show',
                             264)],
          'first-line': 262L,
          'folded-linenos': [162L,
                             280L,
                             285L,
                             290L,
                             295L,
                             300L],
          'sel-line': 267L,
          'sel-line-start': 8770L,
          'selection_end': 8770L,
          'selection_start': 8770L,
          'zoom': 0L},
         1531259421.53371],
        [loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/preprocessing/generator.py'),
         {'attrib-starts': [('Generator',
                             39),
                            ('Generator.load_annotations_group',
                             121)],
          'first-line': 119L,
          'folded-linenos': [],
          'sel-line': 124L,
          'sel-line-start': 4605L,
          'selection_end': 4605L,
          'selection_start': 4605L,
          'zoom': 0L},
         1531259423.531537],
        [loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [162L,
                             277L,
                             282L,
                             287L,
                             292L,
                             297L],
          'sel-line': 8L,
          'sel-line-start': 304L,
          'selection_end': 321L,
          'selection_start': 321L,
          'zoom': 0L},
         1531259531.360978],
        [loc('train.py'),
         {'attrib-starts': [],
          'first-line': 451L,
          'folded-linenos': [67L,
                             75L,
                             270L],
          'sel-line': 456L,
          'sel-line-start': 18598L,
          'selection_end': 18634L,
          'selection_start': 18634L,
          'zoom': 0L},
         1531259537.075078],
        [loc('_config_debug.yml'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 12L,
          'sel-line-start': 246L,
          'selection_end': 246L,
          'selection_start': 246L,
          'zoom': 0L},
         1531259546.898198],
        [loc('train.py'),
         {'attrib-starts': [('main',
                             358)],
          'first-line': 414L,
          'folded-linenos': [67L,
                             75L,
                             270L],
          'sel-line': 428L,
          'sel-line-start': 17756L,
          'selection_end': 17760L,
          'selection_start': 17760L,
          'zoom': 0L},
         1531259668.533315]],
        20),
        'current-loc': loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'),
        'editor-state-list': [(loc('eval.py'),
                               {'attrib-starts': [('create_generator',
        44)],
                                'first-line': 52L,
                                'folded-linenos': [],
                                'sel-line': 71L,
                                'sel-line-start': 2514L,
                                'selection_end': 2556L,
                                'selection_start': 2556L,
                                'zoom': 0L}),
                              (loc('DeepForest/Lidar.py'),
                               {'attrib-starts': [('preprocess',
        14)],
                                'first-line': 93L,
                                'folded-linenos': [],
                                'sel-line': 29L,
                                'sel-line-start': 722L,
                                'selection_end': 770L,
                                'selection_start': 722L,
                                'zoom': 0L}),
                              (loc('../keras-retinanet/keras_retinanet/preprocessing/lidar_crop.py'),
                               {'attrib-starts': [('compute_chm',
        50)],
                                'first-line': 27L,
                                'folded-linenos': [],
                                'sel-line': 68L,
                                'sel-line-start': 2217L,
                                'selection_end': 2221L,
                                'selection_start': 2221L,
                                'zoom': 0L}),
                              (loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'),
                               {'attrib-starts': [('fetch_annotations',
        97)],
                                'first-line': 143L,
                                'folded-linenos': [161L,
        276L,
        281L,
        286L,
        291L,
        296L],
                                'sel-line': 156L,
                                'sel-line-start': 5100L,
                                'selection_end': 5199L,
                                'selection_start': 5199L,
                                'zoom': 0L}),
                              (loc('DeepForest/RGB.py'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 0L,
                                'sel-line-start': 0L,
                                'selection_end': 0L,
                                'selection_start': 0L,
                                'zoom': 0L}),
                              (loc('DeepForest/sliding_window.py'),
                               {'attrib-starts': [('compute_windows',
        7)],
                                'first-line': 4L,
                                'folded-linenos': [],
                                'sel-line': 9L,
                                'sel-line-start': 282L,
                                'selection_end': 285L,
                                'selection_start': 285L,
                                'zoom': 0L}),
                              (loc('train.py'),
                               {'attrib-starts': [('main',
        358)],
                                'first-line': 414L,
                                'folded-linenos': [67L,
        75L,
        270L],
                                'sel-line': 428L,
                                'sel-line-start': 17756L,
                                'selection_end': 17760L,
                                'selection_start': 17760L,
                                'zoom': 0L}),
                              (loc('../keras-retinanet/keras_retinanet/utils/eval.py'),
                               {'attrib-starts': [('_get_detections',
        56)],
                                'first-line': 95L,
                                'folded-linenos': [],
                                'sel-line': 100L,
                                'sel-line-start': 3706L,
                                'selection_end': 3720L,
                                'selection_start': 3720L,
                                'zoom': 0L}),
                              (loc('_config.yml'),
                               {'attrib-starts': [],
                                'first-line': 9L,
                                'folded-linenos': [],
                                'sel-line': 22L,
                                'sel-line-start': 591L,
                                'selection_end': 606L,
                                'selection_start': 606L,
                                'zoom': 0L}),
                              (loc('_config_debug.yml'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 12L,
                                'sel-line-start': 246L,
                                'selection_end': 246L,
                                'selection_start': 246L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('eval.py'),
         loc('DeepForest/Lidar.py'),
         loc('../keras-retinanet/keras_retinanet/preprocessing/lidar_crop.py'),
         loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'),
         loc('DeepForest/RGB.py'),
         loc('DeepForest/sliding_window.py'),
         loc('train.py'),
         loc('../keras-retinanet/keras_retinanet/utils/eval.py'),
         loc('_config.yml'),
         loc('_config_debug.yml')]),
                               'open_files': [u'_config.yml',
        u'DeepForest/RGB.py',
        u'DeepForest/sliding_window.py',
        u'../keras-retinanet/keras_retinanet/utils/eval.py',
        u'eval.py',
        u'DeepForest/Lidar.py',
        u'../keras-retinanet/keras_retinanet/preprocessing/lidar_crop.py',
        u'_config_debug.yml',
        u'train.py',
        u'../keras-retinanet/keras_retinanet/preprocessing/onthefly.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.27419354838709675},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         23,
                         1428,
                         877)}]}
guimgr.recent-documents = [loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'),
                           loc('train.py'),
                           loc('_config_debug.yml'),
                           loc('../keras-retinanet/keras_retinanet/preprocessing/lidar_crop.py'),
                           loc('DeepForest/Lidar.py'),
                           loc('eval.py'),
                           loc('../keras-retinanet/keras_retinanet/utils/eval.py'),
                           loc('DeepForest/sliding_window.py'),
                           loc('DeepForest/RGB.py'),
                           loc('_config.yml')]
guimgr.visual-state = {loc('DeepForest/CropGenerator.py'): {'attrib-starts': [('d'\
        'ata2geojson',
        113)],
        'first-line': 2L,
        'folded-linenos': [],
        'sel-line': 114L,
        'sel-line-start': 3378L,
        'selection_end': 3385L,
        'selection_start': 3385L,
        'zoom': 0L},
                       loc('DeepForest/Lidar.py'): {'attrib-starts': [('Lida'\
        'r',
        2),
        ('Lidar.plot',
         6)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 8L,
        'sel-line-start': 169L,
        'selection_end': 177L,
        'selection_start': 177L,
        'zoom': 0L},
                       loc('DeepForest/README.md'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/RGB.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/config.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 14L,
        'sel-line-start': 494L,
        'selection_end': 494L,
        'selection_start': 494L,
        'zoom': 0L},
                       loc('DeepForest/dask_utils.py'): {'attrib-starts': [('s'\
        'tart_dask',
        4)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 126L,
        'selection_end': 130L,
        'selection_start': 130L,
        'zoom': 0L},
                       loc('DeepForest/pointcloud.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/preprocess.py'): {'attrib-starts': [('N'\
        'DVI',
        37)],
        'first-line': 13L,
        'folded-linenos': [],
        'sel-line': 60L,
        'sel-line-start': 1530L,
        'selection_end': 1530L,
        'selection_start': 1530L,
        'zoom': 0L},
                       loc('DeepForest/sliding_window.py'): {'attrib-starts': [('l'\
        'oad',
        14)],
        'first-line': 18L,
        'folded-linenos': [],
        'sel-line': 34L,
        'sel-line-start': 1051L,
        'selection_end': 1059L,
        'selection_start': 1059L,
        'zoom': 0L},
                       loc('DeepForest/tools.py'): {'attrib-starts': [],
        'first-line': 14L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 712L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/untitled-2.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('HPC/submit_cpu_job.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 13L,
        'sel-line-start': 646L,
        'selection_end': 652L,
        'selection_start': 652L,
        'zoom': 0L},
                       loc('HPC/submit_eval.sh'): {'attrib-starts': [],
        'first-line': 10L,
        'folded-linenos': [],
        'sel-line': 19L,
        'sel-line-start': 729L,
        'selection_end': 767L,
        'selection_start': 767L,
        'zoom': 0L},
                       loc('HPC/submit_job.sh'): {'attrib-starts': [],
        'first-line': 16L,
        'folded-linenos': [],
        'sel-line': 15L,
        'sel-line-start': 687L,
        'selection_end': 747L,
        'selection_start': 747L,
        'zoom': 0L},
                       loc('README.md'): {'attrib-starts': [],
        'first-line': 26L,
        'folded-linenos': [],
        'sel-line': 42L,
        'sel-line-start': 1588L,
        'selection_end': 1588L,
        'selection_start': 1588L,
        'zoom': 0L},
                       loc('RGB.py'): {'attrib-starts': [],
                                       'first-line': 0L,
                                       'folded-linenos': [],
                                       'sel-line': 0L,
                                       'sel-line-start': 0L,
                                       'selection_end': 0L,
                                       'selection_start': 0L,
                                       'zoom': 0L},
                       loc('_config.yml'): {'attrib-starts': [],
        'first-line': 22L,
        'folded-linenos': [],
        'sel-line': 36L,
        'sel-line-start': 963L,
        'selection_end': 963L,
        'selection_start': 963L,
        'zoom': 0L},
                       loc('_config_debug.yml'): {'attrib-starts': [],
        'first-line': 14L,
        'folded-linenos': [],
        'sel-line': 29L,
        'sel-line-start': 658L,
        'selection_end': 681L,
        'selection_start': 681L,
        'zoom': 0L},
                       loc('config.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('debug.py'): {'attrib-starts': [('parse_args',
        117)],
        'first-line': 178L,
        'folded-linenos': [],
        'sel-line': 161L,
        'sel-line-start': 7130L,
        'selection_end': 7154L,
        'selection_start': 7154L,
        'zoom': 0L},
                       loc('environment.yml'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('eval.py'): {'attrib-starts': [],
        'first-line': 9L,
        'folded-linenos': [],
        'sel-line': 14L,
        'sel-line-start': 596L,
        'selection_end': 596L,
        'selection_start': 596L,
        'zoom': 0L},
                       loc('install_dependencies.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 251L,
        'selection_end': 251L,
        'selection_start': 251L,
        'zoom': 0L},
                       loc('models/inception.py'): {'attrib-starts': [('get_'\
        'model',
        4)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 197L,
        'selection_end': 245L,
        'selection_start': 245L,
        'zoom': 0L},
                       loc('models/rgb.py'): {'attrib-starts': [('get_model',
        6)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 8L,
        'sel-line-start': 141L,
        'selection_end': 221L,
        'selection_start': 221L,
        'zoom': 0L},
                       loc('predict.py'): {'attrib-starts': [('view_predicti'\
        'ons',
        38)],
        'first-line': 28L,
        'folded-linenos': [],
        'sel-line': 41L,
        'sel-line-start': 1071L,
        'selection_end': 1075L,
        'selection_start': 1075L,
        'zoom': 0L},
                       loc('tests/__init__.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_Lidar.py'): {'attrib-starts': [('test'\
        '_Lidar',
        2)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 207L,
        'selection_end': 207L,
        'selection_start': 207L,
        'zoom': 0L},
                       loc('train.py'): {'attrib-starts': [('create_generato'\
        'rs',
        203)],
        'first-line': 446L,
        'folded-linenos': [67L,
                           75L,
                           270L],
        'sel-line': 237L,
        'sel-line-start': 8541L,
        'selection_end': 8584L,
        'selection_start': 8584L,
        'zoom': 0L},
                       loc('train_retinanet.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../DeepMeerkat/training/Classification/GenerateBoxes_new.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/_config_debug.yml'): {'a'\
        'ttrib-starts': [],
        'first-line': 1L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 246L,
        'selection_end': 246L,
        'selection_start': 246L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/config.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 14L,
        'sel-line-start': 494L,
        'selection_end': 494L,
        'selection_start': 494L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/eval_test.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 26L,
        'folded-linenos': [],
        'sel-line': 31L,
        'sel-line-start': 1064L,
        'selection_end': 1064L,
        'selection_start': 1064L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/evaluate.py'): {'a'\
        'ttrib-starts': [('main',
                          114)],
        'first-line': 137L,
        'folded-linenos': [],
        'sel-line': 151L,
        'sel-line-start': 5982L,
        'selection_end': 5999L,
        'selection_start': 5999L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/bin/train.py'): {'a'\
        'ttrib-starts': [('parse_args',
                          368)],
        'first-line': 244L,
        'folded-linenos': [],
        'sel-line': 416L,
        'sel-line-start': 16696L,
        'selection_end': 16766L,
        'selection_start': 16766L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/callbacks/eval.py'): {'a'\
        'ttrib-starts': [('Evaluate',
                          20),
                         ('Evaluate.on_epoch_end',
                          48)],
        'first-line': 62L,
        'folded-linenos': [],
        'sel-line': 67L,
        'sel-line-start': 2728L,
        'selection_end': 2749L,
        'selection_start': 2744L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/preprocessing/generator.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 27L,
        'folded-linenos': [],
        'sel-line': 33L,
        'sel-line-start': 884L,
        'selection_end': 904L,
        'selection_start': 888L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/preprocessing/onthefly.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 350L,
        'folded-linenos': [],
        'sel-line': 369L,
        'sel-line-start': 11880L,
        'selection_end': 11880L,
        'selection_start': 11880L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/colors.py'): {'a'\
        'ttrib-starts': [('label_color',
                          3)],
        'first-line': 91L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 436L,
        'selection_end': 484L,
        'selection_start': 484L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/compute_overlap.pyx'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/eval.py'): {'a'\
        'ttrib-starts': [('_get_detections',
                          56)],
        'first-line': 92L,
        'folded-linenos': [],
        'sel-line': 99L,
        'sel-line-start': 3681L,
        'selection_end': 3705L,
        'selection_start': 3705L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/image.py'): {'a'\
        'ttrib-starts': [('read_image_bgr',
                          25)],
        'first-line': 107L,
        'folded-linenos': [],
        'sel-line': 33L,
        'sel-line-start': 933L,
        'selection_end': 933L,
        'selection_start': 933L,
        'zoom': 0L},
                       loc('../keras-retinanet/keras_retinanet/utils/visualization.py'): {'a'\
        'ttrib-starts': [('draw_caption',
                          35)],
        'first-line': 28L,
        'folded-linenos': [],
        'sel-line': 45L,
        'sel-line-start': 1493L,
        'selection_end': 1588L,
        'selection_start': 1588L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/cloud.py'): {'attrib-starts': [('C'\
        'loud',
        41),
        ('Cloud.filter_z',
         152)],
        'first-line': 148L,
        'folded-linenos': [],
        'sel-line': 162L,
        'sel-line-start': 5941L,
        'selection_end': 5991L,
        'selection_start': 5991L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/metrics2.py'): {'attrib-starts': [('m'\
        'ode',
        12)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 477L,
        'selection_end': 480L,
        'selection_start': 480L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/pointcloud2.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/rasterizer.py'): {'attrib-starts': [('G'\
        'rid',
        7),
        ('Grid.__init__',
         14)],
        'first-line': 4L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 827L,
        'selection_end': 838L,
        'selection_start': 838L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/test.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 13L,
        'sel-line-start': 250L,
        'selection_end': 286L,
        'selection_start': 286L,
        'zoom': 0L},
                       loc('../train.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../Downloads/Miniconda3-latest-MacOSX-x86_64.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/comet_ml/keras_logger.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 55L,
        'folded-linenos': [],
        'sel-line': 67L,
        'sel-line-start': 2236L,
        'selection_end': 2236L,
        'selection_start': 2236L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/bin/debug.py'): {'a'\
        'ttrib-starts': [('run',
                          157)],
        'first-line': 86L,
        'folded-linenos': [],
        'sel-line': 198L,
        'sel-line-start': 8432L,
        'selection_end': 8432L,
        'selection_start': 8432L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/callbacks/eval.py'): {'a'\
        'ttrib-starts': [('Evaluate',
                          20),
                         ('Evaluate.on_epoch_end',
                          48)],
        'first-line': 42L,
        'folded-linenos': [],
        'sel-line': 51L,
        'sel-line-start': 2162L,
        'selection_end': 2186L,
        'selection_start': 2186L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/preprocessing/generator.py'): {'a'\
        'ttrib-starts': [('Generator',
                          39),
                         ('Generator.load_annotations_group',
                          121)],
        'first-line': 119L,
        'folded-linenos': [],
        'sel-line': 124L,
        'sel-line-start': 4607L,
        'selection_end': 4607L,
        'selection_start': 4607L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/preprocessing/onthefly.py'): {'a'\
        'ttrib-starts': [('OnTheFlyGenerator',
                          220),
                         ('OnTheFlyGenerator.__init__',
                          226)],
        'first-line': 251L,
        'folded-linenos': [],
        'sel-line': 266L,
        'sel-line-start': 8361L,
        'selection_end': 8361L,
        'selection_start': 8361L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/utils/eval.py'): {'a'\
        'ttrib-starts': [('_get_detections',
                          56)],
        'first-line': 100L,
        'folded-linenos': [],
        'sel-line': 103L,
        'sel-line-start': 4001L,
        'selection_end': 4014L,
        'selection_start': 4014L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/keras_retinanet/utils/visualization.py'): {'a'\
        'ttrib-starts': [('draw_caption',
                          35)],
        'first-line': 32L,
        'folded-linenos': [],
        'sel-line': 44L,
        'sel-line-start': 1400L,
        'selection_end': 1490L,
        'selection_start': 1490L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          100),
                         ('NDFrame.__nonzero__',
                          1569)],
        'first-line': 1567L,
        'folded-linenos': [],
        'sel-line': 1572L,
        'sel-line-start': 51097L,
        'selection_end': 51097L,
        'selection_start': 51097L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/rasterio/__init__.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/requests/adapters.py'): {'a'\
        'ttrib-starts': [('HTTPAdapter',
                          80),
                         ('HTTPAdapter.send',
                          387)],
        'first-line': 502L,
        'folded-linenos': [],
        'sel-line': 520L,
        'sel-line-start': 20691L,
        'selection_end': 20691L,
        'selection_start': 20691L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/utils/np_utils.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 15L,
        'sel-line-start': 720L,
        'selection_end': 758L,
        'selection_start': 758L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/DeepForest/lib/python3.6/site-packages/tensorflow/python/ops/functional_ops.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 16L,
        'sel-line-start': 554L,
        'selection_end': 563L,
        'selection_start': 563L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          97),
                         ('NDFrame._get_axis_number',
                          345)],
        'first-line': 339L,
        'folded-linenos': [],
        'sel-line': 356L,
        'sel-line-start': 12711L,
        'selection_end': 12711L,
        'selection_start': 12711L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/indexing.py'): {'a'\
        'ttrib-starts': [('_LocIndexer',
                          1413),
                         ('_LocIndexer._has_valid_type',
                          1442)],
        'first-line': 1466L,
        'folded-linenos': [],
        'sel-line': 1476L,
        'sel-line-start': 52819L,
        'selection_end': 52888L,
        'selection_start': 52888L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/series.py'): {'a'\
        'ttrib-starts': [('Series',
                          119),
                         ('Series.apply',
                          2425)],
        'first-line': 2515L,
        'folded-linenos': [],
        'sel-line': 2537L,
        'sel-line-start': 81854L,
        'selection_end': 81854L,
        'selection_start': 81854L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pyfor_env/lib/python3.6/site-packages/plotly/offline/offline.py'): {'a'\
        'ttrib-starts': [('init_notebook_mode',
                          79)],
        'first-line': 89L,
        'folded-linenos': [],
        'sel-line': 106L,
        'sel-line-start': 3737L,
        'selection_end': 3737L,
        'selection_start': 3737L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pyfor_env/lib/python3.6/site-packages/rasterio/__init__.py'): {'a'\
        'ttrib-starts': [('NullHandler',
                          18)],
        'first-line': 5L,
        'folded-linenos': [],
        'sel-line': 18L,
        'sel-line-start': 346L,
        'selection_end': 385L,
        'selection_start': 385L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('custom',
                        [u'PYTHONPATH=""'])}
proj.pyexec = {None: ('custom',
                      u'/Users/ben/miniconda3/envs/DeepForest/bin/python')}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
search.replace-history = [u'batch_size']
search.search-history = [u'fetch_annotation',
                         u'fetch',
                         u'load_csv',
                         u'load',
                         u'load_',
                         u'retrieve',
                         u'tile',
                         u'steps',
                         u'score',
                         u'sample',
                         u'save',
                         u'print',
                         u'epoch',
                         u'eval.py',
                         u'train.py',
                         u'save_path',
                         u'evaluate',
                         u'experiment',
                         u'on_epoch_end',
                         u'copy']
testing.stored-results = (1,
                          [],
                          {})
