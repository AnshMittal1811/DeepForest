#!wing
#!version=6.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.err-values = {loc('train.py'): {}}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'bpZQzW8ebbbzsc7bKeMVVsVoTb'\
        'xpUqNE',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.25,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': ()}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [1,
                          0],
        'notebook_display': 'normal',
        'notebook_percent': 0.4267185473411155,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': u'grid',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': True,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 44,
                                       'fReplaceText': u'row',
                                       'fReverse': False,
                                       'fSearchText': u'f',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': True,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {}),
                     ('testing',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 4620L,
                       'folded-linenos': [],
                       'history': {u'file:/Users/ben/Documents/DeepForest/train.py': ['D'\
        'eepForest\n',
        'self.list_IDs[k] for k in indexes\n',
        'list_IDs_temp = [self.list_IDs[k] for k in indexes]\n',
        '[self.list_IDs for k in indexes]\n',
        '[self.list_IDs[k] for k in indexes]\n',
        'indexes[1]\n',
        'self.list_IDs[indexes[1]]\n',
        'self.list_IDs.keys\n',
        'index+1\n',
        'self.indexes[index]\n',
        'self.list_IDs[2]\n',
        'self.list_IDs(2)\n',
        'v\n',
        'index\n',
        'len(self.list_IDs)\n',
        'self.indexes\n',
        'self.indexes.shape\n',
        'index*self.batch_size:(index+1)*self.batch_size\n',
        'index*self.batch_size\n',
        'self.batch_size\n',
        '(index+1)*self.batch_size\n',
        'self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n',
        'indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_s'\
        'ize]\n',
        'indexes\n',
        'self.list_IDs[1]\n',
        'self.list_IDs["1"]\n',
        'self.list_IDs.items\n',
        'self.list_IDs.items()\n',
        'self.list_IDs.items()[]',
        '[self.list_IDs.items()[k] for k in indexes]\n',
        'list_IDs_temp = [self.list_IDs.keys()[k] for k in indexes]\n',
        'self.list_IDs\n',
        'self.list_IDs.keys()\n',
        'self.list_IDs.keys()[1]\n',
        'self.indexes[1:10]\n',
        'self.list_IDs.values()[1]\n',
        'self.list_IDs.values()\n',
        'partition\n',
        'self.box_file.keys\n',
        'self.box_file.keys()\n',
        'self.box_file.index.values\n',
        'self.box_file.index.values()\n',
        'self.box_file.loc(id)\n',
        'self.box_file.head\n',
        'self.box_file.index.values.head\n',
        'self.box_file.index.values[1:4]\n',
        'self.box_file.loc(NEON_D03_OSBS_DP1_398000_3280000_classified_point'\
        '_cloud_laz_silva_100)\n',
        'self.box_file.loc("NEON_D03_OSBS_DP1_398000_3280000_classified_poin'\
        't_cloud_laz_silva_100")\n',
        'self.box_file\n',
        "self.box_file['NEON_D03_OSBS_DP1_398000_3280000_classified_point_cl"\
        "oud_laz_silva_100']\n",
        'self.box_file.index.values[1]\n',
        'self.box_file.loc(self.box_file.index.values[1])\n',
        'self.box_file.loc[self.box_file.index.values[1]]\n',
        'labels\n',
        'from sklearn.feature_extraction import DictVectorizer as DV\n',
        '[lookup[x] for x in labels]\n',
        '[x for x in labels]\n',
        '[x for x in labels.items()]\n',
        'lookup={"Background": 0, "Tree": 1}\n',
        'lookup\n',
        'lookup["Background"]\n',
        '[lookup[labels[x]] for x in labels]\n',
        'list_IDs_shuffle\n',
        'rgb_tile_dir + row.rgb_path\n',
        'data.head\n',
        'data.head()\n',
        'featues\n',
        'self.labels\n',
        'batch_labels\n',
        'id\n',
        'labels[id]\n',
        'self.__data_generation(labels=self.labels,list_IDs_shuffle=list_IDs'\
        '_temp)\n',
        'rgb_batch\n',
        'rgb_batch.shape()\n',
        'len(rgb_batch)\n',
        'len(rgb_batch[0].shape)\n',
        'rgb_batch[0].shape\n',
        'np.array(rgb_batch)\n',
        'np.array(rgb_batch).shape\n',
        'y.shape\n',
        'len(y)\n',
        'X,y =np.array(rgb_batch), y \n',
        'y\n',
        'X\n',
        'features\n',
        'row\n',
        'data.xmin\n',
        'callbacks\n']},
                       'launch-id': None,
                       'sel-line': 4638L,
                       'sel-line-start': 10001145L,
                       'selection_end': 10001145L,
                       'selection_start': 10001145L,
                       'zoom': 0L}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 1712L,
                       'folded-linenos': [],
                       'history': {None: ['import keras\n',
        'keras.optimizers.RMSprop\n',
        'from DeepForest.config import config\nimport pandas as pd\nimport g'\
        'lob\nimport numpy as np\nfrom DeepForest.CropGenerator import DataG'\
        'enerator\nimport models\nimport keras\n\n',
        "##Set seed for reproducibility##\nnp.random.seed(2)\n\n#Load data\n"\
        "data_paths=glob.glob(config['data_dir']+\"/*.csv\")\ndataframes = ("\
        "pd.read_csv(f,index_col=0) for f in data_paths)\ndata = pd.concat(d"\
        "ataframes, ignore_index=True)\n\n#set index explicitely\ndata=data."\
        "set_index('box')\n\n#Partition data\nmsk = np.random.rand(len(data)"\
        ") < 0.8\n\n#Training and testing dataframes\ntrain = data[msk]\ntes"\
        "t = data[~msk]\n\n#Create dictionaries to keep track of labels and "\
        "splits\npartition={\"train\": train.index.values,\"test\": test.ind"\
        "ex.values}\nlabels=data.label.to_dict()\n\n",
        "data_paths=glob.glob(config['bbox_data_dir']+\"/*.csv\")\ndataframe"\
        "s = (pd.read_csv(f,index_col=0) for f in data_paths)\ndata = pd.con"\
        "cat(dataframes, ignore_index=True)\n\n#set index explicitely\ndata="\
        "data.set_index('box')\n\n",
        '#Partition data\nmsk = np.random.rand(len(data)) < 0.8\n\n#Training'\
        ' and testing dataframes\ntrain = data[msk]\ntest = data[~msk]\n\n#C'\
        'reate dictionaries to keep track of labels and splits\npartition={"'\
        'train": train.index.values,"test": test.index.values}\nlabels=data.'\
        'label.to_dict()\n\n',
        "training_generator = DataGenerator(partition['train'], labels, **co"\
        "nfig.training_params)\ntesting_generator = DataGenerator(partition["\
        "'test'], labels, **config.training_params)\n\n",
        "training_generator = DataGenerator(partition['train'], labels, **co"\
        "nfig['training_params'])\n",
        "train['1']\n",
        'train\n',
        'train.iloc(1)\n',
        'train.loc(1)\n',
        'train.index.values[1]\n',
        "train['NEON_D03_OSBS_DP1_398000_3280000_classified_point_cloud_laz_"\
        "silva_10']\n",
        'train.index.values\n',
        "train['NEON_D03_OSBS_DP1_398000_3280000_classified_point_cloud_laz_"\
        "silva_100']\n",
        "train.loc('NEON_D03_OSBS_DP1_398000_3280000_classified_point_cloud_"\
        "laz_silva_100')\n",
        "train.loc('NEON_D03_OSBS_DP1_398000_3280000_classified_point_cloud_"\
        "laz_silva_100',)\n",
        'test.head\n',
        'test.iloc(1)\n',
        'test.iloc[1]\n',
        'x=test.iloc[1]\n',
        'x=test.loc["NEON_D03_OSBS_DP1_398000_3280000_classified_point_cloud'\
        '_laz_silva_100"]\n',
        'train.loc["NEON_D03_OSBS_DP1_398000_3280000_classified_point_cloud_'\
        'laz_silva_100"]\n',
        'row=train.loc["NEON_D03_OSBS_DP1_398000_3280000_classified_point_cl'\
        'oud_laz_silva_100"]\n',
        'features=tools.data2geojson(row)\n',
        'import tools\n',
        'import os\n',
        'os.getcwd()\n',
        'from DeepMeerkat\n',
        "def data2geojson(df):\n    '''\n    Convert a pandas row into a pol"\
        "ygon bounding box\n    '''\n    features = []\n    insert_features "\
        "= lambda X: features.append(\n            {\"type\": \"Polygon\",\n"\
        "                 \"coordinates\": \n                 [[(float(X[\""\
        "xmin\"]),float(X[\"ymin\"])),\n                     (float(X[\"xmax"\
        "\"]),float(X[\"ymin\"])),\n                     (float(X[\"xmax\"])"\
        ",float(X[\"ymax\"])),\n                     (float(X[\"xmin\"]),flo"\
        "at(X[\"ymax\"])),\n                     (float(X[\"xmin\"]),float(X"\
        "[\"ymin\"]))]]}\n        )\n             \n    df.apply(insert_feat"\
        "ures, axis=1)\n    return features\n\n",
        'features=data2geojson(row)\n',
        'df=row\n',
        "def data2geojson(df):\n    '''\n    Convert a pandas row into a pol"\
        "ygon bounding box\n    ''' \n    \n    features={\"type\": \"Polygo"\
        "n\",\n         \"coordinates\": \n         [[(float(X[\"xmin\"]),fl"\
        "oat(X[\"ymin\"])),\n             (float(X[\"xmax\"]),float(X[\"ymin"\
        "\"])),\n             (float(X[\"xmax\"]),float(X[\"ymax\"])),\n    "\
        "         (float(X[\"xmin\"]),float(X[\"ymax\"])),\n             (fl"\
        "oat(X[\"xmin\"]),float(X[\"ymin\"]))]]}       \n    return features"\
        "\n\n",
        "def data2geojson(row):\n    '''\n    Convert a pandas row into a po"\
        "lygon bounding box\n    ''' \n    \n    features={\"type\": \"Polyg"\
        "on\",\n         \"coordinates\": \n         [[(float(row[\"xmin\"])"\
        ",float(row[\"ymin\"])),\n             (float(row[\"xmax\"]),float(r"\
        "ow[\"ymin\"])),\n             (float(row[\"xmax\"]),float(row[\"yma"\
        "x\"])),\n             (float(row[\"xmin\"]),float(row[\"ymax\"])),"\
        "\n             (float(row[\"xmin\"]),float(row[\"ymin\"]))]]}      "\
        " \n    \n    return features\n\n",
        'features={"type": "Polygon",\n     "coordinates": \n     [[(float(r'\
        'ow["xmin"]),float(row["ymin"])),\n         (float(row["xmax"]),floa'\
        't(row["ymin"])),\n         (float(row["xmax"]),float(row["ymax"])),'\
        '\n         (float(row["xmin"]),float(row["ymax"])),\n         (floa'\
        't(row["xmin"]),float(row["ymin"]))]]}\n\n',
        'features\n',
        'row\n',
        'row.rgb_path\n',
        'import rasterio\nfrom rasterio.tools.mask import mask\nfrom rasteri'\
        'o import plot\nfrom matplotlib import pyplot\n\n',
        'with rasterio.open(row.rgb_path) as src:\n    out_image, out_transf'\
        'orm = mask(src, [features], crop=True)\n\n',
        'config\n',
        'config.rgb_tile_dir\n',
        "config['rgb_tile_dir']\n",
        "config['rgb_tile_dir'] + src\n",
        "config['rgb_tile_dir'] + row.rgb_path\n",
        "with rasterio.open(row.rgb_path) as src:\n    out_image, out_transf"\
        "orm = mask(config['rgb_tile_dir'] + src, [features], crop=True)\n\n",
        "with rasterio.open(config['rgb_tile_dir'] + row.rgb_path) as src:\n"\
        "    out_image, out_transform = mask(src, [features], crop=True)\n\n",
        'type(out_image)\n',
        'out_image.shape\n',
        'x = np.zeros((3, 4, 5))\n',
        'x\n',
        'x.shape\n',
        'np.transpose(out_image).shape\n',
        "a=rasterio.open(config['rgb_tile_dir'] + row.rgb_path) \n",
        'a.shape\n',
        'a\n',
        'a.read()\n',
        'b=a.read()\n',
        'b.shape()\n',
        'b.shape\n',
        'np.moveaxis(out_image, 0, -1).shape\n',
        'ojut\n',
        'out_image=np.moveaxis(out_image, 0, -1).shape\n',
        "#crop and return image\nwith rasterio.open(config['rgb_tile_dir'] +"\
        " row.rgb_path) as src:\n    out_image, out_transform = mask(src, [f"\
        "eatures], crop=True)\n    \n#color channel should be last, check th"\
        "e order of rasterio, all should be rotation invariant?\nout_image=n"\
        "p.moveaxis(out_image, 0, -1)\n\n",
        'out_image\n',
        'np.array.filled\n',
        'out_image.data\n',
        'out_image.data.shape\n',
        'class(out_image.data)\n',
        'type(out_image.data)\n',
        'from cv2 import resize\n',
        'import sklearn\n',
        'import cv2\n',
        'cv2.resize(src, dsize, dst, fx, fy, interpolation)',
        "'''\nTraining script for DeepForest.\nBen Weinstein - ben.weinstein"\
        "@weecology.org\nLoad data, partition into training and testing, and"\
        " evaluate deep learning model\n'''\nfrom DeepForest.config import c"\
        "onfig\nimport pandas as pd\nimport glob\nimport numpy as np\nfrom D"\
        "eepForest.CropGenerator import DataGenerator\nfrom models import rg"\
        "b\nimport keras\n\n##Set seed for reproducibility##\nnp.random.seed"\
        "(2)\n\n#Load data\ndata_paths=glob.glob(config['bbox_data_dir']+\""\
        "/*.csv\")\ndataframes = (pd.read_csv(f,index_col=0) for f in data_p"\
        "aths)\ndata = pd.concat(dataframes, ignore_index=True)\n\n#set inde"\
        "x explicitely\ndata=data.set_index('box')\n\n#create numeric labels"\
        "\nlookup={\"Background\": 0, \"Tree\": 1}\n\n",
        'data.labels_numeric=[lookup[labels[x]] for x in data.labels]\n',
        'data[labels]\n',
        "data['labels']\n",
        'data.labels\n',
        'data\n',
        'data["labels"]\n',
        "data['label']\n",
        'data.label_numeric=[lookup[labels[x]] for x in data.label]\n',
        'data.label_numeric=[lookup[x] for x in data.label]\n',
        "data['']\n",
        "data['label_numeric']=[lookup[x] for x in data.label]\n",
        'data.head(0)\n',
        'data.head()\n',
        'data.tail()\n',
        "from DeepForest.config import config\nimport pandas as pd\nimport g"\
        "lob\nimport numpy as np\nfrom DeepForest.CropGenerator import DataG"\
        "enerator\nfrom models import rgb\nimport keras\n\n##Set seed for re"\
        "producibility##\nnp.random.seed(2)\n\n#Load data\ndata_paths=glob.g"\
        "lob(config['bbox_data_dir']+\"/*.csv\")\ndataframes = (pd.read_csv("\
        "f,index_col=0) for f in data_paths)\ndata = pd.concat(dataframes, i"\
        "gnore_index=True)\n\n#set index explicitely\ndata=data.set_index('b"\
        "ox')\n\n#create numeric labels\nlookup={\"Background\": 0, \"Tree\""\
        ": 1}\ndata['label_numeric']=[lookup[x] for x in data.label]\n\n#Par"\
        "tition data\nmsk = np.random.rand(len(data)) < 0.8\n\n#Training and"\
        " testing dataframes\ntrain = data[msk]\ntest = data[~msk]\n\n#Creat"\
        "e dictionaries to keep track of labels and splits\npartition={\"tra"\
        "in\": train.index.values,\"test\": test.index.values}\nlabels=data."\
        "label_numeric.to_dict()\n\n\n",
        'data.xmin\n',
        'data.xmin==data.xmax\n',
        'sum(data.xmin==data.xmax)\n',
        'data[data.xmin==data.xmax]\n',
        'data[data.xmin==data.xmax].shape\n',
        'data[~data.xmin==data.xmax].shape\n',
        'data[!data.xmin==data.xmax].shape\n',
        'data[data.xmin!=data.xmax].shape\n',
        'data.shape\n']},
                       'launch-id': None,
                       'sel-line': 1728L,
                       'sel-line-start': 133070L,
                       'selection_end': 133096L,
                       'selection_start': 133070L,
                       'zoom': 0L}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('_config.yml'),
        {'attrib-starts': [],
         'first-line': 0L,
         'folded-linenos': [],
         'sel-line': 4L,
         'sel-line-start': 208L,
         'selection_end': 261L,
         'selection_start': 261L,
         'zoom': 0L},
        1526679313.108735],
        [loc('models/rgb.py'),
         {'attrib-starts': [('get_model',
                             6)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 16L,
          'sel-line-start': 583L,
          'selection_end': 599L,
          'selection_start': 599L,
          'zoom': 0L},
         1526679314.436467],
        [loc('DeepForest/CropGenerator.py'),
         {'attrib-starts': [('DataGenerator',
                             12),
                            ('DataGenerator.__data_generation',
                             56)],
          'first-line': 74L,
          'folded-linenos': [],
          'sel-line': 86L,
          'sel-line-start': 2748L,
          'selection_end': 2789L,
          'selection_start': 2789L,
          'zoom': 0L},
         1526679573.604079],
        [loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/keras/engine/training.py'),
         {'attrib-starts': [('_standardize_input_data',
                             26)],
          'first-line': 96L,
          'folded-linenos': [],
          'sel-line': 122L,
          'sel-line-start': 5168L,
          'selection_end': 5168L,
          'selection_start': 5168L,
          'zoom': 0L},
         1526679580.70302],
        [loc('models/rgb.py'),
         {'attrib-starts': [('get_model',
                             6)],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 16L,
          'sel-line-start': 583L,
          'selection_end': 600L,
          'selection_start': 600L,
          'zoom': 0L},
         1526679695.697096],
        [loc('DeepForest/CropGenerator.py'),
         {'attrib-starts': [('DataGenerator',
                             12),
                            ('DataGenerator.__data_generation',
                             56)],
          'first-line': 17L,
          'folded-linenos': [],
          'sel-line': 93L,
          'sel-line-start': 2870L,
          'selection_end': 2870L,
          'selection_start': 2870L,
          'zoom': 0L},
         1526679829.299658],
        [loc('train.py'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 22L,
          'sel-line-start': 643L,
          'selection_end': 663L,
          'selection_start': 663L,
          'zoom': 0L},
         1526679978.452629],
        [loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/generic.py'),
         {'attrib-starts': [('NDFrame',
                             97),
                            ('NDFrame.__invert__',
                             1018)],
          'first-line': 994L,
          'folded-linenos': [],
          'sel-line': 1020L,
          'sel-line-start': 33001L,
          'selection_end': 33001L,
          'selection_start': 33001L,
          'zoom': 0L},
         1526680069.860537],
        [loc('train.py'),
         {'attrib-starts': [],
          'first-line': 4L,
          'folded-linenos': [],
          'sel-line': 59L,
          'sel-line-start': 1799L,
          'selection_end': 1848L,
          'selection_start': 1848L,
          'zoom': 0L},
         1526680552.558927],
        [loc('DeepForest/CropGenerator.py'),
         {'attrib-starts': [('DataGenerator',
                             12),
                            ('DataGenerator.__data_generation',
                             56)],
          'first-line': 66L,
          'folded-linenos': [],
          'sel-line': 71L,
          'sel-line-start': 2198L,
          'selection_end': 2219L,
          'selection_start': 2214L,
          'zoom': 0L},
         1526680560.791634],
        [loc('DeepForest/CropGenerator.py'),
         {'attrib-starts': [('DataGenerator',
                             12),
                            ('DataGenerator.__data_generation',
                             56)],
          'first-line': 66L,
          'folded-linenos': [],
          'sel-line': 81L,
          'sel-line-start': 2529L,
          'selection_end': 2563L,
          'selection_start': 2563L,
          'zoom': 0L},
         1526680584.295017],
        [loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/keras/engine/training.py'),
         {'attrib-starts': [('Model',
                             544),
                            ('Model.fit_generator',
                             1950)],
          'first-line': 2098L,
          'folded-linenos': [],
          'sel-line': 2124L,
          'sel-line-start': 100297L,
          'selection_end': 100297L,
          'selection_start': 100297L,
          'zoom': 0L},
         1526680586.370881],
        [loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/keras/legacy/interfaces.py'),
         {'attrib-starts': [('generate_legacy_interface',
                             12),
                            ('generate_legacy_interface.legacy_support',
                             25),
                            ('generate_legacy_interface.legacy_support.wrapp'\
                             'er',
                             27)],
          'first-line': 64L,
          'folded-linenos': [],
          'sel-line': 90L,
          'sel-line-start': 3948L,
          'selection_end': 3948L,
          'selection_start': 3948L,
          'zoom': 0L},
         1526680587.513093],
        [loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/keras/engine/training.py'),
         {'attrib-starts': [('Model',
                             544),
                            ('Model.fit_generator',
                             1950)],
          'first-line': 2109L,
          'folded-linenos': [],
          'sel-line': 2124L,
          'sel-line-start': 100297L,
          'selection_end': 100297L,
          'selection_start': 100297L,
          'zoom': 0L},
         1526680613.930413],
        [loc('DeepForest/CropGenerator.py'),
         {'attrib-starts': [('DataGenerator',
                             12),
                            ('DataGenerator.on_epoch_end',
                             50)],
          'first-line': 43L,
          'folded-linenos': [],
          'sel-line': 55L,
          'sel-line-start': 1732L,
          'selection_end': 1736L,
          'selection_start': 1736L,
          'zoom': 0L},
         1526680654.672811],
        [loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/keras/engine/training.py'),
         {'attrib-starts': [('Model',
                             544),
                            ('Model.fit_generator',
                             1950)],
          'first-line': 2109L,
          'folded-linenos': [],
          'sel-line': 2119L,
          'sel-line-start': 100104L,
          'selection_end': 100123L,
          'selection_start': 100123L,
          'zoom': 0L},
         1526680656.49807],
        [loc('train.py'),
         {'attrib-starts': [],
          'first-line': 39L,
          'folded-linenos': [],
          'sel-line': 51L,
          'sel-line-start': 1550L,
          'selection_end': 1550L,
          'selection_start': 1550L,
          'zoom': 0L},
         1526681131.078976],
        [loc('_config.yml'),
         {'attrib-starts': [],
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 8L,
          'sel-line-start': 408L,
          'selection_end': 432L,
          'selection_start': 432L,
          'zoom': 0L},
         1526681149.415536],
        [loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/keras/engine/training.py'),
         {'attrib-starts': [('Model',
                             544),
                            ('Model.fit_generator',
                             1950)],
          'first-line': 2109L,
          'folded-linenos': [],
          'sel-line': 2119L,
          'sel-line-start': 100104L,
          'selection_end': 100123L,
          'selection_start': 100123L,
          'zoom': 0L},
         1526681150.10001],
        [loc('train.py'),
         {'attrib-starts': [],
          'first-line': 39L,
          'folded-linenos': [],
          'sel-line': 57L,
          'sel-line-start': 1697L,
          'selection_end': 1763L,
          'selection_start': 1763L,
          'zoom': 0L},
         1526681205.24519]],
        20),
        'current-loc': loc('train.py'),
        'editor-state-list': [(loc('DeepForest/CropGenerator.py'),
                               {'attrib-starts': [('DataGenerator',
        12),
        ('DataGenerator.on_epoch_end',
         50)],
                                'first-line': 43L,
                                'folded-linenos': [],
                                'sel-line': 55L,
                                'sel-line-start': 1732L,
                                'selection_end': 1736L,
                                'selection_start': 1736L,
                                'zoom': 0L}),
                              (loc('models/rgb.py'),
                               {'attrib-starts': [('get_model',
        6)],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 16L,
                                'sel-line-start': 583L,
                                'selection_end': 600L,
                                'selection_start': 600L,
                                'zoom': 0L}),
                              (loc('train.py'),
                               {'attrib-starts': [],
                                'first-line': 29L,
                                'folded-linenos': [],
                                'sel-line': 43L,
                                'sel-line-start': 1138L,
                                'selection_end': 1208L,
                                'selection_start': 1208L,
                                'zoom': 0L}),
                              (loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/keras/engine/training.py'),
                               {'attrib-starts': [('Model',
        544),
        ('Model.fit_generator',
         1950)],
                                'first-line': 2109L,
                                'folded-linenos': [],
                                'sel-line': 2119L,
                                'sel-line-start': 100104L,
                                'selection_end': 100123L,
                                'selection_start': 100123L,
                                'zoom': 0L}),
                              (loc('_config.yml'),
                               {'attrib-starts': [],
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 8L,
                                'sel-line-start': 408L,
                                'selection_end': 432L,
                                'selection_start': 432L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('DeepForest/CropGenerator.py'),
         loc('models/rgb.py'),
         loc('train.py'),
         loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/keras/engine/training.py'),
         loc('_config.yml')]),
                               'open_files': [u'models/rgb.py',
        u'DeepForest/CropGenerator.py',
        u'_config.yml',
        u'train.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.31298245614035086},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (1587,
                         23,
                         1404,
                         1005)}]}
guimgr.recent-documents = [loc('train.py'),
                           loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/keras/engine/training.py'),
                           loc('_config.yml'),
                           loc('DeepForest/CropGenerator.py'),
                           loc('models/rgb.py')]
guimgr.visual-state = {loc('DeepForest/CropGenerator.py'): {'attrib-starts': [('c'\
        'rop_rgb',
        93)],
        'first-line': 7L,
        'folded-linenos': [],
        'sel-line': 111L,
        'sel-line-start': 3350L,
        'selection_end': 3373L,
        'selection_start': 3373L,
        'zoom': 0L},
                       loc('DeepForest/Lidar.py'): {'attrib-starts': [('Lida'\
        'r',
        2),
        ('Lidar.plot',
         6)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 8L,
        'sel-line-start': 169L,
        'selection_end': 177L,
        'selection_start': 177L,
        'zoom': 0L},
                       loc('DeepForest/README.md'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/RGB.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/pointcloud.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('DeepForest/tools.py'): {'attrib-starts': [('star'\
        't_dask',
        8)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 38L,
        'sel-line-start': 1199L,
        'selection_end': 1201L,
        'selection_start': 1201L,
        'zoom': 0L},
                       loc('DeepForest/untitled-2.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('README.md'): {'attrib-starts': [],
        'first-line': 26L,
        'folded-linenos': [],
        'sel-line': 42L,
        'sel-line-start': 1588L,
        'selection_end': 1588L,
        'selection_start': 1588L,
        'zoom': 0L},
                       loc('RGB.py'): {'attrib-starts': [],
                                       'first-line': 0L,
                                       'folded-linenos': [],
                                       'sel-line': 0L,
                                       'sel-line-start': 0L,
                                       'selection_end': 0L,
                                       'selection_start': 0L,
                                       'zoom': 0L},
                       loc('_config.yml'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 6L,
        'sel-line-start': 380L,
        'selection_end': 380L,
        'selection_start': 380L,
        'zoom': 0L},
                       loc('config.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('install_dependencies.sh'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 251L,
        'selection_end': 251L,
        'selection_start': 251L,
        'zoom': 0L},
                       loc('models/rgb.py'): {'attrib-starts': [('get_model',
        6)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 15L,
        'sel-line-start': 526L,
        'selection_end': 582L,
        'selection_start': 582L,
        'zoom': 0L},
                       loc('tests/__init__.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('tests/test_Lidar.py'): {'attrib-starts': [('test'\
        '_Lidar',
        2)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 207L,
        'selection_end': 207L,
        'selection_start': 207L,
        'zoom': 0L},
                       loc('train.py'): {'attrib-starts': [],
        'first-line': 20L,
        'folded-linenos': [],
        'sel-line': 44L,
        'sel-line-start': 1233L,
        'selection_end': 1233L,
        'selection_start': 1233L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/cloud.py'): {'attrib-starts': [('C'\
        'loud',
        41),
        ('Cloud.filter_z',
         152)],
        'first-line': 148L,
        'folded-linenos': [],
        'sel-line': 162L,
        'sel-line-start': 5941L,
        'selection_end': 5991L,
        'selection_start': 5991L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/metrics2.py'): {'attrib-starts': [('m'\
        'ode',
        12)],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 477L,
        'selection_end': 480L,
        'selection_start': 480L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/pointcloud2.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/rasterizer.py'): {'attrib-starts': [('G'\
        'rid',
        7),
        ('Grid.__init__',
         14)],
        'first-line': 4L,
        'folded-linenos': [],
        'sel-line': 21L,
        'sel-line-start': 827L,
        'selection_end': 838L,
        'selection_start': 838L,
        'zoom': 0L},
                       loc('../pyfor/pyfor/test.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 13L,
        'sel-line-start': 250L,
        'selection_end': 286L,
        'selection_start': 286L,
        'zoom': 0L},
                       loc('../train.py'): {'attrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../Downloads/Miniconda3-latest-MacOSX-x86_64.sh'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py'): {'a'\
        'ttrib-starts': [],
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 16L,
        'sel-line-start': 554L,
        'selection_end': 563L,
        'selection_start': 563L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/generic.py'): {'a'\
        'ttrib-starts': [('NDFrame',
                          97),
                         ('NDFrame._get_axis_number',
                          345)],
        'first-line': 339L,
        'folded-linenos': [],
        'sel-line': 356L,
        'sel-line-start': 12711L,
        'selection_end': 12711L,
        'selection_start': 12711L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/indexing.py'): {'a'\
        'ttrib-starts': [('_LocIndexer',
                          1413),
                         ('_LocIndexer._has_valid_type',
                          1442)],
        'first-line': 1466L,
        'folded-linenos': [],
        'sel-line': 1476L,
        'sel-line-start': 52819L,
        'selection_end': 52888L,
        'selection_start': 52888L,
        'zoom': 0L},
                       loc('../../miniconda3/envs/pangeo/lib/python3.6/site-packages/pandas/core/series.py'): {'a'\
        'ttrib-starts': [('Series',
                          119),
                         ('Series.apply',
                          2425)],
        'first-line': 2515L,
        'folded-linenos': [],
        'sel-line': 2537L,
        'sel-line-start': 81854L,
        'selection_end': 81854L,
        'selection_start': 81854L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('custom',
                        [u'PYTHONPATH=""'])}
proj.pyexec = {None: ('custom',
                      u'/Users/ben/miniconda3/envs/pangeo/bin/python3.6')}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
search.search-history = [u'print',
                         u'self.box',
                         u'pd',
                         u'pandas',
                         u'grid']
testing.stored-results = (1,
                          [],
                          {})
